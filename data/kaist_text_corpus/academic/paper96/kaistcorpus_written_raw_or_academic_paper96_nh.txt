<language> Korean </language>
<textcode> KSC-5601-1988 </textcode>
<process> raw </process>
<version> 2001(or)</version>
<filename> kaistcorpus_written_raw_or_academic_paper96_nh.txt </filename>
<title> FMS에서 부품의 흐름을 고려하는  계층적 통제시스템의 설계에 관한 연구 </title>
<author> 김철영 </author>
<date> 1994 </date>
<publisher> 서울대학교 </publisher>
<kdc> TM530.96 </kdc>
<tdmsfiletext>
I  서   론 

1. 연구배경 

현대 제조업 분야에서 전반적인 추세는 단일상품의 대량생산보다는 소비자의 다양한 기호와 욕구에 부응하기 위한 다양한 제품의 한정적인 수량만큼의 생산이며 따라서 제품의 수명주기도 짧아지고 있다. 많은 사람들이 효율적인 다품종소량생산을 위해서는 설비의 setup으로 인한 생산지연을 줄이는 문제와 팔렛(pallet)과 치구(fixture)들을 통한 자재 및 부품의 자동반송의 중요성을 인식해왔다. 그리고 이러한 것들이 컴퓨터의 도움으로 가능하다는 것을 알게 되었고, 이러한 연구 결과가 오늘날 유연생산시스템(FMS:Flexble Manufacturing System)이라는 개념의 발전을 가져오게 하였다[4]. 
FMS는 여러대의 NC-기계, 로보트, 버퍼등으로 구성된 셀들과 이들을 연결하는 자동화된 물류시스템으로 이루어진다. FMS의 통제는 주로 각 셀의 운영을 통제하는 셀(cell)-통제 컴퓨터와 시스템 전체를 통제하는 작업장(shop floor)-통제 컴퓨터의 네트워크에 의해서 이루어진다. FMS의 각 셀은 다양한 형태의 구성요소(component)와 구성(configuration)을 가지며, 공구, 치구, 버퍼등의 제한된 자원을 공유하게 된다. 이에 따라 FMS의 운영에는 여러가지 제약이 따르게 되며, 데드락과 같은 이상현상이 발생할 수 있다. 
FMS에서는 다양한 종류의 부품에 대한 가공이 여러 셀에서 동시에 행해진다. 이는 주로 자동화된 물류시스템과 가공시간에 비해 작은 준비시간(setup time)에 의해서 가능해진다. 이 특징은 시스템의 용량의 적절한 배분을 통한 높은 생산성과, 수요의 변화나 기계 고장등의 동적인 환경에 적절하게 대처할 수 있는 유연성을 제공해 준다. 그러나 이러한 FMS의 이점들은 효율적인 통제에 의해서만 얻어질 수 있다.
FMS의 통제에 대한 관점은 '운영의 최적화'와 '시스템의 안정성'으로 나누어 볼 수 있다. 전자의 경우는 단순화된 시스템 운영의 가정하에, 시스템의 수행도의 최적화에 초점을 두는 것으로, 많은 연구가 행해졌다[4,5,6,12,16]. 그러나 생산시스템의 실제 운영상의 특징을 반영하지 못함으로 인하여, 효과적인 통제시스템의 구현방법을 제공하지 못해왔다. 후자의 경우는 FMS의 실제 운영을 그대로 모형화하여, 운영상의 제약을 만족하게 하여 안정적인 시스템의 운영을 보장하는 것으로, 이에 관한 연구는 미비한 실정이다. 이는 주로 다양한 FMS의 구성형태에 대해서 적용가능하고 이산적이며 비동기적인 프로세스로 구성되는 시스템의 통제에 대한 체계적인 접근방법이 개발되지 않았기 때문이다. 
여러 연구에서 지적되었듯이, FMS의 구현에서 가장 큰 병목은 통제시스템, 특히 통제 소프트웨어의 구현이다[23,25]. 효과적인 FMS 통제시스템의 개발을 위해서는 먼저 안정적인 시스템의 운영을 보장하는 통제시스템이 구축된 후, 시스템 운영의 최적화를 지향하는 통제시스템으로 확장되어야 한다.

2. 연구의 목적 

FMS 통제시스템 구축을 위해서 다음 사항이 고려되어야 한다.

⑴ FMS 통제의 초점은 부품의 흐름에 맞추어져야 한다.

앞절에서 언급한 FMS의 특징을 고려하면, FMS 통제의 초점은 각 부품의 흐름(routing)에 맞추어져야 한다. 각 셀에서 가공이 끝난 부품은 다음 가공을 위해 다른 셀로 이송되어, 각 셀의 차단현상(blocking)이나 기갈현상(starving)이 가능한 한 방지되어야 하며, 기계고장등의 동적상황하에 대처할 수 있는 적절한 부품의 이송이 행해져야 한다. 또한 부품의 흐름에 따른 셀간의 차단현상은은 무한대기(indefinite postponement), 데드락(deadlock)등의 여러가지 심각한 상황(critical exception)을 일으킬 수 있으며, 부품의 흐름에 대한 이상상황의 통제가 중요하다.

⑵ FMS는 안정적인 운영이 우선되어야 한다.

종래의 통제시스템에 대한 연구는 주로 생산의 최적화에 초점을 맞추었다. 그러나 이런 접근방법은 생산시스템을 효과적으로 모형화하지 못하며, 이로 인해 현실적인 해를 제공하지 못하였다. 또한 FMS에서 무한대기, 데드락같은 이상상황이 점차 실제적인 문제로 부각되고 있다[36]. 따라서 대부분의 실제 FMS를 운용하는데는 최적화이전에 안정적인 시스템의 운영을 위한 통제시스템의 개발이 우선되어야 한다. 
⑶ FMS 통제이론은 효과적인 통제시스템의 구현방법을 제공해야 한다.

기존의 FMS 구현에 있어서 가장 큰 병목은 통제 소프트웨어의 개발이었다. 이는 주로 이산적이며 비동기적인 프로세스로 구성되는 FMS에 적용할 수 있는 통제이론이 개발되어있지 않으며, 시험가동을 통한 통제소프트웨어 오류의 발견 및 제거가 대부분 가능하지 않은 것에 기인한다. 통제시스템의 구현을 위해서는 FMS의 이산적(discrete)이며 비동기적(asynchronous)인 특성을 모형화하고 분석할 수 있는 방법론이 요구된다. 또한 FMS는 통제되어야 하는 변수가 많은 복잡한 시스템이므로, 사용자의 명시에 대해서 통제시스템의 논리를 자동적으로 생성할 수 있는 방법론이 효과적이다.

⑷ FMS 전체에 적용할 수 있는 방법론이 개발되어야 한다. 

각 부품은 여러 셀의 가공을 거쳐야 하는 경우가 많기 때문에, 부품의 흐름 및 셀 투입 결정은 중요한 문제로 대두된다. 따라서 각 셀의 제어를 통해 제조 장비를 운용하는 것은 물론이고 시스템 전체의 통합된 목표를 고려한 통제시스템이 개발되어야 한다. 일반적으로 이산현상 시스템의 분석 및 설계(analysis/synthesis) 절차는 복잡도가 높다. 특히 비동기적인 프로세스간 동시화에 대한 모형의 복잡도는 프로세스의 수에 대해 지수적으로 증가한다. 따라서 복잡도의 증가에 대응할 수 있는 계층적인 통제 방법론이 제공되어야 한다.

본 연구에서는 FMS의 안정적인 운영을 위한 통제시스템의 구현을 위한 이산현상 시스템 접근법을 제시한다. Ramadge와 Wonham에 의해 제안된 Supervisory control 접근법은 이산현상 시스템의 통제에 대한 명료한 이론적 바탕을 제공해 준다. 그러나 모형화의 기법의 제한, 모형의 해석에 관한 제한등으로 실제 응용에 어려움이 있다([7],[35]). 본 연구에서는 FMS의 통제문제를 셀 통제문제와  부품의 흐름에 대한 셀의 조정(coordination) 문제인 작업장 통제문제로 구분하여, FMS의 통제를 행하는 계층적 통제시스템의 논리를 구성하는 방법론을 제시하고자 한다. 

개발된 방법론은 다음과 같은 특징을 가진다.

⑴ FMS의 이산현상시스템적 특징을 고려한 방법론을 제공한다.
⑵ FMS 전체를 대상으로 하는 계층적 방법론을 제공한다.
⑶ 통제시스템 논리의 자동적인 생성방법을 제공한다.
⑷ 생성된 통제시스템의 안정성을 보장한다.

II 연 구 현 황 - FMS 통제시스템 개발기법  


FMS 통제시스템 개발에는 다양한 기법들이 적용되어 왔다. 최근의 동향은 크게 AI-기법에 기반한 접근방법, 객체지향기법, 이산현상시스템 모형화에 근거한 시스템 개발 등으로 크게 나눌수 있다. 
일반적으로 통제 소프트웨어는 복잡한 구조를 가지며, 오동작에 대한 손실이 매우 크고, 시험가동에 의한 오류의 발견과 수정이 가능하지 않으므로, 다양한 생산시스템의 모형화, 제약의 명시, 검증, 컨트롤러의 구성, 성능평가에 적용될 수 있는 체계적 접근방법이 요구된다. 형식적 접근방법은 명시된 특징들이 검증된 모형을, 쉽게 소프트웨어로 구성할 수 있는 도구와 절차를 제공한다. 이러한 요구를 만족시킬 수 있는 접근방법으로 이산현상시스템 접근법이 있다. 이산현상 시스템에 대한 형식적 접근방법으로는 Petri-net, Supervisory Control 이론, 동시성 이론(Theory of concurrency)등이 있다. 


1. AI 와 객체지향 기법 

AI-기법은 시스템의 정성적인 특징을 표현하는데 적합한 장점때문에 많은 분야에서 널리 사용되고 있다. 이 기법들은 일반적으로 가능해를 빠른 시간에 찾아내는데 적합하다. AI-기법은 전통적으로 로봇의 작업계획과 예외처리등의 상황에 주로 적용되었으며, FMS의 생산계획과 일정계획 문제를 위한 시스템이 다수 개발되었다. 대표적인 것으로 ISIS([11])는 다섯가지 범주의 제약(constraint)을 만족하는 일정을 찾는 제약지향-탐색기법을 사용하는 일정계획시스템이다. Shaw는 FMS의 각 셀을 입찰(bidding)을 통해 협력하는 의사결정 단위로 모형화하고, 수정된 Petri-net을 통해서 입찰과정을 조정하는 방법을 사용하고 있다[34].
객체지향기법은 시스템 모형화의 한 방법으로 실제 객체를 그대로 모형화함으로써 쉬운 모형화 방법을 제공한다. 객체지향 시스템의 주요한 특징은 추상화, 상속성, 다형성으로서, 복잡한 생산시스템의 모형화에 강력한 도구를 제공한다[10,18]. Maimon과 Fisher는 객체지향 언어의 상속성(inheritance)과 instancing 구조를 이용하여, 생산시스템의 계층적 컨트롤러를 구현하는 OBC(Object-Based Controller)를 제안하였다[18]. 이 컨트롤러의 계층은 셀간-coordinator, 셀-컨트롤러, 장치-컨트롤러로 구성된다. Duan은 Moore machine을 확장해서 여러 셀 구성요소들간의 관계를 명시하고 이를 구현하는 EMM(Extended Moore Machine)-네트워크 모형을 제안했다[10]. 이 연구는 소프트웨어 구현에 초점을 두고 있으며, 시스템에 대한 특징을 검증하기위한 EMM의 구조는 고려되지 않았다. 대체로 객체지향기법 연구들은 쉬운 모형화 기법을 바탕으로 빠른 소프트웨어 구현에 초점을 두고 있으며, 컨트롤러의 안정성을 보장하지 않는다.
2. 이산현상시스템 접근법 

2.1 Petri-net 이론 

Petri-net 이론은 가장 널리 쓰이는 이산현상 시스템에 대한 형식적 접근법(formal method)으로서, 시각적인 모형화 방법과 수학적인 해석 방법을 제공해 준다. Petri-net 모형은 place와 transition이라는 두 종류의 마디(node)와 이 마디들을 연결하는 호(arc)로 이루어진 그래프로서, 각 place에서 transition을 거쳐서 이동하는 토큰(token)을 통해서 시스템의 동적특성을 나타낸다. Petri-net 모형은 여러 마디에 토큰이 존재함으로써, 비동기적(asynchronous)인 동시 작업(concurrent process)을 쉽게 모형화할 수 있는 장점이 있다. 또한 일단 모형화된 Petri-net으로부터 구한 reachability graph를 통해서 boundedness, liveness, reversibility등의 시스템 특징(property)을 검증(verification)하는 방법을 제공한다. 
이 방법의 단점으로 지적되는 것은 1) 명확한 통제 이론이 존재하지 않으며,  시스템과 통제규칙이 수작업으로 하나의 Petri-net에 모형화되어야 하는 것으로서, 큰 시스템의 설계나 변경시 어려움이 따른다; 2) 시스템 특징의 검증을 위한 절차에서 reachability graph의 복잡도(마디의 수)가 Petri-net의 복잡도에 대해 지수적으로 증가한다는 점이다.
Petri-net 방법은 목적에 따라 많은 변형이 존재한다. 시스템 행동의 시간적인 제약을 고려하기 위한 timed Petri-net, 시스템의 성능 평가를 위한 stochastic Petri-net등이 정의되었으며, 효율적인 모형화를 위해 여러종류의 토큰이 존재하는 colored Petri-net, 앞에서 지적한 첫번째 단점을 극복하기 위해 controlled Petri-net이 제안되었으나, 이론적인 제약으로 현실화하기에 부족한 점이 많다.
Petri-net 이론과 여러가지 수정된 Petri-net을 생산시스템의 통제에 적용한 많은 연구가 있다[2,15,36,40] . 대표적인 것으로, Zhou와 DiCesare는 생산시스템의 주요한 특징을 boundedness, liveness, reversibility로 인지하여, 이를 보장하는 시스템의 단계적 설계 방법을 제안했다[40]. N.Viswanadham 과 Y.Narahari는 FMC(Flexible Manufacturing System)를 모형화하는데 colored Petri-net을 이용하였다[34]. Hung 과 Chang는 CNC 선반, CNC 밀링 머쉰, 로봇, 팔렛 저장소로 구성된 FMC를 모형화 및 시뮬레이션하기 위해서 colored timed Petri-net을 사용하였다[15]. 이 연구에서는 트랜지션을 immediate transition과 시간이 소요되는 timed transition 으로 구분하였다. 김기범은 페트리네트를 이용한 유연생산시스템 설계에 관한 연구에서 colored timed 페트리네트를 사용하여 ASRI FMS의 설계를 위한 시뮬레이션 모형을 개발하였다[2].


2.2 Supervisory Control 이론 

Supervisory Control 이론은 오토마타로 모형화된 이산 현상 시스템의 통제에 관한 이론으로서, 형식언어로 명시된 통제목적에 대한 통제가능성(controllability)의 개념과, 시스템이 통제목적을 달성하도록 하는 supervisor를 구성하는 방법을 제공한다. 통제 대상 시스템의 행동은 오토마타가 발생시키는 사건(event)의 언어(language)로 모형화된다. 즉 모든 사건은 시스템내에서 자발적(spontaneous)으로 일어나는 사건으로 간주된다. 사건(event)은 제어가능(controllable)과 제어불가능(uncontrollable) 사건으로 구분되며, 제어가능 사건은 발생방지(disablement) 구조가 존재하여, 그 사건의 발생을 방지할 수 있다. Supervisor는 시스템의 행동에 근거하여 어떤 사건들의 발생을 방지함으로써, 시스템이 목적된 행동만을 나타내도록 한다[32,33].
이 방법은 시스템의 통제가능성 개념을 포함하는 명료한 통제이론으로서, 시스템의 모형과 명시된 통제목적에 대해서 컨트롤러를 구성하는 알고리즘을 제공한다. 이 방법의 단점은 여러 프로세스의 상호작용의 모형이 어렵고, 통제수단이 사건의 발생방지만으로 제한되어, 비효율적인 통제가 이루어질 수 있다. 그러나 Supervisory control 이론은 명료한 통제 이론과 컨트롤러의 구성이론을 가진, 알려진 유일한 방법이다. 
Supervisory Control 이론은 부분적인 사건의 관측상황(partial observation;[9])하, modular([37]), 분산(decentralized[17]), 계층적(hierarchical) supervisor[39]등 여러 형태의 supervisor 구성이론으로 확장되어 왔다. 또한 이 접근법하에서, 이산 현상 시스템의 관측가능성(observability;[29]), 안정성(stablity;[30])등의 통제-이론적 개념과 시스템 안정성을 제공하는 supervisor에 대한 연구가 행해졌다([30]).
Supervisory control 이론을 생산시스템의 통제문제에 적용한 연구는 미비한 실정인데, 이는 Supervisory control 이론이 비교적 새로운 이론으로 생산시스템 연구자들에게 널리 알려지지 않은 이유이다. Gershwin은 시스템 운영 최적화를 위한 상위단계의 통제규칙을 지원하는 하위의 통제수단으로서 Supervisory control 이론의 가능성을 제시하였다[12]. Tadmor와 Maimon은 FMS의 하위단계 통제에 대한 연구로서, 생산시스템의 운영상 제약을 명시하는 방법으로서 temporal logic을 추가하였다[19]. 김상균은 Supervisory control 이론을 이용한 FMC 컨트롤러 소프트웨어를 구현방안을 제시했으며[3], 셀-컨트롤러의 기능을 운영통제와 정보통제로 구분하고, 운영통제를 담당하는 supervisor를 포함하는 control specification 이라는 구조를 제안했다. 또 운영통제를 행하는 supervisor의 구성에 각 부품의 흐름(routing) 정보를 고려하는 방안을 제시했다. Brandin과 Wonham은 TDES(Timed Discrete Event System) 모형을 정의하고 logical constraint와 temporal constraint를 modular하게 명시하여 FMC-supervisor를 구성하는 방법론을 제안했다[8]. 그러나 이 방법은 시간을 'tick'이라는 사건으로 모형화하여, 큰 시스템이나 복잡한 temporal constraint에 대해서는 사용이 어렵다. 


2.3 동시성 이론 

동시성 이론은 프로세스를 효율적으로 모형화하고, 여러 프로세스간의 동시화에 관한 특징들을 검증하는 방법론으로서, Hoare의 Communicating Sequential Process(CSP;[14])와 Milner의 Calculus of Communicating Systems(CCS;[24]), linear-time, branching-time and real-time temporal logic등이 있다. 이는 주로 분산(distributed) 소프트웨어의 기술과 검증에 주로 사용되어 왔지만, 이산현상 시스템의 모형화와 통제 소프트웨어의 분석, 검증에 사용될 수 있다. 이 방법론을 통제이론에 적용한 연구로는 Manna & Pnueli의 fair-transition system/ temporal logic 방법론([20,21,22]), Ostroff의 ETM/Real-time temporal logic([26,27]), Lin의 Temporal Logic에 기초한 이산현상 통제시스템의 분석과 구성이론에 대한 연구([17])가 있다. 이 접근법에는 명확한 컨트롤러의 구성이론은 존재하지 않으며, 모형화된 컨트롤러에 대한 검증방법을 제공한다.


2.4 이산현상시스템 접근법의 비교 

이상의 여러가지 형식 접근법의 장단점을 비롯한 특징들을 정리하면 다음 표와 같다.



III FMS의 통제문제  

1. FMS의 통제문제 

 1.1 셀의 통제문제

FMS는 실제로 여러가지 가공을 행하는 셀과 셀간을 연결하는 자동화된 물류시스템으로 이루어진다. FMS의 통제는 주로 각 셀의 운영을 통제하는 셀(cell)-컨트롤러 컴퓨터와 시스템 전체를 통제하는 작업장(shop floor)-컨트롤러 컴퓨터의 네트워크에 의해서 이루어 진다.
FMS의 셀에 대한 정의는 여러가지가 있지만, 셀은 대체로 부품의  loading/unloading port와 하나 또는 여러대의 CNC-기계가 로봇, 컨베이어등의 셀-내부의 자동적인 운반장치에 의해 연결된 구성(tightly coupled configuration)을 가진다. 각 CNC-기계와 자동 운반장치는 별도의 컨트롤러가 존재하며, 셀-컨트롤러는 이 장치-컨트롤러를 통해서 각 장치들을 구동하게 된다. 따라서 셀-컨트롤러 프로그램은 각 장치-컨트롤러의 기능에 종속(dependent)된다. 셀의 운영상의 제약은 주로 셀-버퍼와 같은 제한된 자원때문에 생긴다. 다음 [예제1]에 셀의 운영상의 제약에 대한 예가 나타나 있다.

[예제1] 다음 [그림1]과 같은 1대의 CNC-기계와 loading port, unloading port로 구성된 간단한 셀의 모형이 있다. Loading port가 비어있으면, 부품이 투입될 수 있고, 투입된 부품은 CNC-기계로 옮겨져서 가공이 시작되기 위해서는 부품의 part-프로그램이 다운로드되어야 하며, 적절한 공구가 장착되는 준비공정이 필요하고, 이 공정이 완료되면, 셀-컨트롤러 프로그램은 부품을 기계로 옮기고 가공을 시작하게 된다. CNC-기계에서 부품의 가공이 끝나면 자동적인 feeding mechanism에 의해서  unloading port로 옮겨지게 된다. 따라서 unloading port에 부품이 있을때 CNC-기계에서 가공이 행해지면 안된다는 제약이 존재한다.

1.2 부품의 흐름에 대한 통제 

FMS의 각 셀이 정상적으로 통제된다고 해서 FMS의 운영이 원활한 것은 아니다. FMS에서는 다양한 종류의 부품이 공정(routing)에 따라 여러셀을 거쳐서 가공이 되어야 한다. 한 셀에서 가공이 끝난 부품은 unloading port로 옮겨져서, 다음 가공을 위해 물류시스템에 의해 다른 셀로 이송되어야 한다. 즉 한 셀에서 부품의 loading 과 물류시스템의 운반, 다른 셀에서 부품의 unloading 은 동시화(synchronization)되어야 한다. 그러나 각 셀은 언제나 loading 가능상태가 아니며, 물류시스템도 언제나 가용상태가 아니므로, 동시화를 위해서 각 셀의 가공은 차단될 수 있다. 셀간의 동시화에 의한 차단현상은 무한대기, 데드락같은 심각한 이상상황으로 발전할 수 있다. 무한대기 상황은 셀이 어떤 사건이 일어날 때까지 무한정(indefinite) 차단되는 상황이며, 데드락 상황은 외부의 간섭없이는 차단현상이 영원히 지속되는 상태를 말한다. 다음 [예제2]에 셀간의 동시화에 의해 발생되는 차단현상, 무한대기, 데드락상황의 예가 나타나있다.
[예제2] 다음 [그림2]에 [예제1]과 같은 형태의 셀1과 두대의 기계로 구성된 셀2가 나타나있다. 셀2의 기계2와 기계3은 같은 가공을 행할 수 있으나, 기계2는 신뢰성이 낮은 기계로, 가공이 끝난 부품은 검사장치로 운반되어 '합격'이면 unloading port로 옮겨질 수 있고, '불합격'이면 다시 input port로 옮겨져 일정시간후 다시 기계2 또는 기계3에서 가공되어야 한다. 각 기계들은 가공이 끝나면, 자동적인 feeding mechanism에 의해 부품을 옮기게 된다. 즉 기계2는 검사장치로, 기계3은 unloading port로 부품이 옮겨지게 된다. 셀내부의 물류시스템은 로봇에 의해 행해지며, 로봇은 loading port에서 각 기계로, 검사장치에서 loading port, 또는 unloading port로 부품을 운반하며, 로봇에 의한 물류는 통제할 수 있다. 셀2는 버퍼의 제한과 기계에서 unloading 이 통제불가능하기 때문에 다음과 같은  제약이 존재한다. 
　기계2에서 부품이 가공중일때는 loading port에 부품이 있으면 안된다.
　검사장치에 부품이 있을때는 기계2에서 가공이 행해지면 안된다.
　Unloading port에 부품이 있을때는 기계3에서 가공이 행해지면 안된다.
　기계3에서 부품이 가공중일때는 검사장치에서 unloading port로 부품을 옮기면 안된다.

[그림2]에서와 같이 부품이 존재한다면, 셀2는 현재 부품의 투입이 가능하지 않다. 셀1의 unloading port에 있는 부품이 셀2로 이송되어야 한다면, 셀1은 차단된 상태이다. 지금 기계3에서 가공중인 부품이 셀1으로 이송되어야 한다면, 이 두 셀에는 부품이 이송될 수 없으며, 데드락 상태가 된다. 셀2에서 부품이 투입가능하기 위해서는 기계3에서 가공이 끝난 부품이 unloading 되고, 현재 loading port의 부품이 기계3으로 옮겨진 시점이다. 그러나 셀1으로 부품의 이송이 일어날 수 없으므로 두 셀간에는 부품의 이송이 일어날 수 없다.
만약 기계3이 고장중인 상태라면, 셀2에서 부품이 투입가능한 시점은 결정될 수 없다. 부품이 투입가능하기 위해서는 기계2에서 가공이 끝난 부품이 '합격' 판정을 받아야 하는데, '합격'/'불합격' 판정은 통제될 수 없으므로 셀1은 무한대기 상태가 된다.


FMS의 운영에서 차단현상은 피할 수 없으나, 차단현상이 오래 지속되는 것은 방지되어야 한다. AS/RS 같은 시스템 버퍼는 차단현상의 해소에 효과적으로 이용될 수 있다. 예를 들어, 차단상태인 셀의 output port의 부품을 임시로 AS/RS로 옮겨주면, 셀의 차단상태는 해소된다.  그러나 시스템 버퍼의 용량이 제한되어 있으므로 이런 방법이 꼭 가능한 것은 아니다. 따라서 셀의 차단현상이 일정시간내에 해결된다면, 시스템 버퍼로 부품을 옮겨주는 과정은 시스템 운영측면에서 오히려 역효과를 나타낼 수 있다. 

FMS의 셀에서 가공이 끝나 unloading port로 옮겨진 부품이 다음 공정이 행해질 셀로 이송되지 못하면, 셀은 결국 차단상태가 된다. FMS의 원활한 운영을 위해서는 셀에서 부품의 unloading 요구가 있을때, 이를 어디로 이송해야할지가 결정되어야 하며, 정해진(definite) 시간내에 결정된 목표장소로 이송되어야 한다. 

2. FMS 통제문제의 모형화 

2.1 Supervisory Control 이론 

통제이론에서는 시스템을 통제대상이 되는 plant와 목적된 시스템의 행동을 얻게하는 컨트롤러로 구성되어 있다고 본다. 일반적으로 통제되지 않은 시스템의 행동(open-loop behavior)은 바람직스럽지 못한 경우를 포함하며, 이는 컨트롤러의 통제에 의해서 제거되어야 한다. Supervisory Control 이론은 형식언어 이론에 바탕을 둔 이산현상 시스템의 통제에 관한 이론으로서, 명시된 통제목적에 대한 통제가능성의 개념과 supervisor를 구성하는 알고리즘을 제공한다.
Supervisory Control 이론에서 통제의 대상인 plant는 사건을 발생시키는 오토마타(finite automata)  G = ( Q,  ,  , q0 ) 로 모형화된다. 여기서 Q 는 상태의 집합이며,   는 발생가능한 사건의 집합,   :   × Q → Q 는 상태전이 함수, q0 는 초기상태이다. 어떤 사건은 발생을 방지하는 구조가 존재하여 언제나 발생이 금지될 수 있다. 이에 따라 사건의 집합  는 발생방지가 가능한 사건의 집합  c 와 불가능한 사건의 집합  u 로 나눌수 있다. Plant의 행동(open-loop behavior)은 G 에서 정의되는 일련의 사건들의 집합인 형식언어 L(G) 로 나타낼 수 있다.
시스템의 통제는 다음과 같이 정의될 수 있다. 통제입력(control input)은  ⊂ c 로 정의되며, plant는 다음과 같이 수정된 상태전이를 하는  로 모형화된다.

Supervisor는 다음과 같은 함수 h : L(G) → 2  로 정의된다. 즉 시스템의 행동에 따라 적절하게 어떤 사건의 발생을 방지하여 통제목적을 만족하게 하는 일종의 함수이다. Supervisor 통제하에 발생되는 사건의 언어를 LC(G) 라고 할때, Supervisor는 (S, ) 와 같은 유한 형태(finite representation)로 표현될 수 있다. 여기서 S = ( X,  ,  ,, x0 ) 는 LC(G) 에 대한 오토마타이며,   : X → 2  는 "For s LC(G),  ( (s, x0)) = h(s)" 로서 정의되는 함수이다. 즉 supervisor 는 plant에서 발생한 사건을 관측하여 상태를 전이하고, 전이된 상태에서 정의된   값을 통제입력으로 plant 로 보낸다.
시스템의 목적행동은 시스템의 통제되지 않은 행동 L(G)의 부분집합으로 나타내어진다. 명시된 시스템의 목적행동 K   L(G) 에 대해서 통제가능성은 다음과 같이 정의된다. 

[정의1]  이면, K 는 통제가능이다. 여기서  는 K 의 속하는 사건열(string)의 모든 prefix.

명시된 목적행동은 통제가능하지 않을 수 있으며, 통제가능한 최적의 근사행동(supremal controllable sublanguage)가 구해질 수 있으며,  통제가능한 목적행동  에 대해서, 이를 만족하게하는 supervisor가 구성될 수 있다. 이는 참고문헌[33]의 [정리3.1]과 참고문헌 [32]의 [정리5.1]과 그 증명에 나타나 있다. 

[예제3] 예제1의 loading port, unloading port, CNC 기계로 구성된 셀을 고려해보자. Unloading port에 부품이 있을때, 부품이 가공되면 안된다는 제약을 만족하기 위한 supervisor는 다음과 같은 절차에 의해서 구성될 수 있다.  
⑴ 모형화

⑵ Supervisor 구성
제거되어야 할 셀의 행동은 unloading port에 부품이 있을때, 부품의 가공이 시작되는 경우로 앞의 [그림3]에서 상태7 에 이르는 일련의 사건열이다. 즉 셀의 목적행동은 상태7 에 도달하지 않고 지속적인 운영이 계속되는 시스템의 행동이다. 이 목적행동은   가 통제가능 사건이므로 통제가능하며, supervisor (S ,  ) 는 [그림 4]에 나타난 바와 같이 상태 6에서   사건을 금지하는 행동을 한다.


2.2 Supervisory Control 이론 적용의 한계 

[예제3]에서 볼 수 있듯이 셀의 운영상의 제약에 대한 통제논리의 구성에는  Supervisory control 이론이 잘 적용될 수 있다. 그러면, 셀간의 부품흐름에 대한 동시화 문제를 고려해 보자. Superviosry control 접근법하에서 프로세스간의 동시화를 모형화하기 위해서는 다음의 정의가 필요하다. 

[정의2] G1 = ( Q1,  1,  1, q10 )  과 G2 = ( Q2,  2,  2, q20 ) 는 오토마타로 모형화된 두 프로세스일때, 동시화되는 사건의 집합을  라고 하면, G1 과 G2 의 composition, G = G1  G2 는 다음과 같이 정의되는 오토마타이다.

G = ( Q,  ,  , q0 ) ,여기서 Q = Q1×Q2 ,  , q0 = (q10 , q20 ) 
    

정의에서 볼 수 있듯이 composition 된 오토마타의 복잡도는 각 구성(component) 오토마타의 복잡도의 곱이 된다. 즉 composition 된 오토마타 모형의 복잡도는 프로세스수에 대해 지수적으로 증가하게 된다. 다음 [그림 3]에 두 프로세스간의 사건의 동시화의 모형화를 위한 composition의 예가 나타나 있다. 그림에서 G의 상태가 (2,C) 인 경우, G2가 차단상태이며, G의 상태가 (1,A) 또는 (1,B)인 경우, G1이 차단상태이다. 이 상태가 통제되지 않으면,    사건이 무한히 계속될 수 있으므로, G1 은 무한대기 상태가 된다. 따라서 상태 (1,A)에서   사건이 금지되어야 무한대기현상을 피할 수 있다.


Supervisory control 이론의 부품흐름의 동시화 문제에 대한 적용에는 다음과 같은 두가지 제약이 존재한다. 
⑴ 모형의 해석에 관한 제약
Supervisory control 이론은 "plant의 사건들은 supervisor에 의해 발생이 금지되지 않으면, 자발적으로(spontaneously) 발생한다"는 가정에 바탕을 두고 있다. 다음 [그림 6]에는 [예제2]의 셀의 모형이 나타나 있다. 각 셀 모형에서  ,   사건은 부품의 투입(loading), unloading을 나타내는 사건으로, 셀의 내부에서 자발적으로 발생하는 사건이 아니다. 실제로 통제시스템은 셀1에서   사건이 발생가능하고, 셀2에서   사건이 발생가능하다면,  통제시스템은 각   사건과   사건을 발생시킴으로써 부품의 이송이 일어나도록 한다. 이 경우의 통제행동은 사건의 발생방지가 아니라 특정한 사건의 발생이어야 한다. 

⑵ 모형의 표현력(representation power)에 관한 제약 
  오토마타를 이용한 셀의 모형은 현재 셀내에 어떤 부품이 있는가의 정보를 표현하지 못한다. 따라서 각 셀 모형에 정의된 어떤   사건과   사건이 동시화되어야 하는지 표현될 수 없다. 실제로 FMS에서 각 부품의 위치, 공정상황의 감시는 작업장통제 기능의 일부분인 물류추적기능에 의해 수행되며([컴퓨터를 이용한 생산정보시스템]), 이는 여러가지 인식기술과 정보기술에 의해 가능하다. 이 주제는 본 논문의 대상밖이며, 여기서는  ,   사건이 가능한 시점에는 각 부품에 대한 정보를 얻을 수 있다고 가정한다. 따라서 어떤  ,   사건이 가능해진 시점에 동시화가 이루어질 셀이 결정될 수 있으며, 셀간에 부품이 이송된 후에는 또 다른 셀간의 동시화문제가 발생한다. 즉, 통제의 대상인 plant의 구조가 지속적으로 변하며, 이에 따라 supervisor가 재구성되어야 한다. 앞에서 언급했듯이 composition이 될 때마다, 모형의 복잡도는 지수적으로 증가하게 되며, 따라서 셀간의 동시화의 통제를 단순한 Supervisory control 문제로 해결하는 것은 여러셀이 관여하는 경우 가능하지 않다(intractable).


2.3 부품의 흐름 통제문제의 모형화 

앞절에서의 Supervisory control 이론의 제약을 고려하면, 부품의 흐름 통제문제를 모형화하는데는, 다음 사항이 고려되어야 한다.
⑴ 사건의 발생을 반영할 수 있는 모형화방법이 제공되어야 한다.
⑵ 대상 셀을 composition을 하지않고 통제결정을 내릴수 있도록 해야 한다.

Supervisor가 plant의 사건의 발생되도록 통제하는 것은, 다음과 같이 수정된 composition으로 모형화 될 수 있다([13]). 

[정의4] (Priority Synchronization) 
G1 = ( Q1,  ,  1, q10 ) 과 G2 = ( Q2,  ,  2, q20 ) 는 오토마타로 모형화된 두 프로세스일때,  1 은 G1의 우선순위 사건의 집합,  2 은 G2 의 우선순위 사건의 집합이라고 하면, G1 과 G2 의 수정된 composition, G = G1  G2 는 다음과 같이 정의되는 오토마타이다.

G = ( Q,  ,  , q0 ) ,여기서 Q = Q1×Q2 , q0 = (q10 , q20 ) ,   는 다음과 같이 정의된다.

  If  are defined,
             

    If 
            
    If 
            
즉, 각 프로세스는 다른 프로세스의 운선순위 사건을 독자적으로 실행할 수 없다. ={ ,  } 일때, supervisor S = ( X,  ,  , x0 ) 의 우선순위 사건의 집합을  d, 셀 모형 G = ( Q,  ,  , q0 ) 의 우선순위 사건의 집합을  u 라고 하면,  ,   사건은 supervisor에 의해서 일어나는 사건으로 모형화될 수 있다. 그러나 일반적으로 사건의 발생구조에 대해 통제목적을 명시하고, 이를 supervisor로 구성하는 이론은 존재하지 않는다.


부품의 흐름에 대한 제한된 시간동안의 차단현상을 보장하기 위해서는, 셀에서 부품의 unloading 요구가 관측되면, 부품이 투입될 셀이 제한된 시간내에 투입가능상태에 도달하도록 통제되어야 한다. 만약 통제가 불가능하다면 이 부품을 시스템버퍼로 옮겨주는 것이 바람직하다. FMS에서 부품의 흐름에 대한 통제문제는 셀에서 unloading 요구를 관측하고, 부품이 투입될 셀을 제한된 시간내에 부품이 투입가능하도록 통제하고, 부품이 투입가능해지면 이를 이송하는 명령을 내리는 것이다. 

셀이 제한된 시간내에 부품의 투입가능상태가 되도록 하는 문제는 다음과 같이 정의될 수 있다. 
 
[정의3] 셀 모형 G = ( Q,  ,  , q0 ) 에서 Qi 는   사건이 정의된 상태들로 구성된 Q 의 부분집합이다. 어떤 supervisor S 가 존재하여, 이 supervisor의 통제하에서 G 가 제한된 시간내에 Qi 상태에 도달한다면, Q 의 상태 q 는  '부품투입 도달가능' 이라고 한다.  는 '부품투입 도달가능'인 모든 상태 q 의 집합으로 '부품투입 도달가능 상태집합'라고 한다.

제한된 시간내에 부품이 투입가능 상태에 도달하기 위해서는,   사건을 포함하지 않는 일련의 사건의 환과 긴 시간이 소요되는 일련의 사건열이  supervisor에 의해 제거되어야 한다. 일련의 사건열을 제거하는 supervisor의 구성방법은 참고문헌 [39]에 나타나 있으며, 일련의 사건의 환을 제거하여 제한된 사건전이후에 어떤 상태로 도달하게 하는 supervisor의 구성방법은 참고문헌 [30]에 제시되어있다. 이 두 supervisor의 통제하에서, 에 포함된 현재상태에서는 제한된 시간내에 부품이 투입가능 상태에 도달할 수 있다. 

이상의 사항을 고려하면, FMS에서 부품의 흐름에 대한 통제문제를 해결하기 위해서는 각 셀의 운영을 통제하는 셀-컨트롤러와, 각 셀에서 발생하는 사건을 관측하고, 통제결정을 내리고, 부품의 unloading, 투입을 명령하는 상위의 작업장-컨트롤러의 계층적 통제시스템이 구현되어 야한다. 계층적 통제시스템의 구현을 위해서는 다음 사항이 반영되어야 한다.
⑴ 부품의 unloading 요구가 발생할 때마다 supervisor를 구성하는것은 통제시스템의 효율적인 측면에서 바람직하지 못하므로, 시스템 작동중(run-time)의 계산량을 줄일 수 있는 통제시스템의 구조가 요구된다.
⑵ FMS는 다수의 셀이 존재하여, 여러 셀에서 부품의 이송요구가 있으므로, 상충(conflict)이 존재할 수 있다. 예를 들어 동시에 셀1, 셀2, 셀3에서 셀4로 부품의 이송요구가 있을 수 있다. 이 경우 앞에서 정의된 문제를 해결하는 것만으로 부족하며, 상충을 표현할 수 있는 구조가 필요하다. 
 IV  통제시스템의 설계

본 논문에서 제시하고자 하는 FMS의 통제시스템 구조는 작업장 컨트롤러와 각 셀에 위치한 셀-컨트롤러로 이루어진 계층적인 구조이다. 이 계층구조의 계층은 다음과 같이 그 기능과 통제결정의 범위에 의해서 구분된다. 

⑴ 각 셀의 운영통제는 각 셀-컨트롤러에 의해서 행해진다.
⑵ 셀간의 부품흐름에 대한 통제는 작업장-컨트롤러에 의해서 결정되며, 이는 다시 셀-컨트롤러에 의해 해석되어 실제 셀을 통제하게 된다.

부품흐름을 통제하는 셀-컨트롤러와 작업장-컨트롤러를 구성하기 위해서는 먼저 각 셀의 안정적인 운영이 보장되어야 한다. 즉 셀의 운영통제-supervisor의 구성이 우선되어야 하며, 셀-supervisor 의 상태 구조(state structure)는 셀의 정상적인 행동을 반영하는 것으로서, 부품흐름을 통제하는 계층적 통제시스템 구현의 출발점이다.
작업장 컨트롤러는 각 셀에서 발생하는 사건을 추상화(abstraction)하여 부품의 흐름에 관련된 정보를 얻어서 통제 결정을 내려야 한다. 통제결정은 셀이 부품의 투입가능상태에 도달하게하는 통제행동과 투입가능상태에 도달하면, 부품의 이송사건을 발생하는 것이다. 이 상위의 통제결정은 셀-컨트롤러에 전달되어 실제 셀에 적용되게 된다. 
통제시스템의 구조는 다음 [그림 7]에 나타나 있다. 그림에서 정보채널(Information Channel)은 각 셀에서 발생하는 사건을 추상화하여 부품흐름에 관련된 정보를 제공하는 역할을 하며, 작업장 컨트롤러에서 결정된 상위의 통제 결정은 명령채널(Command Channel)을 통해서 셀-컨트롤러로 전달된다. 셀-컨트롤러는 셀의 운영을 통제하는 셀-supervisor와 상위의 통제결정을 해석하여 셀에 통제작용을 하는 명령해석기로 구성된다.


제안된 구조가 효과적인 통제시스템으로 구현되기 위해서는, FMS의 통제 컴퓨터시스템의 구조(architecture)와 계산복잡도에 대한 고려가 필요하다. 일반적으로 계층시스템에서는 상위단계에 과부하가 걸리기 쉬우므로, 계산기능은 적절히 분산되어야 한다.  그리고 이산현상 시스템에 대한 통제논리의 구성은 복잡한 문제이므로, 실시간에 계산하는 것은 바람직하지 않으며, 정적인 구성방법이 제공되어야 한다.
부품의 흐름에 대한 통제결정은, 각 셀을 제한된 시간내에 부품투입 가능상태에 도달하게 하는 supervisor에 의해 실현되며, 이 supervisor의 구성은, 각 셀단위에서 n개의 요구에 대해, 각각 정적으로 계산된다. 이는 그림에서 셀-컨트롤러의 명령해석기를 구성하며, 작업장-컨트롤러는 각 셀의 요구에 대해서 supervisor가 작용하도록 명령을 내려준다. 

본 장에서는 부품흐름을 통제하는 계층적 통제시스템의 설계에서 고려되어야 하는 문제를 다음과 같이 나누어서 설명한다. 
1절에서는 셀의 운영 통제와 셀-모형의 가정에 대해서 언급한다. 
2절에서는 부품의 흐름에 대한 동시화문제의 정적인 해법,
3절에서는 작업장계층의 통제결정을 위한 모형과 이를 지원하는 정보채널의 설계,
4절에서는 작업장 컨트롤러의 구조와 명령채널,
5절에서는 계층적 통제시스템 설계의 예를 제시한다.
1. 셀의 운영 통제 

III장에서 살펴보았듯이, 셀의 운영통제 문제는 Supervisory control 이론이 잘 적용될 수 있다. 즉 셀의 운영통제 논리의 구성은, 오토마타 G 로 셀의 모형화, 통제목적의 명시, supervisor S 의 구성의 단계로 행해질 수 있다. 부품의 흐름에 대한 통제를 위한 계층적 통제시스템의 구현을 위해서는, 셀의 모형화에서 다음의 사항이 고려되어야 한다.
각 셀에서 운영에서 고려되어야 하는 사건은 부품의 기계간 또는 버퍼로의 이동, 공구의 할당, 검사의 결과등 여러가지가 있지만, 부품의 흐름의 동시화를 통제하기 위해서는 부품의 투입(loading), 부품의 unloading 사건이 모형화되어야 한다. Supervisory control 이론에서 각 사건의 시간에 관한 정보는 모형화될 수 없으며, 대체로 각 사건은 짧은 전이시간을 가질수 있도록 모형화하는 것이 바람직하다. 대체로 셀에서 부품의 이송에 걸리는 시간에 비해서 가공시간이 매우 크다. 따라서 오래 지속되는 사건들은 시작사건과 완료사건으로 모형화하는 것이 바람직하다. 예를 들어, 부품의 가공은 부품의 가공시작 사건, 부품의 가공완료 사건으로, 기계의 고장및 수리는 고장의 발생, 수리완료사건으로 모형화해야 한다.
일반적은 셀에서는 unloading port로 부품이 옮겨진후에, 다시 시스템에 투입되는 경우는 없다. 따라서 unloading 요구가 발생하면, 이 요구가 취소되지 않으며, unloading이 되지 않으면 결국 차단현상이 발생된다. 또 셀에서 부품의 투입(loading)이 가능한 경우, 부품의 투입 가능상태를 유지할 수 있어야 한다. 즉 통제불가능한 사건에 의해서 부품투입 가능상태가 변화되지 않는다. 이것은 물류시스템(AGV)이 언제나 가용하지 않기때문에, 실제 AGV에 의해 부품이 이송되어 투입될 때, 만약 셀이 투입불가능 상태로 전이했다면, 시스템에서 셀의 loading port에서 상충(conflict)이 일어나기때문이다. 
III장2절에서 언급했듯이, 셀의 모형에는 부품의 정보가 포함되지 못한다. 이는 보통 통신망과 분산된 공정 데이타베이스로 구현되는 물류추적기능에 의해 보완될 수 있다. 본 논문에서는 셀에서 부품이 unloading 되는 시점에 이 부품의 종류를 알 수 있고, 작업장 통제는 이 부품의 종류에 의해서 다음 공정이 행해질 셀을 결정할 수 있다고 가정한다.

 2. 부품흐름의 동시화 문제

실제 FMS에서는 한 셀에 대해서 여러 셀로부터 부품의 투입요구가 있을 수 있다.따라서 III장의 2.3절에서 정의된 부품의 투입에 관한 동시화문제는 제한된 시간내에 n개의 부품의 투입가능한가를 결정하는 문제로 확장되어야 한다. 이 문제는 결국 supervisor를 구성할 수 있는가의 문제이며, 앞에서 지적되었듯이 supervisor의 구성은 정적으로 계산되어야 한다.
부품의 투입가능성이란 셀의 현재 상태 q 를 초기상태로 하는 셀 모형         G = ( Q,  ,  , q0 ) 를 제한된 시간내에 n개의 부품이 투입가능한 상태에 도달하게 하는 supervisor가 구성가능한가를 결정하는 것이다. 그런데 부품의 투입요구는 다른 셀에서 발생하는 것으로, 이 요구가 발생하는 시점에 셀의 현재 상태는 사전에 결정될 수 없다. 따라서 단순한 supervisory control 이론을 적용하여, 정적으로 구현하고자 하면, 각 셀에서  Q   (가능한 최대 부품투입요구의 수+1) 만큼의 supervisor가 미리 계산되어야 한다. 따라서 정적인 설계요구에 부합되는 supervisor 구조와 이의 구성방법이 요구된다.
Supervisor가 정적으로 설계되기 위해서는, supervisor의 상태구조는 plant의 상태구조와 일치하여야 하며, 통제는 현재까지의 발생한 사건열과 무관하게, 셀 모형의 현재 상태에서 정의된 피드백 사상   에 의해서만 통제되어야 한다. 이런 형태의 supervisor를 정적-피드백(static-feedback), 또는 상태-피드백(state feedback) supervisor라고 한다([30]).
정적-피드백 형태의 supervisor의 통제목적은 상태에 대해서만 명시될 수 있다. 즉, 시스템이 어떤 잘못된(illegal) 상태를 거치지 않도록 통제하거나([39]), 제한된 수의 상태전이(bounded transition)를 거쳐서 어떤 목적상태에 도달하도록 통제하는 정적-피드백 supervisor가 구성될 수 있다([30]).
다음 2.1절에서는 n개의 부품투입요구에 대한 정적-피드백 supervisor의 구성을 위한 셀-모형의 정의, 2.2절에서는 정적-피드백 사상   를 계산하는 알고리듬에 대해서 설명한다.


2.1 모형의 정의 

부품흐름의 동시화에 대한 통제는 셀의 안정적인 운영에 대한 통제가 이루어진 다음 행해져야 한다. 따라서 부품의 흐름에 대한 동시화문제는 셀의 정상적인 운영을 나타내는 셀의 운영통제-supervisor (S,  ) 의 상태구조 S 에 대해서 결정된다. 정적-피드백 supervisor가 구성되기 위해서는 목적상태가 잘 정의되어야 한다. 이를 위해서는, S의 상태구조가 수정되어야 한다.
우리가 해결해야 하는 문제는 셀이 제한된 시간내에   사건이 정의된 n개의 상태에 차례로 도달하도록 하는 통제가 가능한 초기상태의 집합과 정적-피드백 사상을 구하는 것이다. 그런데 S 에서는 실제로 발생가능한   사건보다,   사건이 정의된 상태의 수가 많다. 따라서, 발생가능한 하나의   사건에 대해서, 처음으로 발생가능이 되는 시점을 상태구조와 각 상태에서 정의된 함수값으로 표시하고, n개의 표시된 상태에 차례로 도달가능한 초기상태의 집합과 정적-피드백을 계산하여야 한다. 다음 [그림8]의 (a)에는 [예제1]의 셀모형에 대한 S 구조, (b)에는 수정된 S 구조가 나타나있다. [그림8] (b),  n개의 부품이 투입가능한 셀의 행동을 제한된 시간내에   가 정의된 상태를 n번 방문하는 사건열로 표현할 수 있다.

셀 모형에서   사건이 가능해진 시점을 상태의 정보로 표현하기 위해서는, 셀-모형의 상태구조가 다소 수정되어야 하며, 각 상태에 특별한 값을 대응시키기 위해서는 모형이 확장되어야 한다. Moore machine 은 이런 요구에 가장 적합한 모형이며, 이는 다음과 같이 정의된다.

[정의] Moore machine M 은 다음과 같은 6-tuple로 표현된다.
M = ( Q ,   ,   , q0 , T,   ) , 여기서 ( Q ,   ,   , q0 ) 오토마타이며, T 는 출력기호의 집합,   출력함수로 각 상태에 출력기호를 대응시킨다.

  사건이 가능해진 시점을 상태의 정보로 표현하기 위한 Moore Machine M =  ( Q ,   ,   , q0 , T,   ) 은 다음의 절차에 의해서 구해질 수 있다. 여기서 T = {  ,   }, 여기서  은   사건이 가능해짐을 나타내며,  은   사건의 발생가능성에 변화가 없다는 것을 나타낸다.  (q) =   인 상태 q 가   사건이 가능해진 상태임을 나타낸다. 

S는 독립적으로 작동하는 것이 아니라, 실제 셀에서 일어난 사건에 따라 상태를 전이하며, 각 상태에서 정의된   사상에 의해서 셀을 통제하게 된다. 따라서 S의 수정은 셀의 운영통제의 논리를 보존해야 한다. 앞에서 제시된 알고리듬은 단계 4)에서 상태의 추가에 행해진다.  추가된 상태 q'에서 정의된 사건은 q와 같다. 그리고 s1, s2 는 , 을 만족하는 두 사건열이라할 때, h(s1) = h(s2) =  (q)이다. 따라서 운영통제의 논리를 보존하기 위해서는 알고리듬의 단계 4)에  (q') =  (q) 과정이 추가되면 된다. 




2.2 부품의 흐름에 대한 정적 피드백 supervisor의 구성 

제한된 시간내에 부품이 투입가능 상태에 도달하기 위해서는,   사건을 포함하지 않는 일련의 사건의 환과, 긴 시간이 소요되는 일련의 사건열이 정적-피드백 supervisor에 의해 제거되어야 한다. 여기서 구성하고자 하는 정적-피드백 supervisor의 통제대상인 셀 모형은 수정된 S 이며, 1개의 부품투입요구에 대한 정적-피드백 사상을  1 , 임의의 n개의 부품투입요구에 대한 정적-피드백 사상을  n 이라한다. 
셀에 투입가능한 부품수는 상한이 존재하며, 이를 N 이라고 하면, 우리의 목적은  1 , 2,... , N 을 구하는 것이다. n개의 부품이 제한된 시간내에 투입가능하기 위해서는 (n-1)개의 부품이 제한된 시간내에 투입가능해야 한다. 즉,  n 에 의해서 얻을 수 있는 셀의 행동을 Sn 이라고 하면, S1   S2   ...   SN 과 같은 관계가 성립한다. 따라서 계산과정은  1 , 2,...의 순서로 행해지는 것이 효율적이며, 더 이상의 정적-피드백이 존재하지 않은 n 값이 N 이 된다.
우선,  1 의 계산 알고리듬을 제시하고, 일반적인  n 의 계산 알고리듬으로 확장하기로 한다. 알고리듬의 기술에서 편의상, " (q,  )가 정의되어있다."는 것을      (q,  )! 로 나타내기로 한다. 긴 시간이 소요되는 일련의 사건열은, 앞절에서 설명한 셀-모형의 가정에 따라, 시작과 종료의 두 사건으로 이루어진다고 가정했다.
알고리듬의 입력은 목적상태의 집합으로 주어지며,  1 에 의해서 제한된 시간내에 도달해야하는 목적 상태의 집합 Q* 는   사건이 정의된 상태들의 집합으로 정의된다. 알고리듬의 결과는 정적-피드백 사상  1 과, 환의 제거단계에서 계산된 Xk 값으로, 이는 제한된 시간내에 부품투입요구를 만족하도록 통제가능한 초기상태들의 집합이다.  

 n 의 계산역시 제한된 시간내에 n개의   사건이 가능한 } 의 부분집합으로 주어지는 Q* 에 대해서 사건열의 제거와 환의 제거단계를 거쳐서 계산될 수 있다. 이를 위해서는  1 의 계산 알고리듬이 수정되어야 한다.  n 의 계산이  1 의 계산과 다른점은, 실제 통제의 목적은 제한된 시간내에 n개의   사건이 가능한 일련의 사건이라는 점이다. 이 사건열에 제거되어야 하는 사건열 의 완료사건인  j 가 포함될 수 있다. 따라서 이 경우는  i 사건이 일어나지 않도록  n 이 계산되어야 한다. 
가 통제불가능 사건열인 경우,  1 의 계산 알고리듬에 의해서  i 사건이 제거될 수 있다. 또 환의 제거는 이 문제점과는 상관이 없으므로, 통제가능 사건열의 제거단계에서,  j 가 실제 목적 사건열에 포함된 경우에 대해서, 추가로 다음과 같은 계산이 행해져야 한다.

 의 경우,  ,여기서 
 의 경우, , k=1 이라 두고,  일때까지 다음 과정을 반복한다.
1)  
2)  



 3. 정보채널의 설계와 작업장 모형

작업장 컨트롤러의 부품흐름에 대한 통제행동은, 셀에서 부품의 unloading 요구가 관측되면, 이 부품이 투입될 셀을 제한된 시간내에 부품의 투입가능상태에 도달하도록 셀의 행동을 제한하고, 부품의 투입가능상태에 도달하면 부품의 이송을 명령하는 것이다. 그러나 셀이 언제나 부품의 투입가능상태에 도달하도록 통제가 가능한 것은 아니므로, 각 셀이 부품의 투입요구를 만족할 수 있도록 통제될 수 있는가에 대한 정보가 필요하다. 따라서 작업장 컨트롤러의 통제행동을 위해서는, 셀에서 부품의 unloading 요구, 투입가능상태에 도달과 부품의 투입요구에 대한 통제가능성에 관한 정보가 관측되어야 한다.
셀에서 부품의 unloading 요구는    사건이 가능해진 시점에 행해진다. 또한 부품의 투입가능상태에 도달한 것은, 역시   사건이 가능해진 시점을 의미한다. 2.1절에서 보았듯이, 어떤 사건이 가능해진 시점을 나타내는데는 Moore machine이 사용될 수 있다. 예를 들어,   사건이 가능해진 상태 q 에서  (q)= o ,   사건이 가능해진 상태 q' 에서  (q)= i 가 되도록 T = { o ,  i ,  } 인  Moore machine M = ( Q,  ,  , q0, T,   ) 을 구성할 수 있다. 즉 이 Moore machine 은 셀의 사건발생에 따라 상태를 전이하면서, unloading 요구와 부품투입가능상태에 도달했다는 정보를 나타내 줄 수 있다.
부품의 투입요구에 대한 통제가능성은 현재 셀의 상태와 관련이 있다. 2.2절에서 구한 Rn 은 제한된 시간내에 n개의 부품투입요구를 만족할 수 있는 셀의 상태의 집합이다. 예를 들어 현재 2개의 부품의 투입요구에 대해 셀이 통제되고 있는데, 현재 셀의 상태가 R3 에 속한다면, 새로운 부품의 투입요구에 대해 통제될 수 있는 것을 나타낸다. 부품의 투입요구에 대한 통제가능성 정보는 현재 몇개의 부품투입요구에 대해 통제가능한가로 정의될 수 있으며, 이에 대한 정보채널은  Moore machine으로 모형화될 수 있다.
먼저 R0 = Q, Qi = Ri - Ri+1 (i   0)라고 하면, Qi 는 i 개의 부품투입요구에 대해서만 통제될 수 있는 상태의 집합이다.  이며, Q0, Q1, ...,QN 는 서로소인 집합들이다. 시스템의 행동의 모형인 형식언어 L(S) 에 대해서 다음과 같은 함수를 정의할 수 있다.


  는 통제가능성에 대한 상태의 변화가 있을때만, 어떤 상태집합으로 전이했는가를 표시해주는 함수이다. 이런 형태의 함수   는 Moore machine으로 구현될 수 있다([38]). 또   를 통해 상위에서 관측되는 추상화된 셀의 행동   (L(S)) 는 오토마타로 표현될 수 있다. 
서로 소(disjoint)인 상태의 집합간의 전이에 대해서   가 정의될 수 있다. 예를들어  일때,  이고  이면   가 정의될 수 없다. 일반적으로 셀에서 부품의 unloading이 정의된 상태의 집합, 투입이 가능한 상태의 집합과 통제가능성에 대한 집합 Qi 들에 대해서는 어떤 가정도 할 수 없다. 따라서 정보채널은 두개의 채널로 구현되어야 한다.
그러면 상위단계의 작업장 모형을 고려해 보자. 작업장 모형은 각 셀의 통제가능성을 결정할 수 있도록 구성되어야 한다. 예를 들어 현재 셀이  n 에 의해 통제되고 있는데, 직전에  가 관측되었으면, 이 셀은 부품의 투입요구에 대해 통제가 가능하며  n 이 관측되면, 부품의 투입요구를 만족할 수 없는 것이다. 따라서, 작업장 모형은   (L(S)) 에 근거하기 보다는, 바로 직전에 관측된 사건을 기억할 수 있는 구조이어야 한다. 또한, 셀이 현재 어떤 요구에 대해서 통제되고 있는지 결정되어야 한다. 따라서 상위의 작업장 모형 Shi 는 다음과 같이 정의된다. 부품의 투입가능성 정보는 현재 상태에서  가 정의되어 있는가로 표현된다. 즉, 부품이 투입요구에 대한 통제가 가능한 상태에서 가 정의된다.

Shi = ( Q, T,  , q00 ), 여기서 
, ,
  는 다음과 같이 정의된다. 
  ,
  
 

 4. 작업장 컨트롤러의 구조와 명령해석

작업장 컨트롤러의 계층은 부품의 투입요구를 받아서, 이 요구를 만족하도록 셀을 통제하는 명령을 내려주는 컨트롤러와 통제가능성에 관련된 셀들의 모형으로 구성된다. 컨트롤러의 구조는, 각 셀에 대해서 다음 [그림 9]와 같은 상태구조를 가진다. 그림에서  o 사건은 다른 셀로부터의 투입요구이며,  i 사건은 이 셀에서 부품의 투입이 가능해진 것을 나타낸다.   사건은 부품의 투입사건(투입요구셀의 unloading사건)이며, 이는 컨트롤러에 의해서 발생되는 사건이다. 각 상태에는 셀에 대한 통제명령이 정의된다. 즉, 작업장 컨트롤러의 통제행동은 부품의 이송의 명령과, 셀에 대한 통제명령이다.


작업장 컨트롤러의 통제명령은 { C0 ,C1 ,C2 , ... ,CN ,Cf } 로 정의될 수 있다. Cn 은 셀이 n 개의 부품투입 요구를 제한된 시간내에 만족하도록 통제하는 것을 의미하며, Cf 는   사건의 가능성을 유지하도록 통제하는 것을 의미한다. Cn 명령은 셀에서 정적-피드백 사상  n 으로 실현될 수 있다. 1절에서 언급했듯이 일반적인 셀에서는   사건의 가능성을 유지할 수 있는 구조가 존재하며, 이는 정적-피드백 사상  f 으로 구현이 가능하다. 따라서 명령해석기는 정적-피드백 사상의 집합 {   , 1 , 2 , ... , N , f } 으로 구성된다. 


 5. FMS 계층적 통제의 예

본 절에서는 [예제2]에 나타난 셀을 대상으로 통제시스템의 계층을 구하는 예를 보이고자 한다. [예제2] 셀의 제약을 만족하는 셀-운영통제 supervisor ( S ,   )는 다음 [그림 10]의 (a) 와 같이 구해졌다고 가정하자. 부품의 투입가능을 나타낸 Moore machine 은 (b)와 같이 구해질 수 있다. 



이 구조에 대해서 3절에서 설명한 정적-피드백 사상 (  1 , R1 ), (  2 , R2 ) 가 계산되었다.  2 의 계산에서 Q* 로 전이되는 사건이, 작업장-컨트롤러에 의해서 발생되는   사건밖에 없으므로, 알고리즘이 실행될 필요가 없으며, R2 = Q* 로 구해졌다. 
이 계산에 대해서, 통제가능성의 변화를 나타내는 Moore machine 과 부품의 투입가능과 unloading 요구를 나타내는 Moore machine이 구현될 수 있으며, 작업장 계층의 구조는 N=2 에 대해서 얻어질 수 있다.

 V 결론 및 추후연구과제

본 연구에서는 FMS의 운영통제문제를 셀의 운영통제 문제와 셀간의 부품의 흐름에 대한 이상상황을 통제하는 작업장 통제문제로 구분하여, FMS의 안정적인 운영을 위한 계층적 통제시스템의 논리구성 방법론을 제시하였다. 본 방법론은 셀-운영통제 논리구성, 부품의 흐름에 대한 동시화 통제논리의 구성, 정보채널과 명령채널의 구현의 단계로 구성된다. 이 계층적 통제 방법론은 다음과 같은 특징을 가진다.

⑴ FMS의 이산현상시스템적 특징을 고려한 방법론을 제공한다.
⑵ FMS 전체를 대상으로 하는 계층적 방법론을 제공한다.
⑶ 통제시스템 논리의 자동적인 생성방법을 제공한다.

본 방법론의 특징은 계층구조로 인해서 생기는 제한된 사건관측에 대응하기 위하여, 정적인 구성방법론을 제안하였다. 정적인 구성방법론은 수행시간의 계산비용(overhead)을 덜어주며, 소프트웨어로 구현하기쉬우므로, 효과적인 통제시스템의 논리를 제공할 수 있다.

그러나 본 논문에서 제시된 방법론은, 모형화 기법의 제한으로 시스템버퍼의 상태를 모형화하지 못함으로써, 시스템 버퍼가 가용하지 않을 경우 부품의 흐름통제의 안정성에 문제가 발생할 수 있다. 시스템의 안정성이 보장되기 위해서는, 추후에 시스템버퍼의 안정적인 사용에 관한 연구가 행해져야 할 것이다.

</tdmsfiletext>
