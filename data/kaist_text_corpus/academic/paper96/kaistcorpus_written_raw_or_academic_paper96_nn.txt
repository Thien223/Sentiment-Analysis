<language> Korean </language>
<textcode> KSC-5601-1988 </textcode>
<process> raw </process>
<version> 2001(or)</version>
<filename> kaistcorpus_written_raw_or_academic_paper96_nn.txt </filename>
<title> 선형계획 프로그램에서의 계산오차의 측정 및 통제에 관한 연구 </title>
<author> 안재근 </author>
<date> 1994 </date>
<publisher> 서울대학교 </publisher>
<kdc> TM530.95 </kdc>
<tdmsfiletext>
                                 초  록


  본 논문의 목적은 단체법 프로그램의 안정성 제고를 위해 입력자료를 규모화하는 경험적 방법과 오차를 통제하는 방법에 대한 실험적 고찰을 하는 것이다.
  첫째, 입력자료의 규모화에서는 최대값방법, 산술평균방법, 기하평균방법의 경험적 규모화 방법에 대해 단체법 프로그램의 안정적 수행을 비교하였다. 실험결과는 최대값방법으로 행과 열을 규모화하는 방법이 우수하였다.
  둘째, 오차의 측정 및 통제에서는 단체법에서의 계산오차 측정방법과 오차를 통제하기 위한 허용오차의 설정방법에 대한 비교실험을 하였다. 실험결과는 단체법에서의 계산오차 측정방법간의 회귀분석식을  도출하여 기저역행렬의 계산오차로 단체법의 여러 오차요인들을 설명할 수  있는 기준을 제시하였다. 허용오차 설정에서는 계산오차를 반영하는 자동생성 허용오차 
설정방법을 제시하였으며 전산실험  결과 선회행과 쌍대해의 크기  그리고 
기저역행렬의 계산오차를 사용한 자동생성 허용오차방법이  절대 허용오차 
설정방법보다 우수하였다.

  주요어 : 단체법, 안정화, 계산오차, 오차통제, 규모화, 허용오차

 Ⅰ. 서 론
 Ⅰ.1 연구의 필요성
계산기의 발전에 따라 선형계획프로그램이 큰 크기의 문제를 푸는 것이 가능해 졌다. 그러나 계산기의 부동소수점수는 실수를 정확히 표현할 수 없으며 실수가 가지는 배분, 결합법칙 등의 원칙이 적용되지 않으므로 계산오차의 누적은 연산과정에서 불가피하다.이러한 문제 때문에 가해인 문제의 경우도 비가해 혹은 무한해를 나타내는 수가 있으며, 최적해가 찾아진 문제의 경우도 계산오차를 내포하는 경우가 있다. 이러한 상황은 신뢰도가 높은 선형계획 프로그램의 제작에 있어 제고해야 할 문제이다. 
그러므로 정확한 해를 구하기 위해서는 계산기에서의 부동 소수점 수에 대한 일반적인 지식과 선형계획 프로그램에서의 계산오차를 측정하는 방법에 대한 일반적인 지식과 이 지식을 통한 선형계획 프로그램의 전반에 걸친 계산오차의 적절한 통제가 필요하다.

 Ⅰ.2 연구의 목적
본 연구에서는 선형계획 프로그램에서의 계산오차를 알아낼 수 있는 방법과 입력 자료의 규모화(Scaling), 허용오차(Tolerance)의 설정 등의 통제를 통해 선형계획 프로그램에서 계산오차의 누적이 선형계획 문제에 어떠한 영향이 있는가에 대한 조직적인 지식의 획득과 수치적으로 안정된 선형계획 프로그램에 필요한 지식의 획득을 목적으로 한다.

 Ⅰ.3 연구의 기대효과
이 연구를 통해 선형계획 프로그램의 개발 및 유지보수 단계에서 필요한 지식의 획득이 가능한 데 이는 첫째, 오차분석의 부분에서 계산오차의 측정방법, 측정방법간의 상호관계를 알 수 있다. 둘째, 허용오차의 설정 부분에서 선형계획 프로그램에서 사용된 허용오차를 분류할 수 있으며, 이 허용오차를 계산오차의 측정값과 선형계획문제의 원문제의 입력데이타의 특성치를 이용하여 동적으로 설정할 수 있는 기준의 획득이 기대된다. 셋째, 입력자료를 프로그램에서 처리하기 쉬운 형태로의 변형에 대한 지식의 획득이 기대된다.
마지막으로 위의 전과정의 오차의 측정 및 통제를 통해 보다 수치적으로 안정되고 확실한 해를 계산시간과 계산오차라는 기준속에서 검토한 지식의 획득이 기대된다.

 Ⅰ.4 논문의 구성
본 논문은 총 8장 및 부록으로 구성된다.
1장은 연구의 필요성, 목적 및 기대효과 그리고 논문의 구성을 다룬다. 2장은 오차분석 및 오차통제의 연구현황을 다룬다. 3장은 본 연구에서 다룰 연구 방향을 규모화, 오차측정방법, 허용오차의 설정의 범주로 다루며 4장은 실험환경 및 실험계획 5장은 오차분석의 연구 및 실험 결과, 6장은 규모화( scaling ) 연구 및 실험결과  7장은 허용오차( Tolerance )설정의 연구 및 실험 결과를 다루며, 8장은 결론 및 추후 연구방향으로 구성된다.


 II. 연구 현황   
연구현황은 크게 오차분석(Error Analysis)과 오차통제(Error Control)라는 두 가지 주제에 대해 다룬다.

 II.1 오차분석 
선형방정식의 오차분석에서 일반적인 선형 시스템에서 나타나는 오차의 문제를 다루며 이 분석방법들의 선형계획법에서의 오차분석을 선형계획법의 오차분석에서 다룬다.

 II.1.1 선형방정식에서의 오차분석
선형방정식에서의 오차분석은 주어진 문제가 얼마나 수치적으로 안정되어 있는가에 대한 분석으로서 분석방법은 크게 전방오차분석( Forward Error Analysis )와 후방오차분석( Backward Error Analysis )로 대별해서 나타낼 수 있다 ( Wilkinson [24], Forsythe & Moler[9], Gill Murray Wright[15] ).
첫째, 전방오차분석은  다음과 같이 나타낼 수 있다.


    [ 표 1 ] 전방오차분석 에서의 오차분석
이는 계산된 해와 진짜의 해를 비교하여 이 값이 어떤 상수의 한계(Bound)에 있을 경우 정확한 해(exact solution)로 인식하는 방법이다.
둘째, 후방오차분석은 계산 결과 나온 해를 역으로 주어진 데이타에 반영시키는 방법으로 설명된다. 즉,


    [ 표 2 ] 후방오차분석 에서의 오차분석
이때   dN - d   가 일정한 한계(Bound) 안에 있을 경우 계산된 값을 원문제와 유사한 문제(nearby problem)의 정확한 해(exact solution)가 되는 방법이다.이런 방법을 통한 오차의 예측은 J. H. Wilkinson[24]에 의해 설명되고 일반화된 방법이다. 그러나 전방오차분석에서는 계산도중 불가피한 반올림(rounding)이나 버림(chopping)으로 인해 원래의 문제가 다른 문제화 하는 것을 인정하지 않기 때문에  구해진 상수로부터 얻어진 한계(Bound)가 별 의미가 없으며, 또한 계산이 쉽지 않은 단점이 있다. 그러므로 오차분석의 원래의 문제가 섭동(perturbed)된 문제로 표현된 후방오차분석의 방법론을 채택한다. 이러한 후방오차분석를 통해 가우스 소거법(Gaussian Elimination) 에서의 오차 분석을 행하였다. 그리고 이러한 분석을 토대로 가장 좋은 선형방정식의 해법으로 규모화된 부분선회(Scaled Partial Pivoting) 전략이 제시되었다( Forsythe Moler[8], Maron Lopez [13]).  즉 선회요소가 소거할 선회요소가 속한 열에서의 아래쪽 값 중 가장 큰 값을 선택하는 방법으로 계산상의 오차를 가장 줄일 수 있는 방법으로 제시되었다.
 II.1.2 선형계획에서의 오차분석
선형계획문제에서의 오차분석은 Forrest 와 Tomlin [8]에 의하면  크게 두 가지 동기에서 추구되었는데 이는 첫째, 프로그램이 끝났음( 비가해(infeasible) 혹은 무한해(Unbounded) 혹은 최적해 )을 알지 못하고 계속 단체수행을 계속하는 경우와 둘째, 2국면으로 넘어갔으나 영의 선회요소로 나누거나 혹은 특이행렬이어서 역행렬이 존재하지 않을 경우 등에서 볼 수 있듯이 잘못된 선택으로 비가능(infeasible)인 기저를 선택하게 되는 경우등에서 볼 수 있는 진동(Oscillation)등을 들 수 있다.
이런 문제에 대한 해결은 첫째, 기저행렬의 역행렬은 좀더 조심스럽게 유지하여 이 역행렬 부분에 오차의 개입의 소지를 최소한 줄이는 방법이 있을 수 있으며 ( Markowitz[12], Bartels-Golub[5], Forrest & Tomlin[20] )  둘째, 주어진 단체 수행 알고리듬의 일부(즉, 진입변수의 및 탈락변수의 선택)를 개선하여 전체적 부분에서 오차의 개입을 줄일 수 있는 방법들이 고려된다.
한편 선형계획의 문제는 매 단체 수행과정이 가우스 소거법과 같으나 가우스 소거법과는 다르게  선회요소( Pivot Element )의 선택이 단체법의 진입변수, 탈락변수 선택과정을 갖기 때문에 이의 해결을 필요로 하게 되어 이러한 관점에서 Tomlin(1972)에 의해서 제시된 선회 시 비영요소의 도입을 줄이는 방법과 수치적 안정을 위해 큰 선회요소를 선택하는 안정된 선회허용오차 수준( Pivot Tolerance Level )이라는 개념을 제안하였으며 또한 실험을 통해 오차와 수치적 안정을 구하는 선회허용오차 수준을 설정하는 방법을 제시하였다.

 II.2 오차 통제
오차의 통제(control)는 가능한한 정확한 최종결과를 얻을 수 있도록 하는 처리과정 전반을 가리키는 말( Johnston [17] )이다.
이는 계산기의 Hard ware, Soft ware, 사용자의 입력등의 전 과정에서 오차의 개입의 소지가 있는 부분에 일정한 처리를 해주는 과정을 이르는데, 이는 주어진 문제의 상황을 선형계획법으로 Modelling 한 경우에서 나타날 소지가 있는 문제를 처리하는 규모화(Scaling) 그리고 Software 의 수치적으로 안정된 제작과 관계 있는 오차측정방법과 허용오차 의 설정 문제, 그리고 이를 보완해 줄 수 있는 계산기 Hard ware 에 대한 고려등의 전반을 포함하는 과정을 이른다.
여기에서는 규모화(scaling)의 문제, 허용오차 의 설정의 문제에 대해 다룬다. 

 II.2.1 규모화( Scaling )
규모화( Scaling )의 문제는 전처리( Pre-processing 혹은 pre-conditioning )이라는 관점에서 제시되었는데, 이는 경험적으로 주어진 행렬의 행과 열을 산술 평균이나 기하평균 또는 최대값으로 나누어 주어 행하는 방법( Orchard-Hay [26], Tomlin[22], Bixby[6], Benichou et el[31])과 일정한 척도를 주어 이 척도를 만족하는 문제를 풀어 규모화요소(scaling factor)를 구하는 최적규모화(Optimal scaling)로 나누어 볼 수 있다.( Rothblum[27] )
Orchard-Hay[26]의 경우 규모화의 목적을 일반한계변수( bounded variable )를 [ 0, 1 ]의 단순상한으로 변환시켜 줄 수 있고, 최적화의 관점과 최적화를 초기에 더욱 심화시켜 줄 수 있다는 것 그리고 마지막으로 행렬의 조건(condition)을 개선 시켜 줄 수 있다는 것의 4가지로 정의 하였다.
규모화에 대한 실험은 Tomlin[22] 에 나타나 있는데 여기에서 잘 규모화된( well-scaled )행렬을 잘못 규모화된( ill-scaled ) 행렬이 아닌 행렬, 그리고 행렬의 조건수( condition number )를 개선시킬 수 있는 변형이라는 관점에서 정의 하였다.  또한 규모화를 통해 변수의 상하한의 한계( Bound )를 좀더 긴밀하게 줄 수 있고 단체 수행횟수를 줄일 수 있으며 마지막으로 수치적 행동의 개선을 나타낸다고 하였으며 자릿수의 차이등의 몇 가지의 well-scaled 된 형태의 척도를 제시하였다. 이 경우에 있어서 일반한계문제(상하한이 bound된 문제)의 경우 이를 [0,1]로 단순히 처리하는 것은 프로그램에서 저장장소의 소요를 줄여줄 수 있으나 수치적으로는 좋지 않은 것임을 언급하였다. 그리고 경험적인 규모화 방법으로 기하평균으로 행과 열을 규모화하는 방법이 산술평균 혹은 최대값으로 규모화하는 방법보다 척도를 잘 만족하는 결과를 가져온다는 것을 실험을 통해 밝혔으며, 또한 well-scale 의 문제에 대해서는 규모화는 되도록 피하는 것이 좋음에 대해 언급하였다.  그리고 Benichou[31] 의 경우는 규모화의 장점을 첫째, 기저 역행렬의 조건수( condition number )를 줄일 수 있다. 둘째, 원문제의 행렬요소의 크기의 산포를 줄인다. 셋째, 해의 정밀도검사를 단순화 시킨다. 의 세가지를 제시했으며 규모화 방법으로 기하평균방법( geometric scaling )방법으로 4번 거듭 적용하며 이때의 종결조건으로 비영 행렬요소의 분산이 10 이하 이면 끝나게 되며 이후 최대 요소 방법을 적용하여 노옴을 작게 만들어 주는 방법에 대해 제시하였다.
그리고 이후의 연구는 최적규모화( Optimal Scaling )에 많이 나타나는데 이는 Rothblum[27] 에서 볼 수 있듯이 규모화의 척도에 대한 이론적 연구로 나타나고 있으며 이것이 규모화가 선형계획법 문제의 수치적 행동에 어떻게 반영되는가에 대한 기준을 다루는 연구로 나타나지는 않는 실정이다.
선형계획프로그램( L.P Code )에 나타난 규모화의 방법은 MINOS[4] 나 CPLEX[6] 의 경우는 최대값으로 행과 열을 나누어 주는 경험적인 규모화 방법을 취했으며 LINDO[28] 의 경우는 일정한 척도를 만족할 때 까지 수 차례에 걸쳐 반복하여 규모화하는 방법을 취하고 있으나 이에 대한 근거들을 밝히고 있지는 않다며, MPSX의 경우는 Benichou[31]의 경우 제시된 방법의 규모화 방법을 채택하고 있다.
선형방정식에서의 규모화( scaling )의 문제, 선형계획 문제에서의( scaling ) 의 문제, 규모화의 방법, 그리고 규모화( scaling )의 척도에 대해  언급하면 다음과 같다.

 (1) 선형방정식 해법에서의 규모화의 문제
선형방정식 Ax = b( A: n   n 행렬   b: n   1 벡터 그리고 구하고자 하는  x: n   1 벡터 ) 문제의 해를 수치적 안정을 유지하며 작은 연산으로 원하는 Ax = b 의 해를 구하는 것 즉, 가장 작은 계산오차를 유발하는 선회요소를 선택하려하는 문제이다. 이에 대한 문제는 Gaussian 소거법 ( 가우스 소거법과 후방치환으로 구성 ) 에서의 선회전략( Pivoting Strategy )으로 제시된 방법 중 부분선회(partial pivoting) 및 전체선회(full pivoting)의 선택기준으로서의 규모화된 부분 또는 전체선회(Scaled partial or full pivoting )의 선택기준은 행과 열의 요소 중 절대치가 가장 큰 요소를 부분선회의 경우는 선회요소의 아래쪽 요소 중 가장 큰 값을 선택하는 기준이며, 전체선회의 경우는 선회요소의 행과 열의 우측과 아래요소 중 가장 큰 값을 선택하는 기준이다. 이에 선회 전략에 대해 나열하면 다음의 [ 표 3 ]과 같다.


    [ 표 3 ] 선형방정식 해법에서의 선회전략 및 선택기준
F.P 나 S.F.P 의 경우 연산이 P.P 나 S.P.P 보다 O(n3)이 소모되고 그 값의 정확도가 부가적인 연산에서 보장되기에는 충분하지 않은 것으로 알려져 있다. 이때 S.P.P 의 방법이 계산오차를 줄여주는 가장 효율적인 방법이라는 것이 알려져 있으며 많은 경우의 선형방정식의 해법으로 추천되고 있다.

 (2) 선형계획 문제에서의 규모화의 문제
1) Scaling 문제의 모형화  
일반한계문제는 다음과 같다.


    [ 표 4 ] 일반 한계 모형
규모화 문제는 다음과 같이 모형화 할 수 있다.       


    [ 표 5 ] 규모화된 문제 의 모형
  P1)문제와 P2)문제는 실수에서 동치( equivalent )인 문제이다.
위에서 보는 바와 같이 P1) 문제와 동치인 P2) 문제를 풀어 이 P2) 문제의 해인 x'과 xs'을 통해  x 와 xs를 구해내는 문제를 규모화의 문제라 한다.
2) 원 문제와 규모화한 문제의 차이점


    [ 표 6 ] 일반한계문제와 규모화된 문제의 모형 비교
위에서 보는 바와 같이 원문제와 동치인 규모화된 문제를 풀어 이 규모화된 문제의 해인 x'과 xs'을 통해  원 문제의 해 x 와 xs를 구해내는 문제를 규모화의 문제라 한다. 이 문제는 실수를 체계로 한 연산에서는 같은 문제이나 유한개의 수 만이 이산적으로 분포하는 계산기의 부동소수점수에 있어서는 다른 문제가 된다. 이에 대해 행의 규모화의 경우와 열의 규모화의 경우로 나누어 살펴보면


    [ 표 7 ] 행만 규모화한 문제
[ 표 7 ]의 경우는 목적함수의 값은 변화가 없고 다만 계수행렬( A )과 우변상수( b )만 변하기 때문에 이는 선형방정식의 해법에서의 S.P.P이 갖는 소거연산 중에서의 작은 오차를 유도할 수 있는 이점과 비슷한 어떤 선회열이 선택되었을 때 이 선회열의 각 요소가 원문제의 요소보다 작은 분산과 차이로서 최악의 경우(worst-csae)를 개선하는 효과를 지닌다. ( Melvin[13] )


    [ 표 8 ] 열만 규모화한 문제 
[ 표 8 ]의 경우는 x의 값의 범위를 ill-scaled 행렬의 경우에는 좁혀주는데 이는 계산기의 수의 표현에 있어서의 좀더 정확한 표현이 가능하기 때문에 오차를 줄일 수 있을 것으로 기대된다.
 (3) 선형방정식 해법의 단체법의 선회전략과의 차이점
- 단체법에서의 선회요소의 선택기준
                                      -           
진입변수(선회 열) 의 선택기준   : Min cj ( < 0 )
탈락변수( 선회행 )의 선택 기준  : 정해진 선회열에 대해서 영보다 큰 계수 중 최소비율검정으로 결정
- 선형방정식의 해법과의 차이점  
선회요소의 열 과 행이 단체법의 선택기준에 의해  미리 정해져 있어 계수행렬( A )에서 수치적 안정을 구할 수 있는 최적의 요소가 선택할 수 있는 방법이 없다.
 (4) 규모화방법과 나누는 요소( factor )를 구하는 방법에 관한 연구  
선형계획 문제에서 규모화요소를 구하는데 다음의 3가지의 경험적 방법과 De Buchet's 방법 그리고 2가지의 최적 scaling 방법이 사용되는데, 3가지의 경험적 방법들은 실험으로 방법간의 효율성이 충분히 검증되지는 않고 있다.
ⅰ)  규모화의 경험적 방법
- 최대값(equilibration)방법
각각의 행에 대해 가장 큰 요소를 1로 만들어 주게 행을 규모화 한다. 같은 방식으로 열을 규모화 한다.
- 기하평균(geometric mean)방법
각각의 행에 대해 모든 비영요소의 (maxj aij  minj aij )1/2을 계산하고 각 행을 이 수로 나누어준다. 같은 방식으로 열을 나누어 준다.
- 산술 평균(arithmetic mean)방법
각각의 행에 대해 행에 있는 모든 비영의 구성요소의 산술평균으로 나누어 준다. 같은 방식으로 열을 나누어 준다.  
ⅱ) De Buchet's 방법
이 방법은 규모화요소(scaling factor) ri, cj 가 다음과 같이 구해진다.
      Min       { riaijcj + 1/(riaijcj) }2
     ri,cj  aij 0
이런   ri, cj를 선택한 효과는 행렬계수를 1 근처에 밀집되게 하는 효과가 있다. 그러므로 분산을 줄일 수 있다.

ⅲ)  최적 scaliing방법
최적 규모화의 문제는 규모화의 척도로 계수의 차이( difference )와 분산( σ )을 최소화하는 문제로 나타나는데 이에 대해 각각 상술하면 다음과 같다.
- Fulkerson-Wolfe 방법
다음과 같은  ui, vj를 구한다.
       Min d = Min { Maxij eij' - Minij eij'}
              = Min { Maxij (eij + ui + vj) - Minij( eij + ui + vj)}      
이것은 다음과 같은 것을 푸는 것과 같다.                                
        Min  Maxij( eij + ui + vj) 
        ui vj                                                       
       s.t.  eij + ui + vj   0  ( i = 1,...,m ; j = 1,...,n )      
이것은 다음의 식과 같은 식인데 
       Min     w                                                     
       s.t   0    eij + ui + vj    w                               
             ui , vj : 정수   ( i = 1,...,m ; j = 1,...,n )        
이는 넷워크 유통문제를 상기시키게 한다.
- Curtis-Reid 방법
σ( variance of eij' )를 최소화 하는 문제는 다음을 찾는 문제와 같은 문제이다.
       Min        (eij + ui + vj)2 
      ui,vj   aij 0                                   
그러나 이는 단지 규모화요소를 구하기 위해  m   n 의 선형계획법문제를 풀기 위해 ( m+n )   ( m+n )를 풀어야 한다. 그러나 행렬 형식으로 바뀐 문제의 구조로 Curtis 와 Reid가 이 문제는 conjugate gradient 알고리듬을 사용하여  (m+n)이 45 ~ 199의 문제를 단지 8 ~ 10회의 수행횟수로 정확히 구하는 방법을 제시하였다.
 (5) 규모화의 효율의 척도에 관한 연구
ⅰ) 조건 수 (condition number)
- 조건(condition)의 의미
입력 데이타의 조그만 변화에 해가 조그만 변화로 야기되면 well-conditioned,   입력 데이타의 조그만 변화에 해가 큰 변화로 야기되면 ill-conditioned라고    한다. 이는 정확 부정확의 문제가 아니라 원문제의 특성에 대한 문제이다.
- 조건수 ( condition number)의 계산법
   

- 조건수(condition number) 의 의의
조건수를 통해 원 문제가 ill-condition 일 경우  규모화의 기준이 될 수 있으며, 또한 단체법 수행 도중 오차 누적의 평가 지표가 될 수 있다.
ⅱ) 유한 자릿수 계산기에서의 규모화의 평가방법
한편 어떠한 규모화의 경우도 사용자의 원 데이타의 유효자릿수를 잃어버리는 방법은 유용하지 못하다. 만일 2진 산술연산의 경우가 원 데이타가 
aij = 2eij fij ( 1/2   fij < 1 )
그리고 규모화요소( scaling factor )가  ri = 2ui , cj = 2vj , ( 이때 eij,ui,vj 는 정수) 이면  이때 규모화된 행렬의 자릿수는  eij' = eij + ui + vj 가 된다. 
그리고 규모화된 알고리듬의 효율성을 측정하기 위해 
d = emax - emin  ( emax = max eij', emin = min eij' ), δ= variance(eij') 를 사용하기도 한다.
 II.2.2 허용오차 설정
허용오차 설정의 문제는 계산오차로 인해 기인한 오차가 실제는 어떠한 값이겠는가의 추정에 사용되며 이것이 선형계획 프로그램에서는 '영'이 아닌 오차가 포함된 값을 어느 정도의 범위까지를 '영' 으로 인지해야 만이 계산상 안정된 해를 구할 수 있을까? 에 대한 경험을 일반화한 절차이다.
이 절차는 크게 두 가지의 연구 방향이 있다. 하나는 계산기의 하드웨어적 속성을 가지고 많은 실험을 통해 경험적으로 주어진 문제에서 주어진 허용오차를 결정하는 방법( Orchard Hay[26], Murthgh [14], 기타 GAMS[4], LINDO[28], MILP[23] )이다. 다른 하나는 행렬이나 벡터의 속성에 의한 혹은 주어진 허용오차를 동적으로 관리하여 원하는 허용오차를 설정하는 분야( Clasen[29], Benichou[31], Ogryczak[25] )이다. 
경험적 허용오차 의 설정은 첫째, Orchard Hay[26]의 경우 허용오차 의 설정이 필요한 분야를 수의 크기의 역치( TABS, TDIF ), 선회요소의 크기( TRES, TINV, TPIV ), 원 쌍대의 비가해와 관련( TZER ), 오차체크( TCHK ) 등의 4가지로 분류하였다. 둘째, Tewarson(1973) 의 경우 10진 9~10자릿수 계산기의 연산의 경우 탈락 허용오차(Drop Tolerance : 10-7), 선회 허용오차(Pivot Tolerance : 10-3)를 추천하였다. 셋째, Murtagh [14] 에서는 선형계획 문제의 계산오차를 줄이기 위한 방법으로 허용오차의 설정을 잠재가의 허용오차, 행렬요소의 허용오차( 10-10), 선회 허용오차(10-8), 우변상수의 허용오차(10-6)의 4가지로 제시하였고 또한 계산오차의 누적이 있을 시 재역산이 필요함을 밝히고 있다. Murty는 계산상 안정된 형태의 기저의 보관방법을 상하 분해법( LU factorization )이나 Cholesky 분해( factorization )라고 밝히고 있으며   b - BxB   와   cB -  BB  를 25회 나 50회에서 계산한 후 이 오차가 허용오차( 10-6 ~ 10-7 )보다 커졌을 때 재역산을 실시해야 한다고 지적하였다. Bixby[6] 의 경우 일반한계문제에서 상하한에 있는 비기저변수의 한계잔차( bound residual )와 상하한에 있는 비기저변수의 할인가의 잔차를 일정한 설정된 값과 비교하는 방법에서 허용오차를 사용하였다.
둘째 동적 허용오차의 설정분야에서는  Clasen( 1966 )은 허용오차를 일정한 값으로 주지않고 자동적으로 통제할 수 있는 방법을 제시하였다.
Benichou(1977)의 경우는 유효자릿수의 검사와 해의 정밀도의 검사의 기준으로 허용오차의 설정을 제시하였는데 이는 첫째, 유효자릿수의 검사부분에서는 선회요소의 경우 중간과정에서의 가장 큰 요소의 상수 배 ( 배정도의 정밀도의 경우 10-13 )를 이용하였으며 해의 정밀도 검사 부분에서는 잠재가의 검사와 선회 검사로 나뉘며 잠재가의 검사 부분에서는 잠재가가 선회요소의 가장 큰 값의 상수 배(10-9) 이상이면 재역산을 실시하며 선회검사에서는 선회열의 계산오차가 선회열의 노옴의 상수 배( 10-9 ) 이상이면 재역산을 실시하는 기준으로 허용오차를 제시하였다. Ogryczak(1987) 의 경우 1국면의 문제를 해결하는 허용오차를 동적으로 정의하는 방법을 제시하였다. 

 II.2.3 계산오차의 측정방법
Murty[30] 는   b - BxB   와   cB -  *B  를 계산오차를 측정할 수 있는 방법으로 제시하였으며, Bixby [6] 의 경우 일반한계문제에서 상하한에 있는 비기저변수의 한계 잔차( bound residual )와 상하한에 있는 비기저변수의 할인가의 잔차를 통해 계산오차를 측정하였다.


 Ⅲ. 연구방향
이 연구에서는 첫째, 단체법에서 계산오차의 측정방법을 제시하려 하며 이들 간의 상호 관계를 규명하고자 한다. 이를 통해 선형계획 프로그램에서 나타나는  허용오차의 유형을 제시한 후, 이 허용오차를 어떻게 설정하면 가장 계산오차를 줄일 수 있는가에 대해 연구한다. 둘째, 선형계획프로그램에서 규모화가 필요한 문제의 특성을 분석하고자 한다. 또한 주어진 선형계획문제의  행렬과 벡터의 행들이나 열들을 비슷한 크기로 변환( transform )시켜주어 단체법의 수행도중의 반복횟수 및 수치적 행동을 개선시킬 수 있는 방법들 간의 우월한 상황을 규명하고자 한다. 
 Ⅲ.1 오차의 측정
선형계획 프로그램에서 구할 수 있는 기저 역행렬의 계산오차, 원문제의 해의 계산오차, 쌍대해의 계산오차는 상관관계가 있는가에 대한 분석을 하였고 이를 통해 각 계산오차를 프로그램의 안정도의 척도로 사용할 수 있는 계산의 복잡도가 낮은 기저역행렬의 대각요소의 계산오차로 완화하는 방법에 대해 연구하였다.
 Ⅲ.1.1 계산오차의 측정방법
 계산오차의 측정방법은 다음과 같이 분류할 수 있다.  
 (1) 기저역행렬(B-1) 와 관련한 계산오차의 측정방법
 

 (2) 원문제의 해(X)와 관련한 계산오차의 측정방법

   
 (3) 쌍대해( )와 관련한 계산오차의 측정방법


 Ⅲ.1.2 측정방법간의 관계
 (1) 기저 역행렬 의 계산오차와 원문제의 해의 계산오차의 관계
기저역행렬의 계산오차와 원문제의 해의 계산오차는 아래의 관계로 표현된다.
 

 (2) 기저역행렬의 계산오차와 쌍대해의 계산오차의 관계
기저역행렬의 계산오차와 쌍대해의 계산오차는 아래의 관계로 표현된다.


 Ⅲ.2 규모화
규모화 방법은 계수행렬의 크기(노옴)나 분산 또는 자릿수의 차이등의 계수행렬의 특성을 표현하는 특성치에 따른 해의 존재를 일반적으로 고려하여 다른 요인을 제외하고 행렬계수만을 가지고 수치적 불안정요인을 추정하는 방법이 필요하다. 이는 계수행렬의 특성치를 변화하며 선형계획프로그램을 실행하여 이를 통한 역치를 구하는 방법으로 요약할 수 있다.  또한 규모화로 제시된 여러 가지 방법간의 차이를 규명하여 이를 통해 각 방법의 우월한 상황 및 장단점을 구분할 수 있다.
이에 대해 나열하면 다음과 같다.   
첫째, 계수행렬의 규모에 따른 해의 존재의 역치를 추정하는 실험이 필요하다. 둘째, 계수행렬( A행렬 )의 특성치( 차이, 표준편차 )가 작은 방법이 오차를 줄일 수 있는지에 대한 실험과 각 방법의 장단점을 분류 후 적합한 분석이 필요하다.

 Ⅲ.3 허용오차 의 설정
 Ⅲ.3.1 허용오차의 설정방법의 분류
허용오차는 각각의 입력데이타의 특성을 반영하는 자료에 따라 분류할 수 있는데 이는 첫째, 1국면의 목적함수의 값이 '0'인지의 비교연산과 프로그램의 안정도의 척도 그리고 최적해에 해당되는지의 비교연산에 사용되는 최적조건에 대한 허용오차(TOL0), 둘째, 탈락변수의 선정시의 선회요소의 값이 수치적 문제를 않을 만큼 큰 값인 지의 비교연산에 사용되는  선회요소의 선택에 관한 허용오차(TOLA), 셋째, 단체수행도중 원문제의 해가 하한 혹은 상한 또는 중간값인 지의 비교연산에 사용되는 해의 원가능에 관한 허용오차(TOLB), 넷째,할인가가 음인 지의 비교연산에 사용되는 진입변수의 선택에 관한 허용오차(TOLC), 그리고 마지막으로 기저역행렬의 제조 시 만들어지는 값이 작아서 '0'으로 그 값을 설정해도 좋은 지의 여부의 비교연산에 사용되는 기저 역행렬의 요소에 관한 허용오차(TOLBI)등으로 분류할 수 있다. 이를 정리하면 다음의 [ 표 9 ] 와 같다.


    [ 표 9 ] 허용오차의 종류

 Ⅲ.3.2 허용오차의 설정방법
허용오차의 설정방법을 계산기의 정밀도를 고려한 절대허용오차의 설정방법, 연산이 이루어 지는 자료의 크기에 따라 설정해 주는 상대허용오차 설정방법,  그리고 측정된 계산오차를 통해 프로그램의 수행과정에서 동적으로 설정해 주는 자동허용오차 설정방법으로 분류하였다. 그러나 상대허용오차의 설정방법의 경우는 자동허용오차의 설정방법으로 흡수가 가능하므로 프로그램의 안정도의 척도로 사용되는 TOL0와 계산기에서 표현가능한 수의 역치값으로 설정이 필요한 TOLB, TOLBI 의 경우와 같은 절대허용오차의 설정이 필요한 경우를 제외한 TOLA와 TOLC를 자동설정방법으로 설정하였다. TOLC의 경우는 선형계획문제의 경우 할인가에 영향을 미치는 자료는 계수행렬, 기저역행렬, 단체승수, 수정열, 목적함수계수 등이며 TOLA의 경우는 계수행렬, 기저역행렬, 수정열 등이다. 자동설정방법으로의 설정은 선회요소의 선택에 관한 허용오차의 경우는 기저역행렬의 계산오차에 연산이 이루어지는 자료의 특성치를 반영하여 선형계획 프로그램에서 진입변수와 탈락변수의 선정과 관련한 허용오차 TOLC, TOLA를 정리하면 다음과 같다. 다음의 [ 표10 ]와 같다.


    [ 표 10 ] 자동생성 허용오차의 설정방법
이 경우 TOLC의 경우는 목적함수의 오차항이 cj' - ( cj - cBB-1A.j) 로 표현되기 때문에  
   cj' - ( cj - cBB-1A.j) 
= ( cj -  A.j ) - ( cj - cBB-1A.j ) +δj
= ( cBB-1A.j -  'A.j ) + δj
= ( cB -  'B )( B-1A.j )  + δj
   B-1 * I-B-1*B * C  또는    * I-B-1*B * Abar  또는    * I-B-1*B 로 표현 될 수 있으며 또한   C- *B   즉, 쌍대해의 계산오차로 표현될 수 있다.
그리고 TOLA의 설정의 경우는 행렬계수의 할인가의 오차항이 ais' - B-1i.A.s , i B 로 표현되므로 
   ais' - B-1i.A.s , i B
 = B-1i. ( BA'.s -A.s )
 = B-1i. ( BB'-1 - I )A.s 
    B-1 * I-B-1*B * A  또는  I-B-1*B * Abar   로 표현될 수 있으며 또한  I-B-1*B * Abar  의 일종으로 재역산을 부르기 전까지의 수정열의 크기 중 가장 큰 값으로 주는   β * I-B-1*B  ,   β  : 중간단계의  Abar.j 의 최대값 방법을 사용할 수 있다.

 Ⅳ.오차 분석 및 통제 실험계획
오차 분석 및 통제의 실험계획은 실험 목적, 실험도구 및 실험 환경 설정, 계산오차 및 허용오차설정 실험, 규모화 실험으로 나누어 볼 수 있다.

 Ⅳ.1 실험목적 
실험의 목적은 다음과 같은 문제의 해결을 위한 것이다. 첫째, 오차분석의 부분에서 계산오차를 측정할 수 있는 방법 중 효율적인 방법은 무엇인가 ? 측정된 오차들 간의 상호관계는 얼마나 되는가? 둘째, 허용오차의 설정 부분에서 측정된 오차와 설정된 허용오차 사이의 관계는 무엇인가 ? 선형계획 문제에서 설정이 필요한 허용오차의 종류는 어떤 것이 있는가 ? 조직적으로 허용오차를 설정할 수 없는가 ? 셋째, 규모화 부분에서 규모화가 잘 ㄷ다라고 측정할 수 있는 기준에 대한 평가는 어떠한 것이 있는가? 여러 규모화 방법의 우월한 상황은 무엇인가 ? 에 대한 지식의 획득을 실험의 목적으로 하며 이를 위해 회귀식 표현의 실험, 우월한 상황검증 등의 실험방법등을 제시할 수 있다.

 Ⅳ.2 실험도구 및 환경 설정
실험도구 및 환경의 설정은 실험기기의 선정, 작성 프로그램에 대한 명세의 내용으로 구성되어 있다.
 Ⅳ.2.1 실험기기의 선정
IBM PC 486 , HP Workstation(HP750)
 Ⅳ.2.2 프로그램 작성
LPBT47( PC Version, UNIX Version )[32]
(다종평가,부분평가,A와 B-1의비영요소 보관 및 연산,재역산추가된 Version)
LPGEN20( PC Version , UNIX Version )[33]
규모화 부 프로그램 
잔차 체크 부 프로그램 :  b - BxB ,  cB -  *B ,  B*B-1 - I  
기타 단체법 수행도중의 특성치 체크 부 프로그램

 Ⅳ.3 실험용 문제의 생성 및 획득
실험용 문제는 최적조건을 만족하는 생성문제와 NETLIB 문제를 이용하였다.
 Ⅳ.3.1 실험용 데이타의 생성
실험용 데이타의 생성[11],[16]은 첫째, 생성할 수 있는 문제의 양이 많아야 한다. 둘째, 다양한 문제를 제어하며 생성할 수 있어야 한다. 셋째, 생성할 문제를 잘 설명할 수 있는 입력 데이타 뿐 만 아니라 생성된 문제가 최적해를 가져야 한다. 넷째, 재생성이 가능하여야 한다. 라는 조건을 만족하여야 한다. 이중 셋째 조건은 최적해를 미리 알고 이를 통해 주어진 프로그램( code )이 잘 작동하는가, 정확한 해를 나타내는가, 그리고 오차를 어느 정도 내포하는가의 기준을 제공하기 쉽다. 본 연구에서는 이러한 네 가지 조건을 만족하는 가능해의 생성을 위해 제약식 및 변수의 갯수, 계수의 범위, 계수의 밀도, 난수의 초기치 등을 입력하여 본 프로그램은 지정된 범위내의 난수를 발생시켜서 선형계획 문제를 만든다. 이때 만들어 지는 문제는 여러 특성값의 입력으로부터 상보여유정리의 제 조건을 만족시키는 문제를 생성하여 얻어지는 가능문제( feasible problem )이며 최적해를 미리 알 수 있다. 

 Ⅳ.3.2 실험용 실제 데이타
실제 데이타는 NETLIB의 데이타[6]를 사용하였다. 이 데이타는 다른 많은 논문에 그 특성과 실험결과가 보고되어 있기 때문에 생성된 문제 이상의 실험 효과를 거둘 수 있다. 실험에 사용된 문제는 전체 NETLIB문제 중 제약식의 갯수가 20 ~ 500 사이의 문제를 무작위로 추출한 문제들로 이의 특성치는 [부록표1],  [부록 표2]에 있다.

 Ⅳ.4 계산오차 분석 및 허용오차 설정에 관한 연구 실험계획
이 실험의 목적은 측정방법들간의 상호관계를 통해 단체법 수행 과정에서 계산의 부하를 줄이면서 계산오차의 측정을 할 수 있는 다른 방법은 없겠는가에 대한 답을 제시할 수 있는가를 실험을 통해 확인해 보고자 함이다. 제시된 계산오차의 측정방법을 나열하면 다음과 같다.
  Iij - B-1ik*Bkj    i,j  : 기저역행렬의 계산오차
  Iii - B-1ik*Bki     i  : 기저역행렬의 계산오차의 대각요소   
  b - B*x            : 원문제의 해의 계산오차
   *B - CB           : 쌍대문제의 해의 계산오차
 Ⅳ.4.1 기저역행렬의 계산오차와 기저역행렬의 계산오차의 대각 요소의 관계의 관계 실험
① 실험의 가정 : 기저역행렬의 계산오차의 대각요소로 기저역행렬의 계산오차를 설명할 수 있을 것이다.
② 변수 설정  : 독립변수 (X) : 기저역행렬의 계산오차의 대각요소
                종속변수 (Y) :기저역행렬의 계산오차
③ 실험방법     :  1) plot     2) curve fitting
 Ⅳ.4.2 기저역행렬의 계산오차와 원문제의 해의 계산오차 그리고 b의 노옴과의 관계 실험
① 실험의 가정 : (기저역행렬의 계산오차)*(b의 노옴)으로 원문제의 해의 계산오차를 설명할 수 있을 것이다.
② 실험방법  :  측정된 원문제의 해의 계산오차와 기저역행렬의 계산오차를 이용하여 (기저역행렬의 계산오차) * (b의 노옴) 이 어느 정도 원문제의 해의 계산오차 보다 어느 정도 큰 값으로 나타나는지의 체크 
 Ⅳ.4.3 기저역행렬의 계산오차와 쌍대해의 계산오차 그리고 c의 노옴과의 관계 실험
① 실험의 가정 : (기저역행렬의 계산오차) * (c의 노옴) 으로 쌍대해의 계산오차를 설명할 수 있을 것이다.
② 실험방법 : 측정된 쌍대해의 계산오차와 기저역행렬의 계산오차를 이용하여 (기저역행렬의 계산오차) * (c의 노옴) 이 어느 정도 쌍대해의 계산오차보다 어느 정도 큰 값으로 나타나는지의 체크 

 Ⅳ.5 허용오차 설정 실험 계획
허용오차의 설정의 실험계획은 첫째, 절대허용오차의 설정실험 둘째, 자동설정방법간 및 자동설정 방법과 절대 허용오차설정 방법간의 비교실험으로 이루어 진다.
 Ⅳ.5.1 절대 허용오차의 설정실험
각각의 허용오차의 값들이 크거나 작아졌을 때의 상황을 알아보기위한 실험은 경험적으로 각각의 허용오차에 대해서 단정도의 경우 TOL0의 경우는 10-3, TOLA의 경우는 10-4, TOLB의 경우는 10-6, TOLC의 경우는 10-6, TOLBI의 경우는 10-6으로 설정하고 이의 자릿수를 10진 한 단위씩 경험적인 자릿수에서 가감하여 실험을 계획하였는데 이 설정방법에 대해 살펴 보면 다음과 같다.


제약식수(30, 50, 70, 90), 변수수는 제약식수의 2배 4배, 인 문제에 대하여 자릿수의 최대값을 10진 0자리로 고정하여 자릿수의 차이를 10진 1, 2, 3, 4, 5, 6, 7자리로 각각 설정한 방법과 최대자릿수와 최소자릿수가 10진  (1, 2, 3, 4, 5, 6, 7)로 각각 설정한 방법 그리고 최소자릿수를 10진 0자리로 고정한 후 최대자릿수를 1, 2, 3, 4, 5, 6, 7로 설정한 방법에 대해 각각 실험을 실시하였다. 이때 실험의 상황을 설명할 수 있는 값으로서는 단체수행횟수, 계산오차, Cond(A), 해의 존재양상(1국면에서 비가해, 2국면에서 무한해, 최적해, 잦은재역산)등을 택하였으며 분석방법은 해의 존재 양상의 비율에 따른 순위를 이용하였다.
 Ⅳ.5.2 자동 설정방법간 및 절대허용오차설정 비교 실험
자동 설정방법간 및 절대허용오차설정 비교 실험의 실험계획은 제약식수(20, 30, 40)에 대하여 변수수는 제약식수의 두배, 네배의 두 가지 상황에 대해 자릿수의 최대값을 10진 0자리로 고정하여 자릿수의 차이를 10진 1, 2, 3, 4, 5, 6, 7자리로 각각 설정한 방법과 최대자릿수와 최소자릿수가 10진  (1, 2, 3, 4, 5, 6, 7)로 각각 설정한 방법 그리고 최소자릿수를 10진 0자리로 고정한 후 최대자릿수를 1, 2, 3, 4, 5, 6, 7로 설정한 방법에 대해 각각 실험을 실시하였다. 실험의 환경을 기술하면 자동생성 허용오차의 설정방법간 및 기존의 절대허용오차 설정 방법간 비교실험은 실험에서는 프로그램의 안정도의 척도로서 기저역행렬의 대각요소의 계산오차를 10-3으로 설정하였으며 허용오차의 갱신 횟수를 제약식의 수의 1/5회에 한번씩으로 설정하였다. 또한 기저역행렬의 계산오차가 100이 넘을 경우에 그 값을 100으로 설정하였으며 설정이 필요한 TOLA, TOLC의 경우 허용오차가 100 이상이거나 10-4 이하인 경우에 있어서는 계산오차의 누적에 기인한  보고 허용오차를 경험적 수치인 10-4으로 설정하게 하였다. 실험의 분석을 위해 최적해는 올바른 단체수행을 통해 나온 값 중에서 배정도의 정밀도로 같은 문제를 풀에서 나온 해와 비교하여 1%이상의 오차를 갖지 않은 문제를 체택하였고 잦은 재역산은 제약식수의 1/3 이상의 재역산이 불리워진 경우 프로그램의 수행도중에 수치적 문제를 야기한 것으로 보아서 분류하였다. 임의의 다른 메시지를 가진 것 즉, 1국면 비가능이나 무한해의 경우는 해가 안나온 항목으로 분류하였다.

 Ⅳ.6 규모화에 관한 연구 실험계획
규모화에 대한 실험 계획은 well-scale의 기준으로서의 역치( threshold )를 설정하는 것과 이렇게 정한 역치기준으로 하여 규모화 방법이 우월해 지는 상황에 대한 지식의 획득을 목적으로 하는데 이는 첫째, 역치 ( 규모화가 잘 됐다라고 측정할 수 있는 기준 )에 대한 평가와 둘째, 여러 가지 규모화 방법의 우월한 상황을 평가하는 실험을 하게 된다. 
 Ⅳ.6.1 입력 자료의 규모에 따른 해의 존재 여부 및 역치 추정
실험 ① 자릿수와 해의 존재여부에 대한 실험
통제변수 : 자릿수의 최대값( 1, 2, 3, 5, 7, 10 )
           최대 자릿수와의 차이( 1, 2, 3, 5, 10)
           제약식수, 변수수(10*20, 20*40, 30*60, 40*80 문제 )
설명변수 : 해의 존재상태(최적해, 무한해, 비가능, Looping, 연산중의 에러)
분석방법 : 비율분석
실험 ② 원행렬의 값과 해의 존재여부에 대한 실험
통제변수 : 행렬계수의 행과 열의 규모화요소(100, 101, 102, 103, 104, 105)
           제약식수( 10, 20, 30, 40, 50) ,변수수 ( 20, 40, 60, 80, 100)
설명변수 : 해의 존재상태(최적해, 무한해, 비가능, Looping, 연산중의 에러)
분석방법 : 비율분석
실험 ③ 역치 추정
통제변수 : 자릿수의 최대값(0, 1, 2, 3, 5)   최대값과의 차이(1, 2, 3, 5, 10)
           제약식수, 변수수( 10*20, 20*40, 30*60, 40*80 문제 )
설명변수 : 해의 존재상태(최적해, 무한해, 비가능, Looping, 연산중의 에러)
분석방법 : 비율분석
실험 ④ 규모화의 효용에 관한 실험 
목 적    : 규모화를 하면 프로그램의 수행과정에서 계산오차가 적어질
            것인가에 대한 판단
통제변수 :  A 행렬의 자릿수의 차이 ( 1, 2, 3, 4, 5, 6, 7, 8, 9)
            제약식수 (20, 25, 30, 35, 40, 45, 50)
관측값   :    Iij - B-1ik*Bkj            
 Ⅳ.6.2 특성치를 작게 해주는 규모화 방법에 대한 실험
  통제변수 : 규모화 방법, 자릿수의 최대값, 최소값, 제약식수, 변수수
  설명변수 : 각각의 특성치
  분석방법 : 순위 
  실험 ①  규모화 방법 
           (No scaling,row scaling,column scaling row-col scaling)
  실험 ②  규모화 요소를 구하는 방법 간 비교
           ( 산술 평균, 기하평균, 최대값)
 Ⅳ.6.3 NETLIB 문제에 대한 실험
규모화 방법
  - 원 데이타의 규모화 방법:  산술평균, 기하평균, 최대값
  분석상황
  1. 규모화를 하지 않을 경우 해가 나온 문제와 해가 안나온 문제의 특성분석
     규모화를 하지 않을 경우 안나온 문제가 규모화시 나온 문제의 분석
     규모화를 했을 경우 안나온 문제가 규모화를 하지 않을 경우 나온 문제         의 분석
  2. 규모화 방법 간 비교 실험
  3. 실험의 특성치
    1) Norm, 분산, 최소비영요소, 최대비영요소
    2) 자릿수의 차이(Difference),분산, 최대자릿수
    3) 측정오차,Cond(A)
    4) 단체수행횟수,해의상태(최적해,무한해,비가해,Looping)
  4. 분석
    1) 단체 수행횟수가 작은 문제 순으로 순위
    2) 측정오차가 작은 문제 순으로 순위
    3) Cond(A)= B * B-1  별 순위

 Ⅴ. 오차분석 결과
오차간의 관계에 대한 실험의 결과는 다음의 [ 표 11 ] 으로 요약할 수 있다.


    [ 표 11 ] 계산오차간의 관계

실험의 결과로 첫째, 기저 역행렬의 계산오차는 기저 역행렬의 계산오차의 대각요소 상수배(약 103)의 직선형태의 관계를 보였으며 이의 상관관계는 상관계수 0.84 정도로 나타났다. 둘째, 원문제의 해의 계산오차는 기저역행렬의 계산오차의 상수배(약 10-4)의 관계에서 기저역행렬의 계산오차의 0.6승 정도의 지수승의 형태를 취하였으며 상관계수는 0.84정도로 나타났다. 셋째, 쌍대문제의 해의 계산오차는 기저역행렬의 계산오차의 상수배(약 10-3)의 관계에서 기저역행렬의 계산오차의 0.7승 정도의 지수승의 형태를 취하였으며 상관계수는 0.87 정도의 높은 값을 나타내었다.  
각각의 관계에서 볼 수 있듯이 기저역행렬의 계산오차간의 관계, 원문제의 해의 계산오차와 기저역행렬의 계산오차, 쌍대문제의 해의 계산오차와 기저역행렬의 계산오차 각각이 상관계수가 높은 것으로 나타났다. 이를 통해 기저역행렬의 대각요소를 통해 기저역행렬의 계산오차를 설명할 수 있으며 기저역행렬의 계산오차로 원문제의 해의 계산오차, 쌍대해의 계산오차등을 설명할 수 있다.
이를 통해 O(N2)의 계산으로 O(N3)의 연산이 소요되는 기저역행렬의 계산오차를 추정할 수 있으며 같은 절차로 원문제의 해의 계산오차와 쌍대해의 계산오차를 추정할 수 있다.
 Ⅵ. 규모화 결과
 Ⅵ.1 입력자료의 규모에 따른 해의 존재여부 및 역치추정결과
 Ⅵ.1.1 자릿수와 해의 존재여부에 대한 실험 결과
실험 결과는 아래의 [ 표 12 ] 와 같다. 이경우의 한 칸에 들어 있는 4개의 숫자는 각각 제약식의 수가 10, 20, 30, 40인 문제의 비율을 나타낸다. 정확한 결과를 얻은 문제의 경우 자릿수의 최대값에 민감한 것으로 나타났다. 즉, 자릿수의 최대값이 10진 3자리 이상 되는 경우의 대부분 해를 구하지 못한 것으로 보여진다. 또한 최대요소와 최소요소의 차가 5 이상된 문제의 경우 해를 발견하기 힘들었다.
                                   비율 : 해가나온문제/실험문제


    [ 표 12 ] 자릿수와 해의 존재여부에 대한 실험 결과

 Ⅵ.1.2 원행렬의 값과 해의 존재여부에 대한 실험 결과
실험의 결과는 [ 표 13 ]의 자릿수의 차이와 표준편차와 해의 존재여부에 대한 실험결과와 [ 표 14 ] 자릿수의 차이와 노옴과 해의 존재여부에 대한 실험 결과에서 볼 수 있듯이 노옴과 표준편차가 고정되어 있을 경우 자릿수의 차이가 커질 수록 해의 존재 비율이 낮아졌다.

 (1) 자릿수의 차이와 표준편차와 해의 존재여부에 대한 실험결과
                                         비율 : 해가나온문제/실험문제


    [ 표 13 ] 자릿수의 차이와 표준편차와 해의 존재여부에 대한 실험 결과

 (2) 자릿수의 차이와 노옴과 해의 존재여부에 대한 실험결과
                                        비율 : 해가나온문제/실험문제


    [ 표 14 ] 자릿수의 차이와 노옴과 해의 존재여부에 대한 실험 결과

 Ⅵ.1.3 역치 추정 실험 결과
역치 추정실험의 결과는 [ 표 15 ] 에서 볼 수 있듯이 정확한 결과를 얻은 문제의 경우 자릿수의 최대값에 민감하였으며, 최대 자릿수가 10 진 3자리가 이상의 문제의 경우는 해를 구할 수 없는 경우가 많은 것으로 보아 수치적인 불안을 초래하는 것으로 보인다. 그리고 최대요소와의 차이가 5 이상인 문제의 경우에 있어서는 표의 다른 열 보다 그 값이 전체적으로 낮은 수치를 갖고 있다. 이는 수치적인 문제를 가질 소지가 많은 것으로 보인다.


                                        비율 : 해가나온문제/실험문제  
 

    [ 표 15 ] 역치 추정 실험 결과
본 실험을 통해 단정도로 프로그램을 수행할 경우 최대자릿수가 10진 3자리인 문제의 경우에 수치적인 문제의 야기가 예상되므로 이에 규모화를 통해 사전에 문제를 줄여주는 방법이 고려되어야 할 것이다.
 Ⅵ.1.4 규모화의 효용에 관한 실험 결과
규모화의 효용에 관한 실험결과는 아래의 회귀식으로 표현 될 수 있다.


이는 규모화를 하여 행렬의 최대요소와 최소요소의 자릿수의 차이를 줄여줄 경우 1 단위의 자릿수를 줄였을 경우 102/3의   Iij - B-1ik*Bkj  /  A  를 줄여줄 수 있을 것으로 기대된다.

 Ⅵ.2  특성치를 작게 해주는 규모화 방법에 대한 실험결과
특성치를 작게 해주는 규모화 방법에 대한 실험의 결과는 첫째, 규모화의 위치와 규모화 요소를 구하는 방법에 따른 실험과 규모화 요소를 구하는 방법간 비교실험으로 나뉜다.
 Ⅵ.2.1 규모화 방법에 대한 실험결과 
실험의 결과는 [ 표 16 ]의  각 규모화 방법의 가해인 문제의 비율에서 볼 수 있듯이 규모화의 경우가 규모화를 하지 않은 경우보다 행의 규모화와 행과 열을 동시에 규모화를 하는 경우가 전체적으로 가해인 문제가 많았으며 특히 행과 열을 동시에 규모화 해주는 방법이 우수하였다.
                           A: 규모화 방법 
           B : 가해/전체문제 비율
예)   : 열만 산술평균으로 규모화한 경우 해의비율 0.64


    [ 표 16 ] 각 규모화방법의 가해인 문제의 비율

특성치를 작게 해 주는 규모화 방법 실험 결과는 아래의 [ 표 17 ]에서 볼 수 있듯이 최대값으로 규모화한 경우가 기저역행렬의 계산오차를 줄여줄 수 있는 것으로 나타났다. 그리고 규모화 전후의 자릿수의 변화가 가장 큰 방법은 열을 기하평균으로 규모화한 경우였다. 그리고 규모화 전후에 노옴과 표준편차의 변화가 가장 큰 방법은 열을 최대값으로 규모화한 방법들이었다. 
                                     번호 :  [ 표16 ] 의 규모화 방법
  

    [ 표 17 ] 특성치를 작게 해 주는 규모화 방법 실험 결과
 Ⅵ.2.2 규모화 요소를 구하는 방법 간 비교실험 결과 
                ( 산술 평균, 기하평균, 최대값 )
동시에 행과 열을 규모화하는 방법으로 각각의 규모화요소를 구하는 방법을 산술평균, 기하평균, 최대값으로 구하는 방법을 나열하면 다음과 같다.


이에 대한 실험 결과는 다음의 [ 표 18 ] 과 같다. 
                               번호 : 위의 규모화 방법

   
    [ 표 18 ] 규모화의 나누어 주는 요소( factor ) 에 따른 실험 결과
규모화의 경우 최대값으로 나누어 주는 경우가 기저 역행렬의 계산오차가 가장 작았다. 규모화 후의 자릿수가 가장 작아지는 방법은 기하평균이며 노옴이 가장 작아지는 방법은 최대값으로 나누어 주는 경우이다. 

 Ⅵ.3 NETLIB 문제에 대한 실험 결과
각 행과 열에서의 자릿수의 차이의 최대값이 단정도의 경우 10진 3자리 (즉 2진 10자리) 이상인 문제와 노옴이 10진 3자리 이상인 문제의 경우는 해를 구할 수 없는 경우가 많았다.( [ 부록 표 3 ], [ 부록 표 4 ] ). 그리고 [ 부록 표 7 ]에서 볼 수 있듯이 이전의 실험에서 가장 좋은 결과를 나타내었던 최대값으로 규모화를 한 경우에 있어 각 행과 열에서 최대 자릿수와 최소자릿수의 차이( cridis ), 그리고 계수행렬의 최대자릿수와 최소자릿수의 차이( diff ), 자릿수의 표준편차, 노옴( GROW7,GROW15 제외 ), 표준편차의 경우 각각의 모두를 줄여줄 수 있었다. 규모화를 통해 단정도로 해를 구할 수 없었던 문제의 해를 구할 수 있었는데 ISRAEL(175*142) 문제의 경우 자릿수의 차이를 2진 17자리에서 12자리로 표준편차를 24에서 6.9로 노옴을 10진 4자리에서 10진 1자리로 줄여줄 수 있었고 CAPRI(272*353)의 경우는 노옴을 10진3자리에서 10진 2자리로 줄여줄 수 있었다.( [ 부록 표 5 ], [ 부록 표 6 ], [부록 표 8 ] ) 그리고 규모화를 하지 않은 것보다 최대값으로 규모화한 결과가 [부록 표 8 ]과 같이 좋은 것으로 나타났다. 
 Ⅶ. 허용오차 설정 결과
 Ⅶ.1 Plot 결과
 Ⅶ.1.1 기저역행렬의 계산오차간의 관계

    [ 그림 1 ] 기저 역행렬의 계산오차간의 관계
 Ⅶ.1.2 (원 문제의 해의 계산오차) /  bbar  과   I - B-1*B  의 관계

    [ 그림 2 ] (원 문제의 해의 계산오차) /  bbar  과   I - B-1*B  의 관계
 Ⅶ.1.3 (쌍대해의 계산오차) /       과   I - B-1*B  의 관계

    [ 그림 3 ] (쌍대해의 계산오차) /       과   I - B-1*B  의 관계
[그림 1]과 앞의 [ 표 11 ]의 경우에서 볼 수 있듯이 기저 역행렬의 계산오차는 기저 역행렬의 계산오차의 대각요소로 완화하여 표현할 수 있다. 또한 원문제의 해와 관련한 계산오차와 쌍대해와 관련한 계산오차의 경우는 각각 [ 그림 2 ]과 [ 그림 3 ] 그리고 앞의 [ 표 11 ]에서 볼 수 있듯이 높은 상관관계를 가지며 이를 통해 허용오차의 설정에 계산오차를 반영할 수 있는 기준으로 마련될 수 있다. 한편 그림에서 볼 수 있듯이 계산오차의 설정을 기저역행렬의 계산오차를 통해 설정할 경우 회귀식에서 많이 벗어난 점에 대한 통제가 필요한데 이에 대한 설정을 위해 절대허용오차의 기준의 마련이 필요할 것으로 생각된다.

 Ⅶ.2 절대 허용오차설정 실험 결과
 절대 허용오차설정 실험 결과는 다음의 [ 표 19 ] 와 같다.
 전체 실험 문제                 : 168문제
공통적으로 최적해 찾아진 문제  : 44 문제
공통적으로 재역산이 잦은 문제  : 69 문제






    [ 표 19 ] 절대 허용오차 실험 결과
실험의 결과로 전체적으로 허용오차를 TOL0의 경우는 10-3 으로 설정하는 경우가 좋았다. 10-2의 경우는 최적해가 찾아진 문제가 많았으나 이는 최적해에 미처 이르지 못하고 최적해의 정보를 제공하는 미성숙한 최적해를 제공하는 경우가 많았다. 한편 10-4으로 설정하는 경우는 잦은 재역산으로 1국면과 2국면을 진동하는 것으로 나타났다. TOLB의 경우는 10-5, 10-6, 10-7의 경우에 있어서 별다른 특이점을 발견하지 못하였다. TOLA, TOLC의 경우는 10-3의 경우가 가장 우월한 것으로 나타났고 그 값이 커졌을 경우 기저역행렬의 계산오차의 누적으로 잦은 재역산이 있는 것으로 나타났다. TOLBI의 경우는 계산기의 정밀도인 10-7으로 설정하는 것이 10-5, 10-6으로 설정하는 것보다 좋은 결과를 나타냈다. 마지막으로 TOL0, OLA, TOLB, TOLC, TOLBI를 ,10-3, 10-3, 10-6, 10-3, 10-7으로 설정하는 경우의 결과가 기존의 방법보다 좋은 것으로 나타났다.  
 Ⅶ.3 기존방법 vs 자동설정방법간 비교 실험 결과
실험의 환경을 기술하면 자동생성 허용오차의 설정방법간 및 기존의 절대허용오차 설정 방법간 비교실험은 실험에서는 프로그램의 안정도의 척도로서 기저역행렬의 대각요소의 계산오차를 10-3으로 설정하였으며 허용오차의 갱신 횟수를 제약식의 수의 1/5회에 한번씩으로 설정하였다. 또한 기저역행렬의 계산오차가 100이 넘을 경우에 그 값을 100으로 설정하였으며 설정이 필요한 TOLA,TOLC의 경우 허용오차가 100 이상이거나 10-4 이하인 경우에 있어서는 계산오차의 누적에 기인한  보고 허용오차를 경험적 수치인 10-4으로 설정하게 하였다. 실험의 분석을 위해 최적해는 올바른 단체수행을 통해 나온 값 중에서 배정도의 정밀도로 같은 문제를 풀에서 나온 해와 비교하여 1%이상의 오차를 갖지 않은 문제를 채택하였고 잦은 재역산은 제약식수의 1/3 이상의 재역산이 불리워진 경우 프로그램의 수행도중에 수치적 문제를 야기한 것으로 보아서 분류하였다. 임의의 다른 메시지를 가진 것 즉,1국면 비가능이나 무한해의 경우는 해가 안나온 항목으로 분류하였다. 실험 결과는 다음 [ 표 20 ] 와 같다.

                              공통적으로 해가 나온 문제   : 17문제
                              공통적으로 해가 안나온 문제 : 48문제
                              공통적으로 해가 틀린 문제   : 15문제


    [ 표 20 ] 자동생성 허용오차의 설정실험 결과
TOLA를 자동설정한 경우  Abar.j * I-B-1*B 로 설정한 경우가 최대자릿수를 0으로 고정한 실험문제의 차원에 대해 절대허용오차의 설정부분보다 40%의 최적해 비율을 보여서 설정방법 중에서 가장 좋은 결과를 보인 것으로 나타났다. 그리고 실험차원 중 고루 분포된 경우는 절대허용오차로의 설정의 경우와 별 차이를 발견하지 못하였으나, 최소자릿수를 0으로 고정한 경우 300%의 최적해 비율이 감소한 것으로 나타났다. 이로부터 TOLA를  Abar.j * I-B-1*B 로 설정함에 있어 계수행렬의 노옴이 민감한 요인임을 알 수 있다. 그리고 TOLC를 설정하는 방법의 경우는  B-1 * C * I-B-1*B 로 설정한 경우를 제외하고는 입력문제의 실험차원에 독립적으로 전체적으로는 절대허용오차 설정방법보다 최적해가 찾아진 경우는 4 ~ 8 % 정도 많았고, 잘못된 해를 제공하는 경우는 7 ~ 16 % 정도 적은 것으로 나타났으며, 최대 자릿수를 0으로 고정한 문제의 경우는 최적해를 제공하는 경우가 10 ~ 20 %정도 많았으며 잘못된 해를 제공하는 경우가 10 %정도 적은 것으로 나타나는 결과를 보였다. 이를 정리하면, TOLA의 설정의 경우는 최대 자릿수를 10진 0자리로 고정했을 경우는  Abar.j * I-B-1*B 는  최적해의 존재, 재역산이 잦지 않은 문제, 해가 나오지 않은 경우모두에 있어 다른 TOLA의 자동설정방법 및 절대허용오차 설정방법보다 우월하였으며,  B-1 * I-B-1*B * A 의 경우와   β * I-B-1*B 의 경우는 정확하게 선회요소의 허용오차를 반영하지 못한 것으로 보인다. 그리고 TOLC의 설정의 경우는 단체승수와 선회열의 노옴과 기저역행렬의 계산오차의 곱으로 표현된    * Abar.j * I-B-1*B  방법과    * I-B-1*B  경우가 허용오차의 설정에 영향을 많이 주는 요인으로 보인다. 
절대 허용오차로 설정된 부분보다 TOLA의  Abar.j * I-B-1*B  방법과 TOLC의    * Abar.j * I-B-1*B  방법과    * I-B-1*B  방법은 각각 TOLA의 설정에 있어서는 기저 역행렬을 계산오차가 작은 상태로 유지하는 것으로 보이며, TOLC의 경우에 있어서는 잘못된 해를 제공하는 경우가 적은 것으로 보아 할인가를 좀 더 잘 표현 하는 것으로 보인다. 즉, 최대 자릿수를 0으로 고정한 경우 TOLA를  Abar.j * I-B-1*B  로 설정하고 TOLC를    * Abar * I-B-1*B 로 설정한 경우의 결과가 좋을 것으로 기대ㄷ다. 
다음의 실험은 위에서 최대자릿수가 작은 문제에 있어 허용오차를 자동설정하는 경우가 좋은 결과를 나타냄에 따라 위의 실험과 같은 환경에 대하여 우선 최대값으로 규모화 한 후 TOLA를  Abar.j * I-B-1*B 로 설정하고 TOLC를    * Abar * I-B-1*B 로 설정한 경우의 실험을 실시한 결과와 위의 절대허용오차로 설정한 결과의 비교한 표이다.


    [ 표 21 ] 절대허용오차와 규모화후 자동생성 허용오차의 설정실험 결과
즉, TOLA를  Abar.j * I-B-1*B 로 설정하고 TOLC를    * Abar * I-B-1*B 로 설정한 경우 최적해의 비율이 87.5%의 증가, 해가 틀린 문제의 경우 58.6%의 증가를 보였으나 잦은 재역산의 경우의 경우가 없었고 대신 잦은 단체 수행를 나타낸 경우가 5회 있었다. 이는 기저 역행렬의 계산오차가 작게 유지 됨을 나타 낸다고 할 수 있다. 이를 통해 허용오차를 자동설정할 경우 해를 구하는 비율이 높았으며 기저 역행렬을 좀 더 조심스럽게 유지할 수 있는 것으로 보이며, 규모화 이후에 TOLA를  Abar.j * I-B-1*B 로 설정하고 TOLC를    * Abar * I-B-1*B 로 설정하는 방법으로 자동설정 할 수 있음을 보인다.
 Ⅶ.4 NETLIB 문제에 대한 실험 결과
자동생성 허용오차로 NETLIB 문제 중 단정도로 해를 구할 수 었었던 다음의  CAPRI(271*353), EGG(489*163), FINNIS(487*614)의 문제의 해를 구할 수 있었는데 CAPRI(271*353), EGG(489*163)의 경우 TOLA를   A * B-1 *(기저 역행렬의 계산오차)로 선정한 결과 해를 얻을 수 있었다. ( [ 부록 표 9 ] 참고 ) 또한 TOLC를 쌍대해의 계산오차로 설정할 경우 CAPRI, FINNIS의 해를 구할 수 있었다. 이에 대해 자세히 살펴보면 CAPRI의 경우 TOLA를 설정한 경우 기저 역행렬의 계산오차가 가장 작아 TOLA를 통해 기저역행렬의 계산오차를 작게 유지할 수 있음을 볼 수 있으며, TOLC를 자동설정한 경우 [ 부록 표 9 ]에서 볼 수 있듯이 문제의 조건수가 10-7에 이르러서 목적함수의 값이 유효자릿수가 첫째 자리 이상을 보장하지 못하는 경우에 있어서도 목적함수의 값이 정확한 결과를 나타내었는데 이는 TOLC가 할인가를 더 잘 표현함을 보여주는 것이다.
 Ⅷ. 결론 및 추후 연구 방향
단체법 프로그램의 안정성 제고를 위해 입력자료를 규모화하는 경험적 방법과 오차를 통제하는 방법에 대한 실험적 고찰을 목적으로 한 본 논문의 결과는 다음과 같다.
첫째, 입력자료의 규모화에서는 최대값방법, 산술평균방법, 기하평균방법의 경험적 규모화 방법에 대해 단체법 프로그램의 안정적 수행을 비교하였다. 실험결과는 행과 열을 동시에 규모화 하는 방법이 행과 열 각각을 규모화하는 경우나 규모화 하지 않는 경우보다 우월하였다. 그리고 규모화 방법으로는 최대값을 이용하는 방법이 우월하였다.
둘째, 오차의 측정에서는 단체법에서의 계산오차 측정방법간의 회귀분석식을 도출하여 오차의 측정을 기저 역행렬의 계산오차 대신에 주대각요소 만을 측정하는 방법으로 완화하여 예측할 수 있었다. 또한 원문제의 해의 계산오차와 쌍대해의 계산오차를 원문제의 입력값인 우변상수와 목적함수의 계수의 노옴과 기저역행렬의 계산오차를 통해서 예측할 수 있었다. 
셋째, 허용오차 설정을 통한 오차의 통제에서는 단체법에서의 오차를 통제하기 위한 허용오차의 설정방법에 대한 비교실험을 하였다. 자동생성 허용오차의 설정에서는 계산오차를 반영하는 자동생성 허용오차 설정방법을 제시하였으며 전산실험 결과 선회행과 쌍대해의 크기 그리고 기저역행렬의 계산오차등을 사용한 허용오차의 자동생성방법이 절대 허용오차 설정방법보다 우수하였다.
본 연구와 관련해서 자동생성 허용오차의 설정에서 기저 역행렬의 자료구조가 변화함에 따른 오차의 측정방법 및 허용오차의 설정방법에 대한 추가적인 연구를 할 필요가 있다.


</tdmsfiletext>
