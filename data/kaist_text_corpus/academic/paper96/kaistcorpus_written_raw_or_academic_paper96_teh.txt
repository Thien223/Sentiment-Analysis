<language> Korean </language>
<textcode> KSC-5601-1988 </textcode>
<process> raw </process>
<version> 2001(or)</version>
<filename> kaistcorpus_written_raw_or_academic_paper96_teh.txt </filename>
<title> 유연생산시스템의 분산운영에 관한 연구 </title>
<author> 정대영 </author>
<date> 1993</date>
<publisher> 서울대학교 </publisher>
<kdc> TM530.961 </kdc>
<tdmsfiletext>
초  록

 본 논문에서는 유연생산시스템의 효율적인 운영을 위한 분산운영구조가 제시되었다. 제안된 분산운영구조의 타당성을 입증하기 위하여 먼저 문헌조사를 바탕으로 제안된 구조와 계층제어구조, 중앙집중제어구조등과의 비교를 수행하였다. 시스템의 운영효율을 높이는 동시에 시스템의 교착상태를 방지하기 위한 물류시스템의 운영알고리즘과 이를 지원하는 확장된 입찰모형을 설계하였다.  일정전개와 통신에 클라이언트-서버모델을 도입함으로써 통신량의 부하에 관련한 문제를 해결할 수 있었으며, 시스템의 실시간 제어가 가능하게 되었다. 또한, 시뮬레이터의 형태에서 생산현장의 운영소프트웨어로 쉽게 변환이 가능하도록 시스템의 구조를 설계하였다. 제안된 분산운영구조는 서울대학교부설 자동화시스템 공동연구소에 구현하였다.


    
 중요어 :  유연생산시스템 제어, 분산제어, 입찰기반 모형 
             


Ⅰ. 서론

 Ⅰ.1 연구의 배경

   무역전쟁이라는 표현처럼 제조업계의 경쟁상황이 복잡하여지고, 다양해진 소비자의 욕구, 임금상승 등의 어려운 여건 속에서 제조업계는 자동화와 기술혁신을 통하여 저가, 고품질의 상품을 생산하기 위하여 노력하고 있다. 제조업계는 그 대처방안의 하나로서 초기설치에 큰 자본과 인력이 소요되는 유연생산시스템을 도입하기 시작하였으며 이를 통하여 이윤을 극대화하고, 비용, 재가공, 파손, 개발기간, 유휴시간등을 줄이면서 품질, 정밀도, 안전도, 생산성 등의 향상을 도모하고 있다[Jain 90]. 

   유연생산시스템(FMS:Flexible Manufacturing System)은 NC공작 기계 기술, 자동 자재 이송 장치, 컴퓨터 및 정보기술이 조합된 새로운 생산 시스템이다. FMS는 다품종 소량 생산의 유연성과 대량 생산 시스템의 효율성을 추구할 수 있도록 설계되었으며, 셋업타임의 감소, 모듈화된 시스템, 줄어든 재공품, 컴퓨터에 의한 통제, 노동력의 감소등이 장점이다[Shaw 88, Shaw 89, Lewis 87, Ro 90, Kusiak 88, Hsieh 91].

   FMS에 관련된 문제들은 크게 설계, 생산계획, 일정전개, 통제의 4가지로 구분될 수 있다. 이 중 설계를 제외한 나머지 3가지의 문제는 FMS의 운영에 관련한 문제이다. 

   FMS에 관련된 문제들을 더욱 세부적으로 구분하면 다음의 [표 1-1]과 같이 정리할 수 있다.

[표 1-1] FMS와 관련한 문제들

   아직도 위의 열거된 모든 문제에 대하여 만족할만한 결과를 얻은 것은 아니나, FMS의 운영에 관련된 문제중 생산계획부분은 정수계획법, 발견적기법, 시뮬레이션, 대기행렬모형등의 적용이 이루어졌다[Grady 86, Grady 87].

   FMS의 설계에 관련한 문제는 대기행렬모형이론, 시뮬레이션, 인공지능, 뉴럴 네트워크, 정수계획법, 발견적기법 등의 적용에 의한 정형화가 많이 진행되었으며, 여러기법의 혼용을 통한 발전을 기대하고 있다[Evans 92].

   FMS의 설치초기에는 적절한 일정계획방안의 부재와 신뢰성이 떨어지는 등의 이유로 유연성, 생산성, 경제적 효율성 등 FMS의 기본적인 목적을 달성하기 힘들며, 안정화에 이르기까지 많은 시간과 노력이 요구된다고 한다[Spur 86]. 실제로 1980년대의 FMS는 사람이 제조과정에서 가장 유능한 기계이며 FMS는 기대했던 것만큼 유연하지 못했다는 비판과 1990년대에는 자율성을 가진 제조시스템으로 FMS가 발전하게 될 것이라는 견해가 있다.

   이와 같이 FMS가 본연의 목적에 미흡한 결과를 보여주고 있는 이유는 FMS의 생산현장통제에 있어서 적절한 방법의 부재가 그 주원인이다. FMS의 일정계획 문제는 기존의 job-shop의 경우와는 달리 물류시스템에 대한 고려와 무인화에 따른 예기치못한 상황에 대한 대처능력등이 요구되고 있다. 또한, 생산현장의 동적인 특성과 실시간에 해를 요구한다는 특성 특히 시스템의 특성(배치, 구성, 생산품의 종류 등)에 따라 결과에 큰 차이를 보이기 때문에 수 많은 연구에도 불구하고 아직까지도 만족할만한 결과를 못 보여주고 있는 것이다.
 Ⅰ.2 연구의 목적

   효율적인 FMS의 운영은 자재, 기계, 정보의 체계적인 관리를 통해서 가능하다. 관리체계의 근본이 되는 운영시스템의 구현을 위하여 그간 여러 통제구조들이 제시되어 왔으며 설치가 이루어지고 있다[Dilts 91]. 생산현장에서 발생하는 고장, 작업의 지연, 불량등의 예기치못한 사건에 대한 효율적인 대처와 시스템의 성장에 따른 확장과 변화의 요구들을 수용하기 위한 통제구조로 발전이 이루어지고 있는 것이 오늘날의 추세이다. 

   FMS와 관련한 기술(통신기술, 분산 DBMS)의 급격한 발전은 지능형 FMC(예; ICCS(Intelligent Cell Control System))의 등장을 가능하게 하고 있으며, 지능셀을 바탕으로 한 분산형 통제 구조가 가능한 대안으로 떠오르고 있다[Grady 86, Grady 87]. CIM이라는 통합된 제조환경에서도 정보 처리를 분산화하고자 하는 요구가 1990년대에 대두되었다. 분산화한 정보 처리는 통신비용의 감소, 컴퓨터의 다운사이징, 분산된 사용자가 컴퓨터와 자료에 대한 통제권한을 가질 수 있다는 잇점이 있다[Cowdrick 91].

   분산시스템의 구현에 있어서의 문제는 통신, 분산과 협조, 정보관리의 3가지로 나뉘어진다[Weber 89].

   80년대 말부터는 FMS에 관련한 기술의 혁신과 제품가격의 하락이 있었다. 컴퓨터, 통신장비의 가격하락을 비롯하여 86년부터 공구의 상태를 기록할수 있도록 공구에 부착할 수 있는 IC칩 등이 상품화됨으로써 분산통제시스템의 구현에 필요한 분위기가 무르익었다[Upton 91].

   분산 인공지능분야의 발전에 따라 분산과 협조 분야의 문제에 대한 접근이 활발히 이루어지고 있다. 상위 단계의 협조 프로토콜의 설계를 비롯하여 수리적 정형화의 노력들이 응용단계에 이르고 있다[Duffie 92, Parunak 87, Shaw 88, Shaw 89, Smith 80, Tilley 92, Tsukada 93, 박남규 93].  
 
   분산통제 구조를 지원하는 분산 데이타베이스/지식베이스의 모델링도 이루어지고 있다[Weber 89].

   본 연구는 다음과 같은 순서로 이루어졌다.

   1) FMS의 통제구조에 대한 분석
   2) 생산현장의 통제에 대한 기존 연구 고찰
   3) 분산 생산현장 통제 방법에 대한 기존 연구 고찰
   4) FMS의 운영을 위한 Agent의 종류와 기능 설계
   5) 확장된 입찰모형의 제시
   6) AGV의 운영 알고리듬 설계
   7) 시뮬레이션 소프트웨어의 구조 설계 
   8) 시뮬레이션 소프트웨어의 생산현장제어 시스템으로의 전환
   9) 서울대 유연생산시스템의 소개와 제안된 기법의 구현
  10) 제안된 분산운영안의 시뮬레이션을 이용한 효율성 분석  


Ⅱ. 연구현황

 Ⅱ.1 FMS의 통제구조

   일반적으로 통제구조란 통제요소로부터 통제시스템을 구성하는 데 있어서 따르는 표준을 일컫는다[Dilts 91]. 자동화된 제조시스템의 역할은 물류 처리와 원자재의 가공 등을 명령하고 조정하는 것이다. 통제시스템은 이러한 과정속에서 많은 의사 결정과정을 거치게 된다. FMS의 통제구조는 정보의 소재와 통제명령의 흐름에 따라 분류할 수 있다. 그러나, 통제구조 자체에 대한 연구도 드물었고, 용어 또한 통일이 이루어지지 않았다. 
  
  Baldwin은 통제 구조를 다음과 같이 5단계로 구분하였다.
   。 Hard Automation
   。 Hierarchical System
   。 Flexible and Cellular System
   。 Virtual Manufacturing System
   。 Autonomous Manufacturing System

   Komoda이 제안한 분산된 공장자동화 시스템은 유연한 가공셀 콘트롤러와 이들을 이어주는 LAN에 의하여 자율성을 가진 FMC를 구성하는 것이지만, 이들이 제안한 통제구조는 분산시스템이라기보다는 계층형구조를 따르고 있다[Komoda 84].

   Dilts에 의하면 현재까지 제안 및 구현이 이루어진 통제구조로는 중앙집중형 통제구조, 계층형 통제구조 그리고 분산형 통제구조가 있다[Dilts 91]. 
   
   
 Dilts는 통제구조가 갖추어야하는 요소로서 다음의 6가지를 들었다.  
   。 신뢰성 
   。 Fault-tolerance 
   。 Modifiability 
   。 Extendability 
   。 Reconfigurability 
   。 Adaptability 

(1) 중앙집중형 통제구조
 
[그림 2-1] 중앙 집중형 통제 구조

   중앙집중형 통제구조에서는 시스템 전체의 상황을 기록하는 중앙 데이타베이스를 유지하고 모든 계획 및 통제를 중앙 컴퓨터로 수행한다. 중앙집중형 통제구조란 지능이 없는 기계 콘트롤러가 제조환경내에 흩어져 있으며 공장과 셀 단계에서의 의사결정의 책임이 모두 한 곳으로 집중되는 것을 말한다. 이 경우에 있어서 기계 콘트롤러는 중앙의 통제장치로부터 명령을 받아서 작업을 수행하게 되며, 중앙의 통제장치는 현장의 센서나 기계 콘트롤러로부터 의사결정에 필요한 모니터링 정보를 얻는다[Dilts 91].

(2) 계층형 통제구조


[그림 2-2] 순수 계층형 통제 구조

   계층형 통제구조는 통제가 피라미드형태처럼 다단계로 이루어진다는 특징을 가지고 있다. 계층형 통제구조에서는 각 단계별로 고유한 목적과 기능을 갖는다. 슬레이브(slave) 단계의 모든 활동은 마스터(master) 단계로부터 통제를 받게 되는 형태를 지닌다. 이러한 구조의 최상위에는 전체적 목표와 전략을 결정하는 컴퓨터가 있고, 그 밑에 피라미드형태를 갖는 통제 요소가 위치하게 된다. 의사결정은 중앙집중식으로 이루어지고, 제어와 모니터링은 분산화되어 처리된다[Jones 90, Upton 91, Rana 88].

   계층형 통제구조는 다음의 3가지 설계 기준을 따른다[Jones 90].
   。 복잡도를 줄이고, 책임과 권한을 제한하기 위해서 단계를 둔다.
   。 각 단계는 독립된 계획기간을 가지며, 하위단계일수록 줄어든다.
   。 통제는 가능한한 하위 단계에서 이루어진다.

  현재까지의 대부분의 제조시스템의 통제구조는 계층형 통제구조를 따랐다. 이러한 구조를 갖는 대표적인 두가지 형태는 다음과 같다[Dilts 91, Upton 91].

  。 NIST(National Institute of Standards and Technology)의
    AMRF(Automated Manufacturing Research Facility).
  。 CAM-I(Computer Integrated Manufacturing-International)의
    AFMCS(Advanced Factory Management and Control Systems).

(3) 분산 통제 구조

[그림 2-3] 변형된 계층형 통제구조

  근거리통신망(LAN) 기술의 발전과 저가 컴퓨터의 보급에 힘입어 변형된 계층형 통제 시스템이 출현하게 되었다. 하위 단계의 컨트롤러는 보다 더 지능화되었으며, 자율성의 신장에 따라 상위 요소가 고장나는 경우에도 어느정도의 기간동안 하위 요소가 정상적으로 동작할 수도 있게 되었다. 이러한 형태가 분산 통제시스템과 계층적 통제 시스템 중간단계인 변형된 계층형 통제구조이다 [Dilts 91].

   이와 같은 분산시스템하에서 생산현장통제의 장점으로는 의사결정이 분산화된다는 것이며, 단점으로는 근시안적인 결정을 할 수밖에 없다는 것이다. 고장과 변화가 자주 발생하는 아주 큰 제조 시스템에는 분산통제방법만이 통제의 수단이 된다[Upton 91].

   Jones가 제안한 다층다단계(Multi-layer Multi-level)구조는 계층형구조와 분산형구조의 중간쯤에 있는 구조로서, 의사결정과 통제를 분산화시켰고, 제한된 협상이 이루어지는 형태를 제안하고 있다[Jones 90]. 


[그림 2-4] 분산형 통제 구조 

   계층형 통제구조에서 마스터/슬레이브의 관계를 없애고, 상호간에 통신을 수행하는 자율적인 객체들로 이루어진 구조가 분산형 통제구조이다. 분산형 통제구조는 통신 네트워크 기술의 발전과 분산형 데이타베이스 시스템의 발전에 바탕을 두고 있다. 의사결정은 자율성을 가진 객체들(의사결정능력, 정보유지능력을 보유함.)의 협조로 전체적인 의사 결정을 하는 형태를 띄고 있다[Jones 90, Ranky 88, Duffie 92]. 

   Baldwin은 자율적 제조 시스템의 중요성을 강조하였는데, 제조과정을 객체(공구, 부품, 조립품, 기계등)의 협조에 대한 제어로 파악하고, 각 객체는 지능과 제어능력을 가진것으로 보았다. 또한, 자율적인 제조 시스템의 발전 3단계 모형을 제시하였다.
   。 1단계 : 각 객체가 각각 구별되며 식별 마킹을 가진다.
   。 2단계 : 기계가 객체의 자료를 읽고 쓰는 능력을 가진다.
             (객체는 식별 마킹과 자료를 동반한다.)
   。 3단계 : 모든 객체는 식별 마킹, 자료, 지능과 목적을 가진다.       

  Rana와 Taneja는 제조환경의 분산제어를 위한 선수 요건을 4가지로 정리하였다[Rana 88]. 
  
  。 실시간의 분산처리 알고리즘의 개발
  。 효율적인 협조 프로토콜의 디자인
  。 실시간 분산처리 프로그램의 기술(記述)과 검증방법의 개발
  。 분산처리 프로그램의 보수유지와 에러수정방법의 개발

  분산 제어구조는 시스템이 다양한 고장발생에도 실시간으로 대처하여 정상적으로 작동하기에 적합하다[Kim 93].
  
(4) 통제구조의 장。단점 분석
  
  Shaw는 통제구조, 일정계획, 일정전개, 예기치 못한 상황에의 대처, 데이타베이스, 동적 정보의 관리의 측면에서 중앙집중형 통제구조와 분산형 통제구조의 차이를 비교하였다. 이러한 비교속에서 분산형 통제구조의 우월성을 정성적으로 나타내었다[Shaw 88, Shaw 89].

  Dilts는 중앙집중형, 계층형, 변형된 계층형, 분산형 통제구조에 대하여 각각의 구현사례와 이를 바탕으로 한 장단점을 비교하였다[Dilts 91].

  분산형 통제구조가 계층형 통제구조에 비하여 가지는 장점으로는 생산현장의 변화에 즉각적으로 대응할 수 있으며, 새로운 셀의 추가나 삭제가 용이하고, 자원의 효율적인 활용이 가능하다는 연구도 있다[Rana 88, Merabet 86].
   
  O'Hare는 분산인공지능을 이용한 CIMS의 설계와 운영을 연구한 결과 다음과 같은 장점을 발견하였다.
  。분야별로 전문가 시스템을 활용한 agent를 적용이 가능하다.
  。성능(performance)의 향상이 기대된다.
  。모듈화와 계층적인 기능분해에 따른 설계가 가능하다.
  。분산시스템의 장점인 신뢰도의 증가와 robustness가 보장된다.
  。top-down, bottom-up 어느쪽으로도 설계가 용이하다.


  여러가지 통제구조들의 생산현장의 통제측면에서의 장。단점을 요약하면 다음의 [표 2-1]과 같다.

[표 2-1] 생산현장 통제측면에서의 통제구조의 장。단점 비교

 Ⅱ.2 FMS의 현장통제기법

   일정계획문제의 해결에 있어서 최적화이론은 발견적기법의 개발에 대한 이론적인 기반이 되기도 하였지만, 실제적인 문제의 접근에 많은 한계를 나타내었다. 수리적모형은 제조환경의 동적인 특성을 받아들이지 못했으며, 제조현장의 많은 제약조건을 무시하여 실제적인 적용에는 한계가 있다. 우선순위규칙이 널리 활용되고 있지만 제조환경의 변화에 민감하게 반응하며, 어떤 하나의 우선순위규칙이 계획기간동안 다른 규칙보다 항상 우수한 결과를 보이지도 못하는 단점이 있다[Kim 93, 문 장석 93].

   일정계획에 대한 접근방법은 크게 off-line 일정계획방법과 on-line 일정계획방법으로 나눌 수 있으며, on-line 일정계획방법은 적용이론에 따라서 더 세분화될 수 있다.

   이중 off-line 일정계획방법은 일정한 계획기간의 시작점에 일정계획을 수립한 후에 그 순서와 정해진 시간에 따라 작업을 수행해가는 방법이다. 수리적 모델의 적용이나 발견적 기법을 이용함으로써 계획기간 전체를 고려한 효율적인 해를 구할 수 있는 장점이 있으나, 예기치 못한 사건의 발생(기계의 고장, 작업자의 부재, 공구 파손, 불량의 발생, 원자재의 부족, 긴급작업의 발생등)의 경우에는 재일정계획을 하여야 한다. 이에 소요되는 시간이 길어질수록 현장의 유휴와 그에 따른 비용이 소요되며, 생산현장의 동적인 특성과 실시간제어의 요구로 적용에 한계를 가지고 있다.
   Kusiak은 최적화기법에 의하여 off-line으로 목표 일정계획을 생성하는 시스템에 있어서 현장에서 진행중인 상황과 목표 일정계획간의 간격을 최소화하는 전문가시스템(규칙 기반 시스템)의 활용방안에 대해 원리와 간단한 예를 제시한바 있다[Kusiak 88]. 
 
   On-line 일정계획방법에 대한 연구를 중심으로 기존의 연구를 고찰하여보기로 하자.

   Harmonosky는 실시간 일정계획을 다음과 같이 분류하였다.
   。 일반적인 접근
   。 인공지능기법의 결합
   。 시뮬레이션의 활용
   。 시뮬레이션과 인공지능의 결합

   Gupta는 실시간 일정계획의 분야를 우선순위규칙, 발견적기법/알고리즘의 두 분야로 나누었으며, 우선순위규칙분야의 경우 정적 규칙, 동적 규칙으로 구분하고, 전체 정보의 반영인지, 부분 정보의 반영인지를 세분화하고 36개의 순위규칙을 분석하였고, 기존의 연구분야의 흐름과 적용현황을 통계적으로 분석하였다[Gupta 89].

   Doulgeri는 FMS의 일정계획은 치구, 공구, 물류운반시스템을 모두 고려하여 이루어져야하기때문에 기존의 job-shop에 적용되었던 일정계획방법을 바로 이용할 수도 없으며, 상대적으로 복잡도가 매우 큼을 밝혔으며, 대안으로 시뮬레이션에 의한 방법을 제시하였다[Doulgeri 87].
   
   Ranky는 FMS의 실시간 운영에 대한 광범위한 조사를 수행하였다. FMS의 운영에 필요한 요소들을 제시하였고, 전문가시스템(규칙기반 시스템)을 도입한 실시간 생산현장 통제에 관한 연구를 진행하였다. FMS에의 작업투입순서결정과 일정계획에 필요한 데이타베이스화일과의 관계 및 그 결과로 나와야 하는 것에 대하여 정의하고, 위의 문제를 푸는 알고리즘, 데이타들과의 연관성 그리고 구현사례를 제시하였다[Ranky 88].

   Chandra는 낙관적인 추론에 근거한 지능형 dispatching 전략을 제시하였다. 기존의 dispatching 규칙이 갖는 단점을 다음과 같이 분석하였다.
   。 하나의 목적만을 맹목적으로 따른다.
   。 현장의 상황에 따른 목적의 변화를 허용하지 않는다.
   。 현 상태에서 가장 중요한 점만을 파악하고 선택한 대안으로는 미래의
      예측이 불가능하다.
   。 대체공정의 유연성이 있는 시스템에서는 효율성이 떨어진다.
이의 극복방안으로 제품의 진행상태, 자원의 활용률, 의사결정과정에 필요한 정보(혼잡도, 부품의 기계에 대한 선호도, 납기일, 현재의 운영 목적)를 유추하여 dispatching 규칙을 선정하도록 하였다. 또한, Chandra는 시뮬레이션을 통하여 그가 제안한 방법이 기존의 규칙들보다 우수함을 보였다[Chandra 91].

   시뮬레이션과 전문가시스템(규칙 기반 시스템, 신경망 이론)을 응용하여 실시간 일정계획에 활용한 연구로는 MPECS(Multi-pass Expert Control System)이 있다. 현장의 상황과 지식베이스에 근거한 dispatching 규칙의 대안을 생성하고, 이 대안을 시뮬레이션하고, 결과를 분석한 후 결과 규칙을 수정하고 생산현장의 통제에 적용하는 방법을 제시하였다[Wu 88].

   Iwata는 전문가시스템(규칙기반시스템)을 도입하여 예기치못한 고장이 발생하는 시스템의 통제에 관한 연구를 하였다. 생산현장의 상황을 모니터링하고, 이상사건이 발생하면 시스템에 이익이 되는지 해가 되는지를 파악한 후, 시스템의 상태에 따라 적절한 통제를 가할 수 있도록 규칙을 설계하였다. 데이타베이스와 규칙의 결합에 대한 연구도 수행되었다[Iwata 88].

   기존의 통제안들은 대부분 하나의 목적에 의한 dispatching 규칙의 선정 및 통제였다. Ro의 연구에서는 여러가지 운영상의 목적을 동시에 만족시키는 규칙의 개발, 예기치못한 이상사건에 대한 처리와 AGV의 활용을 위한 규칙을 제안하였다. 이 연구의 특징은 최초로 다수의 운영상의 목적을 동시에 고려하였다는데 있으며, 선형계획법에 의한 해를 바탕으로한 규칙을 제안하였다는 점에서 그 의의가 있다[Ro 90]. 

   Rogers는 on-line 시뮬레이션의 실시간 일정계획에의 적용의 장,단점에 대한 분석을 하였고, 생산현장의 통제, 구매/판매부서, MRP와의 연관에 대한 분석과 추후 연구의 방향을 제시하였다[Rogers 91].

   Jain은 전문가시스템을 이용한 실시간 일정계획을 연구하였다. 시뮬레이션과 전문가시스템에 사용되는 단어와 개념의 유사성을 밝히고, 사용자와 현장통제 시스템사이의 전문가시스템의 역할을 밝혔다[Jain 90].

   Sukho Kang과 Jintae Jang은 고장이 빈번한 유연생산/조립시스템의 on-line 통제방안에 관한 연구를 수행하였다. 시스템을 구성하는 기계의 상태벡터와 조립도(assemblability)라는 개념을 제안하였다. 조립도는 3개의 그룹으로 나누어지며 각각의 문제에 LP를 적용하였다[Kang 93].


 Ⅱ.3 FMS의 분산운영

   FMS의 분산운영에 관한 연구는 계층형 시스템에 대한 연구에 비하여 아직은 상당히 적은 편이다. 분산운영에 관한 연구를 크게 5가지 정도로 나누어 보았다. 그 유형을 분류하면 다음의 [표 2-2]와 같다.   

[표 2-2] 분산운영시스템에 대한 연구 분류

   위의 연구들을 유형별로 살펴보고, 각각의 연구들의 특징을 살펴보자.

   Smith의 협상 프로토콜을 이용한 제조시스템의 분산 운영에 관해서는 Shaw, Parunak, 박 남규의 연구가 있다.  

   Shaw는 CIM의 제조환경에서의 network환경과 분산 데이타베이스를 이용하여 입찰모형을 도입하여 생산현장의 통제를 실행하였다. 입찰모형의 모델링과 실행에 필요한 finite state control 언어를 제시하기 위하여 페트리네트 모형과 규칙기반 추론 시스템을 통합하기도 하였다. 또한, 우선순위 규칙중 SPT와 입찰에 근거한 EFT(기대 최소 종료시간), SPT를 시뮬레이션을 통해 비교하여 입찰에 근거한 EFT모형이 우수함을 입증하였다. 그러나, AGV와 같은 물류시스템에 대한 언급이 없었다[Shaw 88, Shaw 89].
   
   Parunak은 YAMS(Yet Another Manufacturing System)이라는 모형공장을 이용하여 협상모형을 구현하여 보았다. 부품을 가공할 수 있는 셀들의 분포를 specialization이라는 척도로 표현하여 audience restriction을 적용하였으며, CASCADE라는 물류처리시스템을 구현하였다. 그러나, 구현의 결과에 대한 언급은 없었다[Parunak 87].

   박남규는 생산통제현장의 congestion, type등에 따라 전문가시스템에 의해 선정된 rule에 근거한 협상모형을 제시하였다. 협상과정에는 기계 agent, 부품 agent와 협상에 따른 통신시스템에의 과부하를 고려하여 CFA(communication forwarding agent)의 3종류의 agent가 참여하도록 하였다. 또한, 재 협상모델을 적용함으로써 기존의 협상모형보다 시뮬레이션 결과가 좋게 나왔으며 협상과정을 모두 일반화된 확률적 페트리넷으로 기술하여 교착상태를 피할 수 있는 구조를 제시하였다[박남규 93].

   Kevin은 경매(auction)모형을 기본으로 한 컴퓨팅환경에서의 통신량에 대한 실험을 수행하였다. 그러나, Smith의 협상 넷에 필요한 기본정보 외에 가공형상의 데이타인 CSG(contructive solid geometry)를 포함시켜 상대적으로 기본적인 메시지의 15배에서 380배의 크기의 메시지를 가정함으로써 분산시스템 운영에 필요한 메시지를 과대평가하였다. 그러나, 분산 시스템의 통신량에 대한 구체적인 접근으로서의 가치는 크다고 하겠다[Kevin 92].
    
   작업할당모형을 정수계획법으로 모형화한 연구로는 문장석, Kap-Hwan Kim의 연구가 있다. 이들의 연구는 부품과 기계의 관계를 시장과 같은 상황에서의 경매라는 상황으로 보고, 수리적으로 모형화한 것에 그 의의가 있다. 그러나, 모형으로서의 가치는 있으나 현장 통제라는 본연의 목적에서 본다면 분산 제어구조가 아닌 중앙 집중형 통제구조를 갖게 되는 단점을 지니고 있으며, 물류시스템에 대한 고려가 생략되어 있는 한계를 지니고 있다[문장석 93, Kim 93].
  
   문장석의 연구는 제조 현장의 객체를 부품, 기계 그리고 입찰 조정 agent의 3가지로 분류하였다. 부품으로부터의 작업요구, 기계로부터의 작업완료의 사건이 발생하는 경우 부품과 기계로부터 선호도(measure of preference)를 받아서 입찰조정 agent로 하여금 상호선호도가 가장 큰 짝을 선정하도록 하였다. 이때 상호 선호도의 가중치를 두도록 하여, 전문가 시스템의 활용의 여지를 남겨두었다[문장석 93].
 
   Kim의 연구는 일정한 주기별로 작업과 기계를 짝지어주는 방법을 제시하였는데, 기계의 수와 작업의 수가 같도록 가정한 단점이 있으나, 경제학의 수리적 모델을 도입하여 응용하였다는데 그 의의가 있다[Kim 93].

   Upton은 경매모형을 기본으로 제조시스템에 대기행렬모형(queueing network)을 이용한 분석을 시도하였다. 모형화한 결과 분리과정(splitting process)이 마르코비안 프로세스를 따르지 않음을 밝혔고 많은 시뮬레이션을 통하여 그들의 모델에서 얻을 수 있는 직관과 일치 또는 불일치 하는 부분을 밝혔다. 또한 분산운영시스템의 구현에 필요한 process plan, 통신, on-pallet processing등을 언급하였다. 그들의 연구는 분산시스템의 운영을 수리적으로 모형화하고 분석하였다는 데 의의가 있다[Upton 91].

   Hare는 CIMS에의 분산인공지능의 도입에 관한 연구를 수행하였다. HEARSAY, Actor Model, Contract Net, MACE등 분산인공지능의 응용사례에 대한 문헌조사와 CIMS에의 적용시의 이점에 대한 분석을 하였다[O'Hare 90].

   Lewis는 3가지의 protocol을 이용하여 CIM의 생산현장통제를 구현한 자료흐름모형(data flow control)을 개발하였고, KANBAN과 유사한 기능을 갖는 변형된 FIFO 대기행렬에 의한 통제안을 제시하였다. 통신환경을 최대한 활용하였고, 기계, 공구, 물류운반시스템을 고려하였다. 시뮬레이션의 수행결과 기존의 통제방법보다 효율성이 우수함을 보였다[Lewis 87].

   Rana와 Taneja는 분산형 통제구조하의 셀 컨트롤러의 기능을 공장, 셀, 기계의 3가지 부류로 구분하였다. 중앙집중식으로 처리되던 최적의 프로세스 플랜 선정문제를 분산시스템하에서 수리적으로 모형화하였으며 메시지교환에 의한 AGV의 점유방안을 제시하였다[Rana 88].

   이 외에도 조립셀처럼 다수의 로보트에 의하여 작업의 처리가 이루어지는 상황에서 로보트간의 협조작업이 필요할 경우, 협상에 의한 통제와 게임이론에 의한 통제에 관한 연구가 있었다[Rajan 90, Nof 89].

  Rajan, Nof의 연구에서는 협조가 필요한 작업을 3가지의 형태로 구분하고, 이를 게임이론을 이용하여 수리적으로 모형화하였으며 분산된 의사결정의 방법을 도입하였다. 이들의 연구는 분산의 단위(granularity)를 한 단계 더 작게 하였다는 것과 게임이론의 적용에 그 의의가 있다[Rajan 90, Nof 89].


Ⅲ. 분산 운영 방법의 설계

 Ⅲ.1 확장된 입찰모형 

   본 논문에서 제안하는 분산 운영방법은 기존의 협상모형에 대한 연구를 바탕으로 하여 이루어졌다[Smith 80, Parunak 87, Shaw 88, Shaw 89, 박남규 93]. 기존의 연구에서처럼 협상모형은 각 agent가 상대방과 메시지를 교환하는 4단계가 그 바탕을 이루고 있다. 이 방법은 분산인공지능분야에서 공통적으로 받아들여지고 있는 상위 레벨의 협상 프로토콜을 이용한 것이다[Martial 93].

   분산통제 시스템의 구현에는 분산운영체제, 분산프로그래밍, 전문가시스템, 분산인공지능, 분산데이타베이스, 실시간계산 등의 분야의 일체화가 필요하다. 구현된 소프트웨어 시스템은 다음의 요건을 갖추어야 한다[Rana 88].
   。 동시성(concurrency)
   。 구조화(structuring)
   。 협조(co-operation)
   。 재구성능력과 적응력(reconfigurability, adaptability)
   。 실시간처리 성능(real-time performance)
 
   제안하는 운영방법은 위의 요건을 만족시키면서, 기존의 입찰모형에서 제외되었던 물류시스템(AGV, AS/RS)을 포함시킨 점에서 그 차이가 있다. 분산 운영방법에 있어서는 자율성을 지닌 셀을 기반으로 함으로, 메시지의 정의와 메시지의 교환하는 과정과정에서의 약속을 요구사항으로 한다. 따라서, 부품의 셀에 대한 배정만을 협상과정에서 결정하며, 그 이동은 AGV에 의하여 자율적으로 처리된다. 각 셀의 운영방법은 Ⅲ.2절에, AGV의 운영방법은 Ⅲ.3절에 기술하였다.
     


  (1) 용어 정의

   FMS의 분산통제방법에 나오는 용어를 정의하기로 한다.

 (정의 1) Agent
부품을 가공하거나 저장할 수 있는 능력을 가진 하나 이상의 물리적 자원을 관장하는 "프로세스(process)"이다. 입찰에 참여할때의 자격에 따라   manager 또는 bidder라고 불리운다.

 (정의 2) Manager
부품의 가공이 완료된 셀을 관장하는 agent는 가공 완료를 알리는 메시지를 통신망(LAN)을 통해 외부로 알린다. 부품의 배정이 이루어지기까지 "입찰을 주관"하는 역할을 한다.

 (정의 3) Bidder
Manager가 보낸 가공 완료메시지를 받은 agent를 bidder라고 하며, manager에게 기대가공완료시간, 버퍼 상태등의 "정보(bid)"를 주게 된다. 이 후 manager의 선정에 의하여 입찰의 승자 또는 패자가 된다.

 (정의 4) Audience Restriction
Manager가 가공 완료메시지를 보내는 agent는 원칙상으로 분산 운영시스템내의 모든 agent이지만 각 agent가 갖는 부품의 공정도를 바탕으로 메시지를 보내는 곳을 제한하게 된다. 이를 통해 통신망에 걸리는 부하를 줄일 수 있고, 입찰에 소요되는 시간을 줄일 수 있다. 

 (정의 5) Message(메시지)
Manager와 bidder간에 이루어지는 입찰과정과 AGV의 배정과 이동시에 오가는 정보 또는 명령을 message라고 한다. "메시지(message)"의 종류는 다음의 [표 3-1]과 같다.


   [표 3-1] 분산 운영에 사용되는 메시지들(message)
 
  (2) 확장된 입찰모형을 이용한 분산 통제방법

   확장된 입찰모형은 아래와 같이 작업의 배정과정을 4단계로 행하며, AGV의 이동 통제를 자율적 AGV운영시스템을 바탕으로 2단계에 행한다.
   。 작업 종료를 알림 (TA)
   。 입찰에 붙임 (BD)
   。 입찰자중 최상의 입찰자를 찾고, 승자/패자에게 통고함 (WN/LS)
   。 위의 통고를 확인함 (VR)

① 작업 종료를 알림 

   작업의 종료가 이루어지면 그 셀을 담당하는 agent는 외부에 작업의 종료를 알린다[그림 3-1]. 정상적으로 작업이 종료된 경우에 부품별로의 공정정보에 의하여 다음 작업이 이루어질수 있는 셀을 담당하는 agent에게로 작업종료 메시지를 보낸다. 만일 작업의 종료가 정상적으로 이루어지지 않은 경우(예; 불량)에는 FMS의 운영정책을 반영하여(예; 셋다운 셀로 보낸다.) 해당 셀로 작업종료를 알린다.







[그림 3-1] 작업종료 메시지를 보냄



 ② 입찰을 함

   작업종료 메시지를 받은 agent는 두 가지의 정보를 manager에게 넘겨준다[그림 3-2].


[그림 3-2] 입찰가의 계산과 경매


   예상가공종료시간(EFTk; Expected Finish Time at Cell k), 버퍼상태벡터(BSVk;Buffer Status Vector at Cell k)를 넘겨준다. EFTk와 BSVk는 다음과 같이 구해진다.
   EFTk = 가공중인 부품의 남은 시간(RPT) 
         + 버퍼에 대기중인 부품의 예상 가공소요시간(QPT)
         + 경매에 올려진 부품을 가공하는데 소요되는 시간(BPT).
   BSVk = ( sk1, sk2, sk3 ... skp ) 
            skp ∈ BSS,  p=1...P
            단, BSS는 버퍼의 상태 집합(Buffer Status Set)이다. 
            단, skp는 k기계 또는 셀의 버퍼 p의 상태를 나타낸다.

  EFTk의 계산에는 입찰에 올려진 부품의 긴급성에 따라 QPT가 일부분만 반영될 수 있으며, BPT를 더한 이유는 각 셀별로의 가공기계의 성능차이를 모두 고려하기 위한 것이다. BSVk를 보내는 이유는 시스템이 교착상태(deadlock)에 빠지는 것을 막기위한것이다.  

 버퍼가 가질수 있는 상태는 다음의 [표 3-2]와 같다.

[표 3-2] 각 셀의 버퍼의 가능 상태(status)

 
  버퍼의 상태는 위의 8가지의 상태내에서 이루어진다. 입찰의 종료시기에 manager가 입찰에 붙인 part를 보관하고 있는 버퍼는 Full CTR-by-AGV로서 이동이 계약되어 있음을 뜻하며, bidder들 중에서 part를 계약한 스테이션의 한 버퍼는 Empty CTR-by-AGV로 part의 운반이 계약되었음을 나타내게 된다. 이러한 방법으로 AGV에 의한 물류흐름의 교착상태를 피할 수 있게 된다. 셀의 내부에서 일어날 수 있는 교착 상태 중 파트의 이동에 관련한 것으로는 로보트에 의한 part의 가공장치로의 이동 등이 있다. 이 경우에도 최소한 한 버퍼를 CTR-by-CELL로 상태변화시킴으로서 교착을 막을 수 있게 된다. 

  다음의 [그림 3-3]은 일반적인 buffer의 상태변화를 나타낸다. 어둡게 표시된 때가 버퍼가 실제로 비어있는 경우이며, 중간 상태는 임시적인 상태를 의미하며, 흰 부분은 버퍼가 차 있음을 뜻한다. 이와 같은 버퍼의 상태변화를 통한 교착상태의 방지는 다음 절에서 더 상세히 설명하기로 한다.
















[그림 3-3] 버퍼의 상태변화도
③ 입찰의 평가와 결과 통고

   입찰을 주최한 manager는 일정시간이 경과한 후에 BD를 모두 모은 후, 최상의 BD를 선정하는 작업을 한다. 이 작업에는 부품의 시스템내 체류시간을 줄이는 동시에 시스템의 교착상태를 방지하는 알고리즘이 사용된다. 이 알고리즘은 아래와 같다.


OBDSA(Optimal BD Selection Algorithm)
 Input  : BSV(Buffer Status Vector)s, EFT(Expected Finish Time)s.
 Output : Optimal bidder index k. (0 is AR/RS)
   
 Step 1   Make a candidate set or CS.
          CS = {k : k is the index of the arrived BSVk }
 Step 2   For each k ∈ CS, do next process
          if ∃ skp ≠ E  for any p in BSVk,
          delete k from CS. 
 Step 3   If CS is null set, return 0. 
          If CS is not empty,
          return k of which EFTk = Min { EFTk } for all k ∈ CS    
                                      k



   이와 같은 과정에서 선정된 BD를 낸 bidder에게 WN 메시지를, 다른 bidder에게는 LS 메시지를 통고한다[그림 3-4].

 

[그림 3-4] 입찰 결과의 통보
 ④ 통고를 확인함

   입찰에서의 결과를 받은 bidder는 자신의 BD의 결과를 확인한 후에 manager에게도 확인함으로써 부품의 배정을 위한 입찰은 완료된다[그림 3-5].


[그림 3-5] 입찰 결과의 확인

   이와 같은 4단계의 메시지교환에 의하여 입찰은 이루어진다. 입찰도중 해당 입찰이 잘못 진행되고 있을 때는 AB메시지를 이용하여 당시의 입찰을 중지시키고 다시 입찰을 시작한다. 이러한 상황은 다음과 같은 이유로 발생가능하다.

   。 통신상의 메시지에 잡음이 섞이는 경우
   。 동시에 진행되는 입찰로 인해 자원할당에 충돌이 발생하는 경우
   

 Ⅲ.2 셀 운영 구조 (Cell Control Architecture)

  (1) 실시간 셀 운영에 관한 기존의 연구

   제조셀은 다양하게 정의되고 있다. 가공셀을 정의하면 공용의 물류처리시스템에 의하여 연결되고, 주어진 부품을 가공하는데 요구되는 제어를 수행할 셀 컨트롤러의 제어밑에 있는 하나 이상의 가공용 기계들로 구성되는 시스템이다[Rana 88, Gendreau 93]. 이 중, 운영 프로그램의 변환을 통하여 다른 제품을 생산할 수 있도록 변환이 가능할 때 유연셀이라고 한다[Fahim 92]. 근래에 와서 전문가 시스템, 인공지능, 컴퓨터의 가격하락및 성능의 향상등은 제조셀 지능화의 요인이 되어, 지능형 제조셀시스템의 개념 및 구현사례가 많이 발표되고 있다[Couturier 93, Moon 89, Grady 86, Grady 87].
  
  Shaw에 의하면 제조시스템내의 셀은 3가지로 나누어진다[Shaw 89].
  。flexible cell : 광범위한 가공을 위해 일반적인 가공기계가 사용된다. 
  。product oriented cell : 특정제품만을 만들어 내는 가공셀
  。assembly cell : 로봇을 이용하여 조립을 하는 셀.

   셀운영시스템의 구조에 관해서도 많은 연구가 있었으나, 구성되는 모듈들은 대개가 비슷하다[Fahim 92, Gendreau 93].

   Couturier는 고품질의 제품을 생산할 수 있는 제조셀의 기능을 정보시스템과 통제시스템의 측면에서 연구하였다. ER모델을 기반으로 하여 물리적인 시스템, 셀 태스크, 태스크 조정의 3단계로 정보구조를 설계하였다[Couturier 93].
      
   셀 운영의 기본적인 요소로는 다음과 같이 4가지가 있다[Fahim 92].
    。 셀 일정계획 (cell scheduling)
    。 셀 모니터링 (cell monitoring)
    。 셀 조정 (cell coordinator)
    。 셀 통제 (cell control)
 
   이 외에도 Gendreau는 셀 운영의 기본적인 요소로 다음의 4가지를 지적하였다[Gendreau 93].
    。 셀 일정계획 (cell scheduling)
    。 셀 드라이버 (cell driver)
    。 셀 통신모듈 (cell communicator)
    。 정보수집 모듈 (information collector)

   Grady는 Gendreau이 지적한 요소이외에 셀 시동/종료기능, 에러에 대처하는 요소와 사용자 인터페이스를 더 들었다. Grady는 셀통제시스템이 점차로 지능화되어가면 분산화된 통제구조가 더 적합하다고 밝혔으며, 의사결정을 지원하기 위하여 다중블랙보드/액터 구조를 제시하였다. 구조는 기본 기능을 수행하는 블랙보드와 위의 기능을 보조하는 기능으로 구성되어있다[Grady 86, Grady 87].

   Moon은 제조셀에서의 고장의 발생에 대처할 수 있는 구조를 제시하였다. 지식의 저장방식으로는 블랙보드구조를 사용하였으며, 고장원인의 추론, 적절한 조치의 파악을 가능하게 하였다. 시작용 운영프로그램은 객체지향언어로서 구성하였다[Moon 89].

   Merabet은 FMC내의 다수의 기계들의 통제를 위해서 협상모형(contract net model)류의 분산운영 알고리즘을 도입하여 실행시킨 결과 계산부하도 적고, 결과가 좋았다고 밝히고 있다[Merabet 86].

   Maimon은 제조셀 컨트롤러를 객체기반으로 표현하였다. 객체지향의 개념과 전문가시스템을 결합(OBC; object/knowledge-based)하여 제조셀 통제체제를 구성하였다. 따라서, 기능을 중심으로 한 위의 구조와는 달리 객체를 중심으로 하여 각 객체가 필요한 기능을 수행하도록 설계하였다[Maimon 88].

  (2) 분산운영하의 셀 제어시스템의 구조     
  
   확장된 입찰모형(bidding model)을 이용하여 분산운영을 구현하기 위해서는 셀제어시스템에서 다음과 같은 조건이 만족되어야 한다.
   ① 멀티프로세싱이 이루어질 수 있는 운영체제를 기반으로 하여야 한다.
      이 조건은 협상이 이루어지는 과정에서도 작업은 진행되어야 하며,
      하나 이상의 협상에 동시에 참가하여야 하는 상황도 발생가능하기
      때문이다.
   ② 셀 모니터링 프로세스가 관리하는 정보를 협상에 참여하는 프로세스
      가 공유할 수 있어야 한다.
   ③ 분산환경하에서는 외부로부터 제어명령이 오지 않으므로, 셀 제어는
      모니터링 프로세스를 통하여 하여야 할 작업을 파악하고, 작업을 수
      행하여야 한다.
   
   제안된 분산환경하에서의 셀 운영시스템의 구성 모듈과 그 역할은 다음의 [표 3-3]과 같다.

[표 3-3] 셀 운영시스템의 구성 모듈


 제시한 셀 모듈들의 관계를 나타내면 [그림 3-6]와 같다.















[그림 3-6] 셀 운영의 모듈간의 관계


   위의 그림에서처럼 셀을 담당하는 모듈(process)간에는 여러가지 유형의 정보교환이 이루어진다. 제안된 구조에서의 상주 모듈로는 통신용 서버 프로세스, 셀 모니터링, 셀 제어등이 있다. agent는 통신용 서버 프로세스가 생성하는 입찰참여(bidder) 모듈, 모니터링 또는 셀 제어 모듈에서 작업이 완료되면 생성되는 경매주관(manager) 모듈로 이루어진다. 각 프로세스간의 통신은 운영체제에서 제공하는 프로세스간 통신을 이용할 수도 있으며, 정보의 유지와 많은 프로세스의 접근이 필요한 경우 데이타베이스를 통하여 이루어질 수도 있다. agent를 상주모듈화 하지 않은 이유는 한 셀이 여러 경매에 참여할 수도 있으며, 컴퓨터의 계산부하를 줄일 수 있도록 하기 위함이다. 위에 제시한 모듈중 셀 제어나 모니터링의 경우에는 하나로 합치는 것도 가능하다. 셀이 관리하여야 하는 자원의 양과 특성에 따라서 제시한 구조내에서 적절한 변경은 쉽게 이루어질 수 있다.

 Ⅲ.3 AGV 운영시스템 

  (1) AGV 운영시스템에 대한 기존의 연구
 
   AGV 운영시스템에 관한 연구는 다음과 같이 4개의 분야로 나눌 수 있다[Smith 92, Zeng 91].
    。 유도경로 설계 문제 (flow path)
    。 경로계획 문제 (route planning)
    。 운반차 배정 문제 (vehicle dispatching)
    。 교통통제 문제 (traffic management)

   각 분야별로 기존의 연구를 살펴보기로 하자.

   Vosniakos는 AGV의 유도경로의 설계가 FMS의 운영에 미치는 영향을 분석하였다. 유도경로로는 단방향 루프, 양방향 루프, 양방향 직선형태의 3가지를 택하였으며, 가용 AGV수를 변화시켜가면서 시뮬레이션을 수행하였다. 양방향 루프/직선형태 시스템의 우수성을 입증하고, AGV의 유도경로설계에 있어서의 고려 요인을 제시하였다[Vosniakos 89].

   Gaskins는 AGV의 유도경로 설계문제를 가상/실제(virtual/physical), 단방향/양방향(unidirectional/bidirectional)으로 나누었으며, AGV의 탑재 및 비탑재이동을 from-to chart로 분석한 후, 이를 바탕으로 흐름의 거리를 최소화할 수 있는 경로를 구하는 모형을 정수 계획법을 이용하여 풀었다. 그러나, AGV의 정체나 충돌에 대한 고려가 없는 것이 단점이다[Gaskins 89].       

   Egbelu와 Tanchoco는 AGV의 dispatching rule을 크게 2가지 형태로 구분한 후 각 형태별로 가능한 규칙을 제안하고 시뮬레이션읕 통해 LIV-MROQS와 LIV-MFCFS가 우수함을 찾아내었다. AGV의 dispatching 규칙을 정리하면 다음의 [표 3-4]와 같다[Egbelu 84].

[표 3-4] Egbelu와 Tanchoco가 제안한 AGV의 dispatching 규칙 



   Ro는 위의 표에 의한 분류를 따른다면 MFCFS(대기시간이 가장 긴것을 선택)/NV(가장 가까운 AGV를 선택)를 dispatching 규칙으로 하여 시뮬레이션을 수행하여 좋은 결과를 얻었다[Ro 90].  

   Zeng은 교통 통제문제에 있어서 충돌의 발견 및 해제를 유색 시간 페트리넷(colored timed petri net)으로 모형화하였다[Zeng 91].
   
   Hsieh는 단방향 AGV 시스템, 양방향 AGV 시스템에서의 교통 통제문제를 페트리넷을 이용하여 모형화하고, 각 시스템의 장단점을 분석하였다[Hsieh 91]

  (2) 분산 운영을 위한 AGV 운영방법

   제안된 분산통제시스템에서는 AGV의 자율성을 최대한으로 활용한다. 각 셀의 작업 시작시점에 그 셀은 AGV supervisory 컨트롤러에게 작업의 예상종료시간, 부품에 관련한 정보를 보내게 된다.  AGV의 컨트롤러는 이 정보를 바탕으로 생산현장내의 AGV를 제어하게 된다. 제안된 AGV제어방법을 활용하면 작업이 완료된 후 각 셀의 버퍼에서 부품이 AGV를 기다리는 시간을 최소화할 수 있으며, 운영상의 유연성도 도모할 수 있다.

   AGV의 dispatching은 AGV가 쉬는 사건이 발생하면 이루어진다. 아래의 [그림 3-7]에서처럼 AGV가 쉬는 시점에서, 현재 작업이 진행중인 셀과 부품의 정보를 파악할 수 있다. AGV가 셀 n2에 부품을 배달한 후 상태변화가 일어난다. 즉, 작업이 종료된 후에 휴지(休止)상태에 들어간다. 이 때, 작업이 종료되어 AGV에 의해 부품의 이동이 필요한 셀로 미리 AGV를 이동시키면, 부품의 가공완료후의 대기시간을 줄일 수 있으며, 부품의 시스템내 체류시간과 자원의 효율적인 활용이 가능하게 된다.
















[그림 3-7] AGV의 쉬는 시점에서의 시스템의 상황

   위와 같이 쉬는 상태의 AGV를 이동시키는 데 있어서 다음의 2가지를 고려해야 한다. 

   ① 가장 가까운 다음 작업완료 예정지로 이동한다.
   ② 작업완료가 가장 빠르게 될 셀로 이동한다.
   AGV dispatching 알고리즘의 가정은 다음과 같다.

    ① 셀간의 최소이동거리와 경로는 이미 존재한다.
    ② AGV의 동일경로에 의한 충돌은 방지된다.
    ③ AGV의 유도경로는 단방향 또는 양방향이다.
  
   AGV dispatching 알고리즘에 사용되는 기호는 [표 3-5]과 같다.

[표 3-5] AGV dispatching 알고리즘에 나타나는 기호들


AGVDCA(AGV Dispatching and Control Algorithm)

Step 0   " AGV status change " 
        If Vk has done his job at nl and has no more jobs,
        then delete Vk from SVL, insert Vk into SVI
             goto step 1 
        " Part Processing started "
        If any Cell starts processing Pi,
        then insert Pi into Spu
             if SVI is not empty
             then goto step 1          

Step 1   If Spd is not empty,
        ① calculate the time difference that is the waiting time of
           parts in the output buffer.   
           time differnce = CTk - PTi  for ∀ Pi ∈ Spd
        ② We get the maximum weighted value of part using the 
           below equation.
           N = cardinalty of  SVI
                     
            for ∀ k ∈ SVI , i ∈ Spd      
            α is a weighting factor. (0≤α≤1)
         ③ Goto step 3
        If Spd is empty, goto step 2.

Step 2   If Spu is not empty,
        ① calculate the remaining time of the parts.
         Tir(Lpi,POi)=Ti(Lpi,POi) - Tip(Lpi,POi)  for ∀ Pi ∈ Spu 
         ② We get the maximum weighted value of part using the 
            below equation.
           N = cardinalty of  SVI
                      
            for ∀ Vk ∈ SVI , Pi ∈ Spu      
            β is a weighting factor. (0≤β≤1) 
        ③ Goto step 4

Step 3  If the selected AGV is Vk, and the selected part is Pi
        ① Delete Vk from SVI and insert Vk into SVM
        ② Delete Pi from Spu and insert Pi into Spc 
        If SVI is not empty and either Spd or Spi is not empty
        goto step 1 and concurrent goto step 4. 

Step 4  Send Vk to Lpi

Step 5  If Vk has arrived at Lpi,
        ① if Tir(Lpi,POi) = 0
           - load Pi into Vk.  
           - delete Pi from Spc, insert Pi into Spm
           - delete Vk from Svm, insert Vk into Svl
           - send Vk to the next cell 
              that is determined using the extended bidding.
         ② if Tir(Lpi,POi) > 0
            - wait until Tir(Lpi, POi) = 0
            - goto ①

Step 6  If Vk has arrived at the destination,
        then  delete Pi from Spm
              goto step 0 for the re-initialization.
             
   위의 알고리즘중 AGV와 부품의 선정에 사용된 기준은 부품이 가공이 완료된 후 이동을 기다릴 때와 가공중일 때의 기준이 다르다. 부품가공이 완료된 경우에는 대기시간이 클수록, 유휴 AGV의 대수가 많을 때는 AGV로부터 이동시간이 짧을수록, 가공시간이 길 경우 병목공정일 가능성이 크므로 가공시간이 긴 부품을 먼저 선택하도록 하였다. 가공중인 경우에는 남은시간이 길수록 선택의 가능성을 작게하고, 그 외의 조건은 앞에 기술한 기준과 동일하도록 설계하였다.

   일반적으로 AGV와 이동을 요구하는 부품간의 관계는 다음의 [표 3-6] 과 같이 3가지 경우로 분류할 수 있다.

[표 3-6] 시스템의 상황과 AGV 제어알고리즘의 적용



   제시된 AGV운영방법은 AGV의 자율성을 최대한 보장하면서, 제조환경내의 통신망을 이용하여 작업의 시작을 인지한 후, 이동이 필요한 곳으로 미리 이동을 시키고 있다.  따라서, 확장된 입찰모형에 의하여 최종적으로 어떤 셀로 이동해야할지를 알 수 없는 상황에서 부품의 시스템내 대기체류시간을 줄이면서, 병목공정에 대한 고려를 행함으로써 자원의 효율적인 활용이 가능하다는 장점을 가지고 있다.

Ⅳ. 분산 운영 시뮬레이션 및 생산현장에의 적용

 Ⅳ.1 분산 운영 시뮬레이션의 구조

   시뮬레이션은 대상시스템의 정확한 묘사를 통하여 제시된 방안의 타당성을 입증하는 데 널리 사용되고 있다. 실제로 많은 생산현장의 통제정책들이 시뮬레이션과 그 분석을 통하여 결정되고 있다. FMS에 관련하여 시뮬레이션이 적용되는 분야도 설계, 계획, 통제에 이르는 전 분야에 이르고 있다[Montazeri 88]. 최근에는 생산현장을 대상으로 한 시뮬레이션 언어와 패키지도 새로이 계속 개발되고 있다.

   그러나, 기존 대부분의 시뮬레이션 연구에서는 생산현장의 상황을 그대로 모방하는 경우 컴퓨터부하가 큰 관계로 적절한 범위내에서의 생략과정을 거친 후 생산현장의 실제상황을 분석하거나, 새로운 대안을 제시하고 있다. 생산현장의 상황을 간략화함에 따라 시뮬레이션의 결과를 바로 생산현장에 이식하는 데에는 많은 문제가 생기게 되었다. 이러한 한계를 극복하는 동시에 제안된 분산운영방법을 생산현장에 쉽게 이식시키기 위하여 기존의 시뮬레이션과 그 구조가 다른 시뮬레이션 구조를 제안하고, 그 개발을 수행하였다. 제안된 시뮬레이션은 다음과 같은 역할을 수행하게 된다.

   。 분산 운영 알고리즘의 정확성 확인
   。 정량적 측면에서 타 운영방법과의 비교
   。 가상 제조시스템의 구성
   。 실제 운영 소프트웨어로의 빠른 전이
 
   이 중 가상 제조시스템이란 하드웨어의 실질 통제이전에 제시된 시뮬레이션을 통하여 소프트웨어의 타당성을 미리 검증할 수 있도록 할 수 있다는 개념이다. 즉, 다음과 같은 도식적인 설명도 가능하겠다.
  
  제조 시스템 = 가상 제조 시스템 + 제어 시스템(H/W + controller)

가상 제조시스템은 기존의 계층형 통제구조하의 시스템이나 중앙집중형 시스템을 구축하는 경우 top-down 접근방식을 취하며, 모형화된 공장을 먼저 구축하자는 기존의 연구와도 일면 유사한 측면이 있다[김성식 92].

   그러나, 가상 제조시스템의 개념에서는 상위 레벨로부터 모든 역할의 할당에서 조정에 이르는 복잡한 과정과 현장 이식후에 제어기능 부분의 첨가에 따른 변화요구를 모형 시스템전체가 받게 되는 단점이 존재하게 된다. 분산 제어구조를 지향하는 경우, 점증적인 설치나 점증적인 확장이 매우 용이하다. 기본적으로 메시지의 내용, 형태, 역할에 관한 합의만으로 독립적인 작업과 독립/전체적인 시험이 가능하게 된다.  가상 제조 시스템하에서는 현장 이식후에도 변경이 필요한 경우에도 시뮬레이션을 통하여 사전에 정상작동을 확인함으로써 이 기간동안에도 생산현장의 중단 없는 작업을 가능하도록 하며, 생산현장에의 직접이식을 통한 위험을 줄일 수 있는 장점을 갖게 된다. 
   위의 요구조건을 만족시키기 위하여 다중처리(multi-tasking)가 가능한 운영체제(OS:Operating System)하에서 IPC(Inter Process Communication), RPC(Remote Process Communication)를 활용하는 구조로 설계하였다. 이 중 운영체계는 이 후에 설명될 통신과정, 일정전개과정, 제어과정에 있어서 사용되는 client-server구조를 지원하기 위한 것이며, 이러한 구조를 통해서 실시간 제어가 가능하게 된다. IPC, RPC는 내부/외부통신의 상황을 고려하기 위한 것이다.

 Ⅳ.2 시뮬레이션의 생산현장 통제 S/W로의 전이
   
   시뮬레이션 S/W와 생산현장 통제 S/W와의 큰 차이는 생산시스템을 구성하는 설비의 통제부분의 유무이다. 설비의 통제부분이 결합된 후의 시뮬레이션 프로그램은 그 부분 단위별로는 중앙집중형의 통제구조를 갖게 되며, 한 셀을 담당하는 부분을 현장으로 분산화함에 따라서 분산형 통제구조를 따르게 된다. 이러한 단계적인 변이를 가능하게 하는 구조를 따름으로써 시뮬레이션 프로그램이 점증적으로 생산현장 S/W로 용이하게 변환할 수 있도록 하였다. 또한 생산현장 통제시스템으로서 필요한 요소들을 점증적으로 추가하는 것도 가능하도록 하였다. 

  분산 운영시스템은 연구현황에서 조사된 바와 같이 통신량의 과부하가 문제로 제기되고 있다. 이와 같은 현상은 [그림 4-1]과 같은 구조하에서 전송된 메시지의 처리에 소요되는 시간에 따른 현상이라고 할 수 있다. 분산 운영 구조에서는 이와 같은 통신상의 병목현상을 제거하기 위하여 통신전용 서버와 분산 일정전개용 서버를 분리함으로써 이러한 현상을 완화할 수 있게 되었다. 

   이와 같은 구조에서는 메시지 전송/수신 시간 및 Server의 메시지 처리시간(T1+T2+T3)동안 client와 server가 binding되어 있게 되므로, 통신상의 과부하가 초래되며, station간에 많은 client와 server가 필요하게 되므로 생산현장의 분산통제구조에는 적합치 않다고 볼 수 있다. 


[그림 4-1] 일반적인 RPC 구조


  제안된 운영구조는 상기한 통신상의 병목현상을 제거하기 위하여 메시지 버퍼와 클라이언트 풀을 도입하였다. 한 셀을 제어하는 구조는 다음의 [그림 4-2]와 같다.


[그림 4-2] 한 셀의 운영 구조

   위와 같은 구조를 상세히 설명하면 다음과 같다. 외부로부터 메시지(a)가 들어오면 통신용 서버가 이를 받아서 일정전개용 서버에게 이를 넘겨준다(b). 일정전개용 서버는 메시지를 분석하여 적절한 처리를 하되, 일의 양에 따라 스스로 처리하거나, client에게 이를 넘긴다(c). 정보처리에 관한 내용이면 client는 이를 처리하여 상대방 server에게 전달한다(h). 설비에 대한 제어가 필요한 요구이면 설비를 제어하는 프로세스에게 이를 넘긴다. 설비를 제어하는 프로세스는 client로부터의 요구(d)에 따라 이를 실행에 옮기며, 모니터링을 하게된다(g). 일이 종료되면 그 결과를 client에게 넘긴다(d). 이러한 과정은 셀을 담당하는 컴퓨터의 운영체제가 multi-tasking환경인 경우이며, 이런 환경이 되지 못하면 host computer에서 셀을 담당하는 제어프로그램과의 연결부분을 하나 더 두기로 한다. 이러한 과정은 (e)(f)(g)의 흐름을 따르게 된다. 이와 같은 구조에서는 client와 server가 binding되는 시간이 메시지의 전송시간만을 차지함으로써 메시지의 처리시간까지 binding되던 일반적인 RPC하에서의 RR (Request-Reply) 프로토콜을 이용한 분산 시스템보다 통신상에서의 부하가 줄게 된다.

   시뮬레이션 프로그램부분은 설비 control process를 제외한 부분이며, 설비 control process를 접목시킴으로써 운영 S/W로서의 기능을 수행할 수 있게 된다. 또한 (e)(f)(g) 의 흐름을 따르게 되면 중앙집중형 내지 계층형의 통제구조하에서 운영이 되는 것이며, 작동이 정상적임을 모두 확인한 후에 통신용 서버부분부터 모두 현장의 셀 제어부분으로 이동시키면 분산시스템의 구축이 가능하게 되는 구조이다.

   기존의 시스템에서 분산시스템으로 전환하게되면 host computer와 설비를 직접 제어하는 프로세스간의 RPC(Remote Process Communication)부분이 IPC(Inter Process Communication)로 전환하게된다. 실질적으로 설비를 직접 제어하는 부분에서는 제어명령과 결과보고의 횟수가 많게 되므로, 이 부분을 IPC로 전환가능하게 함으로써 통신상의 부하를 줄이는 결과를 가져올 수도 있다. 

 Ⅳ.3 SNU/FMS의 분산운영

   제안한 분산 운영방안을 이용하여 서울대 자동화연구소에 설치되어있는 유연생산시스템의 운영 시스템을 구축하였다. SNU/FMS의 생산설비는 크게 자동가공셀, 자동조립셀, 자동검사셀 및 물류운반셀로 이루어져있다. 각 설비의 배치는 다음 페이지의 [그림 4-3]과 같은 구조를 지니고 있다.

   SNU/FMS는 그 동안 중앙의 workstation에 모든 정보와 통제권한을 둔 중앙집중형 구조를 따랐으나, 중앙화에 따른 host computer의 과부하와 의사결정 logic이 복잡도하여 지는 문제점을 초래하였었다. 

   SNU/FMS에 분산형 현장통제구조를 이식하기 위하여, 다중처리가 가능한 셀 통제 컴퓨터를 축으로 하여, TCP/IP Kernel위에 응용 소프트웨어간의 통신을 쉽게할 수 있는 API(Application Program Interface)를 구축하였다. SNU/FMS의 분산형 현장통제 시스템의 구축에는 다양한 컴퓨팅환경(Unix를 바탕으로 한 workstation 그리고 DOS와 OS/2를 바탕으로 한 PC 들)과 다양한 DBMS(Ingres, Objectivity, OS/2 DB Manager)의 분산설치로 이질적인 환경하에서의 분산시스템의 구축을 시도함으로써 기존의 생산현장의 많은 컴퓨터자원의 활용을 가능하도록 하고 있다.
























[그림 4-3] SNU/FMS의 배치도

Ⅳ.4 분산운영안의 시뮬레이션 결과 및 분석

   제안한 분산운영안의 운영상의 효율성을 측정하기 위하여, 가상의 제조환경(FMS)을 대상으로 시뮬레이션을 수행하였다. 시뮬레이션을 수행한 기본환경과 가정들은 다음과 같다.

   ① 6대의 공작기계 (버퍼는 3개씩을 가정.)
       - 각각에 절삭 성능상의 차이가 있다고 가정함.  
   ② 각각 1대의 셋업, 셋다운 스테이션 (버퍼는 각각 1개임을 가정.)
   ③ AGV는 다음과 같은 인자요인 및 수준의 변화를 주었다.
       - AGV의 가용대수 : 3대
       - AGV의 속도 : 파트를 탑재한 상태와 비어있는 상태의 속도에
                        차이를 두었다. 
    ④ part의 종류는 5가지를 사용했으며, 그 비는 동일하다.
    ⑤ 각 part의 도착간격은 지수분포를 따른다.
    ⑥ part의 가공순서는 다음과 같다. 
       -  (i, j) 는 기계 i 또는 기계 j에서 가공이 가능하다는 표시임.
       - part 1 : (SetUp) → (1, 2) → (3, 5) → (4, 6) → (SetDown)
       - part 2 : (SetUp) → (1, 3) → (2, 4) → (5, 6) → (SetDown)
       - part 3 : (SetUp) → (3, 4, 5) → (1, 2) → (6) → (SetDown)
       - part 4 : (SetUp) → (5, 6) → (1, 3) → (2, 4) → (SetDown)
       - part 5 : (SetUp) → (1, 4) → (2) → (3, 5, 6) → (SetDown)
    ⑦ 가공시간은 part와 기계의 짝에 따라 차이가 난다. 
       - 셋업은 파트에 따라 각각 최저 10 tu(time unit)와 20 tu의 사이값을 
          갖는다. 
       - 가공 시간은 40tu에서 120tu정도 사이로 각각 짝에 따라 다르다.
       - part당 총 가공소요시간은 200tu와 300tu 사이이다.
 
    ⑧ 시뮬레이션 시간은 2400tu로 하였다. 
 
   반복(repetition)을 통한 실험결과의 통계적 분석이 수행되었으며, 각 실험의 요인별 유의성이 분석되었다. 수치결과는 부록 3에 실려있다.

  첫번째 실험은 AGV가 없는 제조환경의 경우로 FMS가 아닌 job-shop으로 생각하거나, 이동속도(즉, AGV의 속도)가 가공속도에 비하여 상당히 빠른 경우를 가정한 실험이다. alternative M/C을 선정하는 방법과 dispatching rule에 따른 효율성을 시스템의 부하상태에 따라 실험하였다. 주로 입찰에 의한 생산현장통제방법의 효율성을 측정하고자 하였다.

  두번째 실험은 첫번째 실험에 AGV를 고려한 경우이다. AGV의 운영방법을 기존의 방법과 본인이 제안한 방법간에 비교하여 보았다. 통제변수로써 AGV의 이동속도, 시스템의 부하상태를 두었다. 본인이 제안한 물류시스템의 운영안을 평가하기 위한 목적으로 실험하였다. 
  
  첫번째 실험은 파트의 이동을 고려하지 않은 실험이었다. 가공을 끝마친 파트의 다음 가공을 위한 기계의 선정은 EFT(Expected Finish Time)를 최소화하는 방법과 queue에 있는 part의 수를 참고하는 MinQ(Minimum Queue)의 2가지 방법을 대상으로 하였고, dispatching rule로는 SPT(Shortest Processing Time), EDD(Earliest Due Date), FIFO(First In First Out)를 대상으로 하였다. 시뮬레이션의 결과는 단위기간(2400tu)동안에 생산한 파트의 수와 이 중 납기를 달성하지 못한 파트의 수를 대상으로 하였다. [그림 4-4]는 각 대안에 따른 단위기간동안의 생산량을 나타내고 있다. 그림의 가로축의 수치는 파트의 도착시간간격을 나타낸다. 오른쪽으로 갈수록 시스템에 부하가 많이 걸린다고 할 수 있다. 실험에서는 EDD/MinQ의 결과가 거의 모든 상황에서 우수하게 나왔으며, FIFO/EFT의 결과는 그 편차가 크게 나왔으며, 결과도 예상외로 좋지 않았다. EDD/EFT가 EDD/MinQ 다음으로 좋은 결과를 나타내고 있었다. [그림 4-5]는 각 대안에 따른 납기 미달성 파트의 수를 나타내고 있다. 시스템에 부하가 많이 걸릴수록 비슷한 결과를 보여주고 있으나, 이 중에서도 EDD/MinQ와 EDD/EFT가 좋은 결과를 보여주고 있다. 참고로, 위의 실험에서 나온 수치 자료는 부록 1에 싣었다.
  
  이상의 실험은 Shaw의 실험과 비교하여, 차이가 나타나고 있다. 그러나, 시뮬레이션의 대상인 FMS환경의 차이가 원인이 아닌가 생각된다. 각 셀별로의 dispatching rule로서는 EDD가 우수함이 다시 입증되었다. 










[그림 4-4] AGV가 고려안된 경우의 대안별 생산량 










[그림 4-5] AGV가 고려안된 경우의 대안별 납기미달성 생산량

x : EDD/MinQ, + : EDD/EFT, * : FIFO/EFT, ▲: FIFO/MinQ,   : SPT/MinQ   : SPT/EFT    
   두번째 실험에서는 AGV의 운영방법의 차이에 따른 FMS의 운영상의 효율을 비교하고자 하였다. AGV의 운영안의 비교를 하기 위하여 AGV의 속도를 통제변수로 주었으며, 전 실험에서 우수한 결과를 보인 EDD/MinQ와 통제가 쉬운 FIFO/EFT를 대상으로 실험하였다. 시스템의 부하와 AGV의 속도에 따른 AGV운영안의 효율을 비교하는 것을 목적으로 하였다. 제안한 AGV운영안은 Egbelu와 Tanchoco가 제안한 MFCFS를 기준으로 한 안과 비교되었다. AGV의 속도는 파트를 실은 속도와 싣지 않은 상태의 속도가 같은 실험과 그 차이가 2배인 경우로 나누어 실험하였다. [그림 4-6]과 [그림 4-7]은 AGV의 운영안에 따른 생산량의 차이를 AGV의 이동속도와 시스템의 부하별로 보여주고 있다. 그림에서 볼 수 있듯이, 여러가지 운영안(EDD/MinQ, FIFO/EFT)과 AGV의 이동속도 차이, 시스템의 부하상태 하에서도 제안한 AGV운영안이 보다 효율적임을 보여주고 있다. AGV의 이동속도가 느릴수록 제안된 운영안이 보다 효율적이었다. [그림 4-8]과 [그림 4-9]는 동일한 실험에서의 납기가 지난 생산량을 보여주고 있다. 납기미준수율의 비교에서도 제안된 AGV운영안에서 좋은 결과를 얻을 수 있었다. 또한, AGV를 포함한 운영안의 비교측면에서도 EDD/MinQ가 FIFO/EFT보다 좋은 결과를 보여주고 있었다. 참고로, 위의 실험에서 나온 수치 자료는 부록 2에 싣었다.

 













[그림 4-6] AGV의 상태별 이동속도가 동일한 경우의 대안별 생산량 










[그림 4-7] AGV의 상태별 이동속도가 다른 경우의 대안별 생산량
   : EDD/MinQ + 제안된 AGV운영안        : EDD/MinQ + MFCFS 
  x : FIFO/EFT + 제안된 AGV운영안     + : FIFO/EFT + MFCFS    









[그림 4-8] AGV의 상태별 이동속도가 동일한 경우의 납기미달성 생산량 










[그림 4-9] AGV의 상태별 이동속도가 다른 경우의 납기미달성 생산량
   : EDD/MinQ + 제안된 AGV운영안        : EDD/MinQ + MFCFS 
  x : FIFO/EFT + 제안된 AGV운영안     + : FIFO/EFT + MFCFS    
   AGV가 고려되지 않은 실험에서 나타난 운영안별로 생산량과 납기미달성 생산량의 큰 차이에 비하여, 제안된 AGV운영안을 사용함으로써 운영안간의 차이를 거의 줄였으며, AGV운영안에 따라 시스템의 운영효율에 차이가 나게 되었다. 제안된 AGV운영안은 AGV의 사전이동에 의한 시스템의 효율향상을 도모하는 것이었다. 시뮬레이션을 통하여 만족스러운 결과를 얻을 수 있었다. 
  
   AGV의 사전이동은 AGV의 빈상태의 이동이 완료된 후에 파트를 바로 싣고 떠날 수 있을 때, 그 운영효율이 올라간다. 만일, 빈상태의 이동이 완료된 후에 파트를 바로 싣고 떠나지 못하게 된다면, 다른 곳에서의 이동 요구를 수행하여줄 수 없게 되고, 시스템 전체의 효율이 떨어지게 된다. 이러한 측면에서, 제안된 분산운영방법하에서도 유찰이 발생하지 않도록 운영알고리즘(AS/RS의 적절한 이용)을 설계한 것도 타당했다고 생각한다.     
 
  
Ⅴ. 결론 및 추후연구방향
   
   유연생산시스템의 효율적인 생산통제는 유연생산시스템이 태동한 이래로 큰 문제로 남아 있다. 많은 수학적인 접근, 인공지능을 응용한 접근, 시뮬레이션을 이용한 접근 등 많은 연구가 이루어졌으나 해결책을 제시하지는 못했다. 본인의 연구도 광범위한 문제에 대하여 해결책을 제시하지는 못하지만, 새로운 방법론을 기초로하여 접근방법을 제시하였고, 시뮬레이션을 통한 효율성의 검증이나 실제 생산환경의 운영소프트웨어 작성의 측면에서 기존의 방법들보다는 우수한 결과를 얻을 수 있었다. 

   나날이 발전하는 통신기술, 컴퓨터와 정보처리기술, 이 3가지 기술이 융화되어 만들어 낸 분산운영구조는 아직까지는 학계나 현장에 많이 알려져 있지 않으나, 기존의 운영구조의 한계점이 노출되고 새로운 구조의 필요성이 대두될 무렵에는 하나의 대안으로 제시될 것임을 확신한다.  

   분산운영에 관한 연구는 아직까지 시작의 단계이다. 그 이론의 부족과 실제적 현장에서의 실험을 단시간에 모두 이루기에는 무리가 있으나, 본인이 생각하기에는 다음의 5가지는 유연생산시스템의 분산운영을 위해서 반드시 연구가 신속히 진행되어야 한다고 본다.

  ① 분산 운영을 묘사하는 정확한 시뮬레이션 프로그램. 
    분산 운영은 이산현상시스템(DEDS:Discrete Event Dynamic System)의 특성과 연속시스템의 특성을 담고 있다. 따라서, 이 둘을 적절히 혼합한 시뮬레이션 프로그램이 개발되어야 각 site별로 특성화된 효율적 운영이 가능하다고 생각한다.

  ② 통신시스템의 성능과 FMS의 운영을 위한 통신 API(Application Program Interface)의 개발에 대한 연구.
    분산시스템은 통신시스템의 발전에 크게 영향을 받는다. 고용량, 고속 통신이 가능해지면 분산시스템은 발전하게 될 것이다. 또한, 통신용 API를 어떻게 구성하는가에 따라서 분산시스템의 운영의 신뢰도가 영향을 받을 것이다.

  ③ 상위레벨의 프로토콜에 관한 연구. 
    이 연구에서도 Smith의 협상넷을 기반으로 하였지만, 보다 더 효율적인 상위레벨의 프로토콜의 개발이 필요하다. 또한, 각 message에 담아야 할 기본적인 data의 분류에 관한 연구가 필요하다고 생각한다.

  ④ 메시지, 사건과 상태, 이렇게 3가지가 결합된 상태에서의 시스템의 상태를 정확히 알아 낼 수 있는 방법의 개발이 필요하다. 이론적인 안정성에 대한 확증이 미흡하기때문에 현장에의 이식에 문제가 발생할지도 모른다.

  ⑤ 분산 운영하에서의 생산계획, 데이타베이스 유지의 문제 등을 새롭게 고려해보아야 한다. 마르코비안 프로세스가 아니므로 기존의 queueing network의 이론들이 적용불가능 하듯이 기존의 이론을 검토해보고, 발전시켜 나가야 한다.
부록
1. AGV를 고려하지 않은 실험의 결과

  - MTBA 40인 경우.
  


  - MTBA 35인 경우.

  



  - MTBA 30인 경우.

  

  - MTBA 25인 경우.

  

   - MTBA 20인 경우.

  
2. AGV를 고려한 실험의 결과

① AGV의 빈 상태의 이동속도와 물건을 실은 상태의 이동속도가 같은 경우.
   (이동소요시간은 셀간거리 × 2tu로 가정함.)
   - EDD/MinQ + 제안된 AGV 운영알고리즘.
       

   - EDD/MinQ + MFCFS

       

   - FIFO/EFT + 제안한 AGV 운영알고리즘.
       

   - FIFO/EFT + MFCFS
       
   
② AGV의 빈 상태의 이동속도와 물건을 실은 상태의 이동속도가 다른 경우.
   (빈상태의 이동소요시간은 ①과 같고, 물건을 실은 상태의 이동소요시간은 
    빈상태의 이동시간의 2배라고 가정함.)

   - EDD/MinQ + 제안한 AGV 운영알고리즘.
        

   - EDD/MinQ + MFCFS
        

   - FIFO/EFT + 제안한 AGV 운영알고리즘.
        

   - EDD/MinQ + MFCFS
     
  
3. 실험결과의 통계적 분석

   A. AGV를 고려하지 않은 실험의 유의성 분석
      
   실험의 횟수는 사전실험을 통하여 통계적으로 95%이상의 신뢰도를 가지도록 결정하였다. 실험인자간의 유의성도 95%의 신뢰도를 중심으로 검정하였다. 표의 하삼각부분에 나와있는 값은 아래의 식을 이용하여 구한 값이다. 표의 상삼각부분에 있는 표시는 통계적 유의도를 나타낸다. 90%의 신뢰도를 가지고 유의한 차이를 보일때는 *, 95%의 신뢰도를 가지고 유의한 차이을 보일때는 **, 99%의 신뢰도를 가지고 유의한 차이를 보일때는 ***로 표시하였다. 

   

</tdmsfiletext>
