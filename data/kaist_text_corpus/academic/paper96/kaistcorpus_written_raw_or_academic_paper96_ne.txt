<language> Korean </language>
<textcode> KSC-5601-1988 </textcode>
<process> raw </process>
<version> 2001(or)</version>
<filename> kaistcorpus_written_raw_or_academic_paper96_ne.txt </filename>
<title> 시뮬레이션을 통한 지식획득 및 지식  기반형 스케쥴러의 개발에 관한 연구 </title>
<author> 김기태 </author>
<date> 1992</date>
<publisher> 서울대학교 </publisher>
<kdc> TM530.561 </kdc>
<tdmsfiletext>
I. 서론 

I.1 연구의 배경 

유연생산시스템( FMS : Flexible Manufacturing System )은 생산량이 중.소규모인 다양한 형태의 부품을 효율적으로 생산할 수 있도록 자동화된 생산시스템이다.  유연생산시스템의 중요한 구성요소는 i) NC공작기계, ii) 자동운반장치, iii) 컴퓨터( 소프트웨어 포함 )이다.  이런 요소들이 결합되어서 생산시스템이 구성되어지는데 비용이 많이 소요되므로, 생산시스템의 효율적인 운용이 점점 더 중요해지고 있다.  

효율적인 운용을 위해서, 특히 작업을 하지 않는 기계의 발생에 의한 손실을 줄일 수 있는 우수한 일정계획을 만들기위한 노력은 다방면으로 이루어지고 있다.  그중에서도 전문가시스템과 시뮬레이션을 이용해서 일정계획을 전개하는 것이 여러가지의 복접한 상황에 잘 적응하는 일정계획을 전개하여 주는 것으로 많은 사람들이 주장하고 있다[ Kusiak and Chen(1988), Wu and Wysk(1988) ].

여기서 전문가시스템을 만들기 위한 과정은 지식 획득과 시스템 구현으로 이루어진다.  이중에서 지식을 획득해서 지식베이스를 어떻게 잘 구성하는가가 전문가시스템의 우수성, 나아가 스케쥴러의 우수성을 결정짓는다.  그런데 기존의 전문가시스템은 현장의 풍부한 경험을 가진 전문가들의 지식을 이용해서 규칙을 발견해서 이를 규칙베이스로 만들어서 적용하는 것이 대부분이었다.  그러나 이렇게 만들어진 규칙베이스는 특정한 구성형태( Configuration )의 공장에 대해서만 적용될 수 있으므로 공장의 구성형태가 다른 공장에는 바로 적용될 수 없다.  구성형태가 다른 공장에 대해서는 그 공장의 전문가들의 경험과 지식을 이용해서 새롭게 규칙베이스를 만드는 것이 필요하다.  이런 과정에서는 많은 시간과 비용이 필요하며 특히 신규공장의 경우에는 이러한 전문가들이 존재하지도 않는다.  그러므로, 보다 짧은 시간안에 주어진 공장의 구성에 대응해서 효율적으로 적용될 수 있는 스케쥴링 전문가 시스템이 필요하다. 




I.2 연구의 목적 

지식베이스는 전문가시스템을 구성하는 데 있어서 병목단계라고 할 수 있다.  시간이 상대적으로 많이 필요하며 그 전문가 시스템 성능에 많은 영향을 주기 때문이다.  이중에서 지식 베이스의 구축방법으로는 지식추출( Knowledge Elicitation )과 기계 추론( Machine Induction )의 두가지가 있다.  

본 논문에서는 시뮬레이션을 통해서 각종의 Dispatching Rule이 주문 데이타와 초기 시스템 재공품의 어떤 특징에 따라서 선택되는지를 파악하고 이를 먼저 데이타베이스화하고, 이를 Attribute-Oriented Induction Method를 이용해서 지식베이스화한다.  이렇게 만들어진 지식베이스를 전문가시스템으로 가져와서 스케쥴링을 수행하는 전문가 시스템을 제안한다.  이 전문가 시스템은 스케쥴을 만들 주문의 데이타와 스케쥴할 대상 시스템의 재공품 상황을 가지고 스케쥴 작성에 적용할 Part Input Sequence Rule과 Queue Dispatching Rule을 선택해서 스케쥴을 만들어준다.  

지식획득의 두가지 방법중에서 본 논문에서는 기계추론의 방법을 이용해서 지식베이스를 구축하는 방안을 먼저 제시한다.  다음으로 구축되어진 지식베이스를 이용한 스케쥴링 전문가 시스템 구축방안을 제안한다.  


II. 선행 연구에 대한 검토 
본장에서는 스케쥴링에서의 작업배정 결정규칙 선택( Dispatching Rule Selection ), 스케쥴링 전문가시스템( Scheduling Expert System )과 전문가시스템에 내장되는 지식베이스( Knowledge Base )의 구축을 중심으로 선행연구를 검토하고자 한다.

II.1 스케쥴링에서의 Dispatching Rule 선택  
스케쥴링은 주어진 과업을 수행하기 위해 시간에 대응해서 가용자원을 할당하는 것이다 [ Baker, 1973 ].   스케쥴링을 위한 수학적 모델과  또한 이론과 실제사이의 인테페이스 기능을 담당할 유용한 모델과 기술의 개발에 관하여 많은 연구가 이루어졌다.  
Penwalker등은 알려져 있는 다양한 작업배정 결정규칙( Dispatching Rule )을 정리해서 113가지의 일정계획 결정규칙( Scheduling Rule )으로 요약 정리하였다[ Penwalker & Iskander, 1977 ]. 
최근의 연구는 기존의 Scheduling Rule들 중에서 일반적으로 우수하다고 알려져 있는 최단가공시간 우선규칙( SPT Rule )을 개량해서 새로운 발견적 결정규칙( Heuristic Rule )을 제시하는 경향이 있다.  또한 개별공정( Job Shop )에서 일반적으로 가장 우수하다고 알려져있는 SPT Dispatching Rule에 변화를 주어서 보다 현실에 맞게 적용하려는 노력도 있었다.  납기일( Due Date )정보를 가지고 사전에 계획된 일정보다 늦는가 혹은 앞서가는가에 따라서 SPT Rule을 신축적으로 적용하기위한 CEXSPT Rule이 제안된 바 있다[ Schulz, 1989 ].

그리고 이 CEXSPT Rule에 대한 실험을 깊이 연구하여 그 타당성을 입중한 연구도 있다[ YE, 1991 ].
CEXSPT Dispatching Rule을 확장해서 여러 대의 기계에 대해서 Job을 Dispatching하는 Rule이 제안되기도 했다[ Stoeva, 1990 ].  특히 이 연구에서는 SPT Rule을 적용할 경우에 Tardiness가 발생하는 경우가 많이 있는데 이런 경향를 줄이기 위해서 Due-Date Based Dispatching Rule로서 CEXSPT Rule을 개량했다.  
각 기계의 버퍼( Buffer )에 용량제한이 존재하는 FMS에 적용될 수 있는 세가지의 Process Selection Rule이 제안되었었다.  이 Rule들은 기계고장과 같은 시스템의 갑작스런 변화에도 대처할 수 있다.  게다가 스케쥴링을 하면서 AGV 배정과 경로 선택도 동시에 처리할 수 있다[ Ro  and Kim, 1990 ].
스케쥴링에서 새로운 Heuristic Dispatching Rule의 개발에는 이상과 같은 방향의 연구가 진행되어오고 있다.

그런데, 일정계획 시스템은 생산라인에서의 변화와 생산기간동안의 필요조건과 제약요소의 변화에 따라서 능동적으로 변화되는 일정계획을 제시해야한다.  이런 방법은 실제의 가공라인을 중단시키지 않고 일정계획을 바꾸어야하는데 이는 다음의 2가지를 만족시켜야한다.  
첫째, 일정계획의 변화는 생산라인의 실시간 정보를 반영해야한다.  
둘째, 일정계획의 변화는 가공을 지연시키지 않을 정도로 짧은 시간안에 이루어져 적용되어야한다. 


II.2 스케쥴링 전문가 시스템 
여러가지의 발견적 기법을 적용해서 스케쥴링을 수행하는 노력이 있어왔다.  그러나 단순한 발견적 기법으로는 발생가능한 모든 상황( 기계의 고장, 부품의 지연공급, 기타 천재지변 )에 대응해서 적용될 수는 없다.  최근에는 모든 스케쥴링에 관한 전문적 지식을 가지고 있는 인간 전문가의 지식을 추출할 수 있는 컴퓨터 시스템을 이용해서 전문가시스템을 구성해 놓고, 필요한 경우마다 필요한 지식을 추출해서 사용할 수 있도록 하는 노력이 진행되어 오고 있다.  
일반적으로 단일한 하나의 Dispatching Rule을 적용하는 것보다 여러개의 Dispatching Rule을 조합해서 적용하는 것이 더 우수하다는 결과는 여러 경우에 보여지고 있다.  이에 기초를 두고 특정한 기간내에 단일한 Rule을 적용하지 않고 여러개의 Rule을 각각의 소구간에 나누어서 적용하는 MultiPass Scheduling이 제안되었다.   스케쥴링의 대상이 되는 전체 구간을 각각의 작은 소구간으로 나누어서 각각의 소구간에 어떤 Rule을 적용하는 것이 보다 더 우수한 것인가의 문제를 해결하기 위해서 Simulation이 적용되었다[ Wu & Wysk , 1988 ].  특히 여기서는 Expert System에서 각각의 Performance Measure에 대응하는 Rule Set이 제안되도록 해서 Simulation횟수를 줄이고자 한 것이 특징이다.  즉 특정한 생산기간동안에 생산해야할 품목과 수량이 하달되고 특정한 목적( 평균 가공 시간을 최소화, 가동률의 극대화, 혹은 가공 완성품수의 극대화 )에 따라서 스케쥴링을 하라는 지시가 내려지면, 전문가시스템에서 적용할만한 Scheduling Rule을 제안한다.  이 제안된 Rule을 가지고 시뮬레이션 담당부분에서 각각의 소구간에 대해서 시뮬레이션을 각각 실행한다.  이때 가장 우수한 결과를 낳는 Scheduling Rule을 선택해서 현장에 스케쥴을 하달한다.  이 연구방향은 이후 연구가 계속 이어져서 전문가시스템대신에 Neural Net을 이용해서 지식을 구현하는 시스템이 제안되고 있다[ Cho, 1993 ].

생산라인에 있어서 Scheduling Rule의 동적인 적용이 가장 효율적인 스케쥴링 기법으로 판단된다.  이를 효과적으로 적용하는 여러가지 방법중에서 반복적인 시뮬레이션에서 나오는 경험적 자료를 이용해서 이진 의사결정 나무( Binary Decision Tree )가 자동적으로 형성되도록해서 이 이진 의사결정 나무의 형태로 지식을 저장해서 스케쥴을 만들기 위한 지식베이스로 활용하는 LADS( Learning Aided Dynamic Scheduler )가 제안되었다[ Shinichi, 1992 ].  
Scheduling Rule의 동적인 적용을 FMC에 응용한 또 다른 예는 많이 찾아볼 수 있다.  HITEP사에 의해 개발된 SYNAPSE라는 전문가시스템을 이용해서 데이타베이스에 기록되어진 시스템 상태를 읽고 첫번째 규칙 베이스를 이용해서 우수한 스케쥴링 Rule들을 제안한다.  이렇게 선택된 스케쥴링 Rule을 적용해서 SIMAN을 이용하는 시뮬레이션을 통해 각 Rule에 대한 결과를 얻는다.  이 결과는 동일한 환경에 대해서 서로 다른 스케쥴링 Rule을 적용한 결과이다.  두번째 규칙 베이스를 사용해서 결과를 비교하면서 목적함수에 따라서 가장 우수한  Rule을 제시하는 FMC 제어 시스템이 제안되기도 했다[ Lewin  et al, 1993 ].

이외에도 여러가지의 규칙 베이스 전문가시스템이 있다[ Bruno et al  (1986), Erschler and Esquirol(1988), Subramanyam and Askin(1986) ].  이런 전문가시스템에서는 대부분의 경우 지식획득방법이 주로 지식 추출로서 현장의 전문가에 의해서 주로 지식베이스가 구축되어지고 있으며, 시뮬레이션과 전문가시스템의 결합에 의해서 스케쥴을 만들고 있다.  

II.3  Knowledge Base 구축 문제 

인공지능 지식기반형 시스템은 특정분야에 관한 인간 전문가의 지식을 그 영역의 전문지식으로 형식화된 심볼의 표현의 집합으로 변환시킨 것이다[ Ranky,  1988 ].  현재까지의 많은 전문가시스템은 인간전문가의 전문지식들을 이용해서 어떻게 하면 보다 효율적으로 정확하고 많은 정보를 얻을 것인가에 그 초점이 모아져 있었다.  대략적인 지식획득과정은 다음과 같다.    

1. 전문가로부터 언어형태의 정보를 추출한다.
2. 언어형태의 정보를 분석한다.
3. 분석한 정보를 이용해서 세밀하게 설명하는 모델을 구축한다.

전문가의 지식을 먼저 언어정보의 형태로 얻는다.  다음에 이 정보를 세밀하게 분석해서, 그 정보로 구성되면서 동시에 세밀하게 그 지식과 정보를 나타내는 모델을 구축한다.  이런 과정을 통해서 지식이 획득된다.  
이렇게 인간 전문가의 지식으로부터 정보를 획득하는 데 있어서는 대개 다음과 같은 요소로부터 정보나 지식을 얻을 수 있다.

* 대상 영역의 인간 전문가
* 대상 영역의 데이타베이스
* 수학적 모델
* 시뮬레이션 프로그램

그런데 대부분의 전문가시스템은 특정 영역의 인간 전문가를 통해서 지식을 획득한다.  왜냐하면 제일 안정적이고 쉽게 구체적인 정보를 획득할 수 있기 때문이다.  그러나 특정 영역의 인간 전문가를 통해서 얻어지는 지식에도 다양한 형태가 있기 때문에 여러 방법을 통해서 심볼화된 지식으로 변환시킨다.  이를 위해서는 다음과 같은 방법을 이용한다.  

* Inductive Tools
* Structured Rule-Based Tools
* Simple Rule-Based Tools
* Hybrid Tools

전문가시스템을 구축하는 과정은 지식획득과 전문가시스템 구현의 두 가지로 이루어진다.  이중에서 지식획득은 현장의 인간 전문가로부터의 일반적인 사실이나 추론의 전략을 얻어 냄으로써 이루어질 수 있다.  대개 현장전문가로부터 직접 지식을 얻는 방법으로의 지식 추출은 인터뷰나 관찰을 통해서 얻어질 수 있다.  

또 다른 방법의 지식획득방법으로 기계추론( Machine Induction )이 있을 수 있다.  일기예측, 화학반응의 예측 등에 주로 이용되고 있는 Machine Induction은 대체로 Decision Tree와 Rule Set 생성 접근으로 나누어 질 수 있다.  Shinichi의 LADS는 개별 사실들을 이용해서 이진 의사결정 나무구조( Decision Tree )를 이용해서 지식 베이스를 구축하는 것이었다.  그외에는 ID3와 같은 방법을 이용해서 지식베이스를 구축하려는 노력이 진행되어오고 있다[ Hart, 1986 ].  근래에 새롭게 대두된 접근방법으로는 세계적으로 확장되면서 그 규모가 점점 더 커지고 있는 데이타베이스를 이용해서 지식을 구축하려는 것이 있다[Stonebraker, 1992].

전 세계의 정보량은 매 20개월마다 2배로 늘어간다고 추정된다.  특히 근래에 들어 Database의 크기와 수량이 보다 빠르게 증가하고 있다.  기업뿐만 아니라 정부와 학계에서의 Database들도 또한 급속하게 증가하고 있다.  그런데 이렇게 축적되는 Data들은 실제로 아무런 의미도 가지지 않고 그냥 단순한 하나의 사실로 남아있는 경우가 대부분이다.  Data를 분석하기 위한 통계적 기법들이 오래 전부터 개발되어오고 있으나 아직 미미한 수준에 머무르고 있다.  Data를 분석해서 사용가능한 어떤 정보를 추출하기 위해 사용되는 기법으로서는 Inductive Learning, Bayesian Statistics, Semantic Query Opimization, Information Theory, Knowledge Acquisition, Fuzzy Set등이 있다[ Frawley, Shapiro and Mathew, 1991 ].

지식기반 시스템( KBS: Knowledge Base System )은 지식베이스( KB: Knowledge Base )와 추론 엔진( IE: Inference Engine ) 그리고  지능적인 사용자 인터페이스( IUI: Intelligent User Interface )의 세 요소로 구성된다.  지식베이스는 데이타베이스와 규칙베이스로 구성되어 있으며 데이타베이스는 단순한 사실들이 모여있을 뿐이다.  각각의 사실들로 구성되는 데이타베이스는 

P( t1, ... , tn ) , P: 사실의 이름.
                ti : 상수값,  i= 1,2, ... ,n 

으로 나타내어질 수 있다.



규칙베이스는 규칙들의 집합체로서 다음의 형태를 가진다.

B( t1, ... , tm ):  A1( t11, ... , t1i1 ) ∧ A2(t21, ... ,t2n2)
                    ...   An( tn1, ... , tn in ) 
                 Ai, i=1, ... ,n : 관측치
                 B            : 결과치

Ai의 조건들이 관측되거나 만족되면 B의 결과를 선택하게 된다[Basu & Amit, 1992 ].  즉, 특정한 조건이 만족되면 그 조건에 해당하는 결과를 선택해서 실행한다.  이와 동일한 방법으로 데이타베이스 각각의 레코드에서 유용한 정보를 얻는 방법으로 속성기반 추론법( Attribute-Oriented  Induction Method )이 있다. 
이들 데이타베이스에 저장되는 각각의 Tuple 즉 레코드를 가지고 목적으로 하는 정보를 찾아내려는 방법이다.  이 Tuple ( D, C, A ) 의 요소는 다음과 같다.

 D : 데이타베이스에 저장되는 데이타의 집합
 C : 개념적 경향들의 집합
 A : 상태 정의에 사용되는 언어

레코드 각각의 field 값들을 모아서 서로 공통되는 특징을 가지는 field의 값을 중심으로 여러 개의 레코드를 줄인다.  이렇게 같은 값을 가지는 레코드를 없애면서 대신에 그 레코드에 가중치를 부여해서 그 레코드에 기록되어 있는 사실을 하나의 정보 혹은 규칙으로 받아 들인다. 이렇게 얻어지는 규칙이 하나의 Characteristic Rule이 된다.  또한  Characteristic Rule에서 한 걸음 더 나아가서 특정한 field의 값이 결정되기 위해서 다른 field 값은 어떠해야 하는가를 결정하는  Classification Rule이 만들어 질 수도 있다[Cai et al, 1991,1993].  Cai는 데이타베이스의 각 레코드를 가공하는 데 특정한 임계치를 부여해서 이 임계치만큼의 속성값을 가지게 했다.  특정한 field의 값이 여러가지로 주어질 때 그 값들을 임계치만큼의 갯수로 줄이면서 그만큼의 가중치를 부여하면서 새로운 데이타베이스를 만들었다.  그리고 그 데이타베이스에서 IF THEN 구조의 규칙을 찾아내고 있다[ Cai, Cerene & Han, 1991, 1993 ].  이렇게 만들어진 규칙베이스를 이용해서, 주어진 상황에 대응하면서 여러 가지의 규칙을 적용한 선택을 할 수 있도록했다.

DBMS에 규칙베이스를 통합해서 전문가시스템을 형성하고자 하는 경향이 있다. 지난 20여년동안 주로 실험실에서 연구가 이루어져 왔으며 근래에 이르러 프로토타입을 만들려고 하고 있으며 실제 구현에 관한 문제들이 제시되고 있다[ Stonebraker, 1992 ].  이런 노력은 DBMS의 기능에 규칙베이스의 기능을 첨가시켜서 지능형 DBMS를 구축하려는 시도이다.  

한편, 지식베이스와 데이타베이스를 연결시켜서 지식를 구하기위한 방법으로 Object-Oriented Methodology가 제안되기도 했다.   일반적으로 지식베이스는 그 지식베이스보다 더 큰 용량의 데이타를 다루어야하는데 이는 제한된 용량으로 인해서 유지보수하기가 어렵다.  이에 Object - Oriented Methodology를 적용해서 보다 편리하게 데이타베이스와 지식베이스를 유지보수하도록 하는 방법이 제안되었다[ Kunihiko, 1992 ].




기존의 지식베이스는 System Development Facility를 이용해서 지식베이스를 만들었다.  [ 그림 II.1 ]는 System Development Facilitiy를 이용해서 System Developer의 지식에 관한 지식베이스롤 구축하는 하나의 예를 보여주고 있다.





이런 방법으로 지식을 획득하기 위해서는 많은 노력과 시간이 필요했다.  대상이 되는 시스템의 전문가가 반드시 필요하며, 이런 전문가가 생기기까지 많은 시간이 필요하기 때문이다. 



그러므로, 본 논문에서는 System Developer없이도 [ 그림 II.2 ]와 같이 지식을 획득하는 방법을 제시하고자 한다.






III.  지식획득과 모델링 편의성 

일반적으로 어떤 Dispatching Rule이 더 우수한가는 대상으로 하는 공장시스템의 구성, 주어진 구성하에서의 재공품의 현황, 공장내에 새로 투입해야할 주문의 특징에 따라 달라진다.  그러므로 스케쥴링 전문가시스템에서 필요로 하는 지식베이스는 특정한 공장의 구성하에서 독립적으로 존재해야 한다.  
본 연구에서는 지식획득의 기계추론을 위해 사용할 자료로서 실제의 시스템을 운영한 결과가 아닌, 단지 시뮬레이션에서의 결과를 사용한다.  즉 실제의 시스템에서 다른 여러가지의 Dispatching Rule을 동일한 주문에 의해서 적용하면서 결과를 얻기에는 너무 많은 비용이 소모된다.  그러므로 시뮬레이션을 이용해서 동일한 주문을 시스템에 투입하면서 서로 다른 Dispatching Rule을 적용한 결과를 비교해서 주어진 시스템 상태와 주문 상태에 대응해서 가장 우수한 Dispatching  Rule을 선정할 수 있다.  기존의 인간 전문가들에 의해서 얻어지는 개개의 사실들에 대한 정보를 시뮬레이션을 통해서 얻는다.  그리고 실제의 시스템이 항상 다양한 형태의 주문에 대해 스케쥴링을 해야 될 것이므로 여기서도 다양한 형태의 주문 자료를 가지고 시뮬레이션한다.  이렇게 얻어지는 사실들을 하나의 경험적 사실로 받아들여서 지식을 획득하기 위한 사실집합( Factbase )을 구축하게 된다. 
이렇게 구성되는 FactBase내의 개개의 사실들에 기반을 두고 기계 추론을 사용해서 실제의 스케쥴러에서 사용가능한 지식베이스를 구성한다.  



II.1 Fact Base의 구축 
공장시스템의 구성에 따라서 우수한 Dispatching Rule이 서로 다르다.  그러므로 구축할 Fact Base는 공장의 특정한 구성형태에 따라서 각각 서로 다르게 만들어져야한다.    
Fact Base를 구축하기 위해서는 가장 먼저 공장의 운영과 구성을 SIMAN Lanuage를 이용해서 모델링한다.  다음으로 다양한 스케쥴링 Rule을 적용하면서 서로 다른 주문을 가공하도록 하는 부가프로그램을 첨가시키고 마지막으로 시뮬레이션 결과를 기록하는 부가프로그램을 첨가시켜서 Fact Base를 구축하는 SIMAN 프로그램을 만들어서 여러번의 시뮬레이션을 수행해서 Fact Base를 만든다.  이런 과정은 다음과 같은 [ 그림 III.1 ]로 요약해 볼 수 있다.  


III.1.1 단순 모델링 

대상으로 하는 공장을 SIMAN 언어를 이용해서 모델링한다.  공장을 모델링하는 것은 공장을 직접 만든 사람이나 공장을 운영해 본 경험이 없는 사람이라고 할지라도 쉽게 할 수 있다.  그러므로 기존의 지식베이스 구축방법에서는 반드시 필요했던 System Developer가 필요하지 않다.  공장이 어떤 구성하에서 운영되고 있는지에 대한 정보만 있으면 공장의 운영에 관한 단순 모델링은 구축될 수 있다.
이 단계에서 만들어지는 것은 공장에서의 가공 부분과 재공품 저장부분에 대한 모델링만으로 제한된다.  어떤 논리적인 결정이나 Rule도 관련되지는 않는다.  단순하게 공장의 가공 부분과 재공품을 저장하는 부분만 모델링한다.  이렇게 만들어지는 프로그램을 '단순 운영 프로그램'이라 하겠다.  이 단순 운영 프로그램은 다음의 [그림 III.2]와 같은 부분만 나타내고 있다.
 
 

  본 연구에서는 울산 현대정공의 공작기계 공장을 약간 수정해서 다음의 [ 그림 III.3 ]과 같은 구성을 가지는 공장에 적용했다.
 


가공을 위한 부품은 AS/RS를 통해서 들어오고 나가며 한대의 Crane이 각 기계간, 기계와 AS/RS사이에서 부품을 운반한다.  그리고 기계로서는 팔레트위에 부품을 셋업( Setup )하는 Loader와 셋업되어져 있는 부품을 풀어내는 Unloader, 그리고 4대의 CNC Machine과 Washing Machine, 그리고 자동검사기계가 있다. 부품이 공정안으로 들어오게 되면 [ 표 III.1 ]과 같이 정해진 프로세스 플랜에 따라서 가공을 거치고, 가공이 끝나면 AS/RS를 통해서 공장에서 나가게 된다. 





    [ 표 III.1 ] 부품의 프로세스 플랜                          시간 단위  ( 분 )



 

III.1.2  부가 프로그램 

공장의 순수한 운영에 관한 정보만으로 구성된 단순 운영 프로그램이 만들어 지면, Fact Base를 구성하기위한 부가 프로그램이 삽입된다.  부가 프로그램은 [그림 III.4 ]에서의 흐린 부분으로 나타나 있다.


 







각 흐린 부분은 번호별로 다음과 같은 기능을 담당한다.

① 다양한 주문 데이타를 생성하는 부분
② 사용할 Dispatching Rule을 읽어들이는 부분
③ 가공할 부품에 대한 정보를 읽어들이는 부분
④ Part Sequence Rule과 Queue Dispatching Rule을 적용하는 부분
⑤ Due Date의 만족 여부를 기록하는 부분
⑥ 시뮬레이션의 결과를 기록하는 부분

단순운영 프로그램 속으로 부가프로그램이 첨가된다.  이 부가 프로그램은 단순프로그램에 대응해서 간편하게 만들어질 수 있으며, 부가프로그램은 SIMAN언어에서 사용되는 한 명령어인 ' INCLUDE '를 사용해서 첨가된다.  





III.1.3  다양한 주문에 대한 시뮬레이션 

단순 운영 프로그램과 부가 프로그램이 합해져 컴파일 링크된 전체 프로그램은 다양한 주문에 대해서 시뮬레이션을 실행한다.  다양한 경우에 대응해서 특정한 목적에 제일 적합한 Dispatching Rule이 무엇인지를 결정한다.
일반적으로 스케쥴이 만들어지도록 요구되는 시점에는 대부분 시스템내에 재공품이 있기 마련이다.  그러므로 Input Sequence Rule을 적용하는 시점에 시스템내에 재공품이 있는 상황도 나타나 있어야 한다.   그러므로 다양한 주문 데이타를 가지고 실제로 시뮬레이션을 실행하는 과정은 다음의 [ 그림 III.5 ]와 같다.


  

X축을 시간의 축이라고 할 때, 시뮬레이션은 일정한 간격을 계속 반복해서 실행된다.  ' 0 '시간에는 시스템내에 아무런 재공품도 없는 상태에서 주문 데이타가 투입되면서 시뮬레이션이 시작된다.  그리고 Δt시간동안 하나의 Part Input Sequence Rule과 Queue Dispatching Rule이 적용되어 결과가 나온다.  이렇게 Δt시간동안 시뮬레이션하면 [ 표 III.2 ]과 같은 결과가 만들어진다. 

 

1회의 시뮬레이션 결과가 나오고난 후에는 다시 처음으로 돌아가서 다른 Rule을 적용해서 0 - Δt시간동안 시뮬레이션한다.  이렇게 주어지는 모든 스케쥴링 Rule을 적용하면서 시뮬레이션한다.  모든 주어진 Rule을 적용하면서 시뮬레이션을 하면 [ 표 III.2 ]과 같은 데이타가 50개 생긴다.  결국 동일한 초기 조건을 따르면서  단지 적용한 Rule만 서로 다른 50개의 결과를 구하게 된다.  이런 결과는 동일한 초기 조건을 고려했을 때 어떤 Rule을 적용하는 것이 보다 더 좋은지를 알 수 있게 한다.
처음 기간의 시뮬레이션을 다 실행하고 나면 시뮬레이션 종료 시점의 시스템의 재공품 상황과 Performance Measure별 최적 Rule들이 선택되어진다.  그중에서 한 경우를 선택해서 그 경우에 해당하는 시뮬레이션 종료 시점의 시스템 재공품 상황을 출발점으로 해서 두번째 기간의 초기에 주문 데이타를 읽어서 서로 다른 스케쥴링 Rule을 적용하면서 시뮬레이션을 실행한다.  이런 과정은 Wu의 Multipass Simulation방법과 비슷하다.
그러나 여기서 사용하는 Dispatching Rule은 다음과 같은 Part Input Sequence Rule과 Queue Dispatching Rule로 두가지로 나누어 적용되었다.  여기서 적용하고 있는 여러가지의 Rule은 Montazeri의 실험[ Montazeri, 1990 ]에서 사용한 바 있는 20가지의 Rule들을 적용해 본 후, 우수하다고 판정된 Rule들을 선정하고, 여기에 Cho의 논문에서 우수하다고 주장되는 WINQ Rule을 포함해서 사용했다.  이렇게 선택되어진 Rule은 다음과 같이 Part Input Sequence Rule과 10개의 Queue Dispatching Rule이었다.



□ Part Input Sequence Rule

1: LTWK     ( Least Total Time )
2: SSLACK   ( Least amount of static slack )
3: SSLACK/RO(Smallest ratio of Static SLACK/remained operatio)
4: WINQ     ( Work in next queue )
5: EDD      ( Eearly due date     )

□ Queue Dispatching Rule 

1: SPT   ( Shortest imminent operation time )
2: SRPT   ( Shortest remaining processing time )
3: FIFO( First in first out )
4: FASFO( First at shop first out )
5: SLACK( Least amount of dynamic slack )
6: SLACK/RO( Smallest ratio of SLACK/remained operation )
7: SLACK/TP ( Smallest ratio of slack/total processing time )
8: SLACK/RP ( Smallest ratio of slack/remained process time )
9: WINQ     ( Work in next queue  )
10: EDD      ( Early due date      )                          


III.1.4 Fact Base의 형성 

Part Input Sequence Rule과 Queue Dispatching Rule의 조합에 의해 모두 50개의 Rule Set이 형성된다.  이 50개의 Rule Set에 대해서 하나의 주어진 주문데이타를 부여하면서 시뮬레이션을 실행하면 각각에 대응하는 결과가 생긴다.  하나의 Rule에 의해서 시뮬레이션된 결과의 예를 보면 [ 표 III.2 ]과 같다.

이 결과를 보면 Part Input Sequence Rule로서는 Static Slack Rule을 적용하고, Queue Dispatching Rule로서는 WINQ Rule을 적용했을 때, Throughput은 7개, Mean Flow Time은 825.829 분이, 기계 가동율은 95.925 % 이며, 총 생산량 7개중 Due Date를 지키지 못한 것은 2개, 그리고 지금 아직 생산이 끝나지는 않았지만 지금 현재 가공상태를 볼 때 Due Date를 지키지 못할 것으로 생각되는 부품이 5개로 예측된다는 것을 알려주고 있다.  
[ 표 III.2 ]와 같은 결과들이 모두 50개가 생긴다.  이런 50개의 결과는 모두 동일한 주문 데이타와 동일한 초기 시스템 상태를 가지고 시작해서 나타난 결과이다.  이런 결과를 가지고 스케쥴링 목적에 대응해서 어떤 스케쥴링 Rule이 우수한 지를 찾아낸다. 

스케쥴링을 할 때 어느 수행도를 중시하는가에 따라 선택되어지는  스케쥴링 Rule이 서로 다르다.  수행도를 분류하는 기준으로는 대개 평균 가공소요시간을 최소화하거나, 가동율을 최대로 하거나, 또는 일정시간내의 완성품수를 최대로 하거나 혹은 납기지연 제품을 최소로 하거나 납기지연정도를 최소로 하는 등의 수행도가 있을 수 있다.  이들중 납기 지연 제품의 수를 최소로 하거나 납기지연 정도를 최소로 하고자 하는 Rule은 그 자체가 스케쥴링의 대상이 되지 않는다는 판단하에서 제외했다.  왜냐하면 납기일이 지연되는 스케쥴링은 스케쥴링으로서의 가치가 없다고 생각했기 때문이다.  그래서 결국 수행도를 다음과 같이 6가지로 분류하였다.

① Minimize Mean Flow Time
② Maximize Machine Utilization
③ Maximize Throughput
④ Minimize Mean Flow Time Under No Tardy Job
⑤ Maximize Machine Utilization Under No Tardy Job
⑥ Maximize Throughput Under No Tardy Job

이중 ④, ⑤와 ⑥의 목적은 먼저 Due Date를 만족시키면서 다음으로 각각의 목적을 만족시키는 것이다.  6가지의 목적 각각을 가장 잘 만족시키는 Part Input Sequence Rule과 Queue Dispatching Rule을 각각의 주문 상황과 스케쥴링을 하고자 하는 순간의 공장 시스템의 초기 상황과 같이 하나의 레코드로 기록한다.  이렇게 기록된 예를 보면 [ 표 III.3 ]와 같다. 



  



이렇게 만들어진 Fact Base는 인간 전문가의 경험을 레코드로 나타낸 것과 동일하다.  즉, 하나의 레코드를 보면 주문의 특징을 총가공횟수,  가공시간의 평균, 가공시간의 분산, 그리고 주문 데이타를 각 기계별로 할당했을 때의 평균 가공시간과 가공시간의 분산들을 중심으로 기록하고, 스케쥴을 만들고자 할 때의 시스템의 상태를 그때의 재공품의 잔여 총가공횟수, 잔여 가공시간의 평균,  잔여 가공시간의 분산, 그리고 잔여 가공을 각 기계별로 할당했을 때의 각 기계별 평균 가공시간과 가공 시간의 분산을 기록하고 그때의 최적 Part Input Sequence Rule과 Queue Dispatching Rule을 기록하고 있다.  
그러나 이런 결과들은 각각 개개의 어떤 특정한 조건이라는 특정한 값에 따라 달라질 수 있다.  이런 많은 개개의 사실들을 경험하면서 현장의 담당자가 전문가가 되듯이 이런 개개의 많은 사실들을 기반으로 필요로 하는 정보나 어떤 규칙 즉 지식을 획득할 수 있다. 
모두 34개의 데이타필드에 대한 정보가 축적되었지만, 본 논문에서는 주문 정보에 관해서 3개, 시스템의 재공품 정보에 관해서 3개, 선택되는 Rule 2개의 데이타필드등 모두 8개의 데이타필드만을 사용하여 지식베이스를 구축하겠다.



III.2. 지식베이스의 구축 

Fact Base는 마치 인간 전문가가 이전에 경험한 사실을 하나의 레코드로 나타낸 것과 유사하다.  이런 사실들을 다수의 주문 자료에 대해서 그리고 시스템의 초기 조건을 서로 다르게 하면서 시뮬레이션을 실행하면 서로 다른 레코드들이 구해지고 이런 것들은 이제 지식베이스를 얻기 위한 준비 자료가 된다.  
이렇게 만들어진 Fact Base는 각각의 Performance Measure별로 데이타베이스 화일로 나누어지고, 각각의 데이타베이스 화일은 다시 Attribute-Oriented Induction Method를 이용해서 Knowledge를 가지고 있는 데이타베이스 화일 즉 지식베이스로 바뀌게 된다.  




III.2.1 Performance Measure별 데이타베이스의 구축 

개개의 사실로 구성된 Fact Base를 각각의 Performance Measure별로 정리한다.  각 Performance Measure별로 정리된 데이타베이스 화일들은 각 Measure별로 어떤 Rule이 선정되는지를 쉽게 찾을 수 있게 하기 위해 개개의 화일별로 나뉘어진 것이다.  개개의 화일들은 주문의 특징과 초기 시스템의 특징이 기록되어 있다.  이 두 가지의 특징에 대해서 특정한 수행도를 가장 잘 만족시키는 Rule의 번호가 기록되어 있다.  이 개개의 데이타화일들은 개별적인 지식베이스로 전환된다.
이런 과정은 DBMS중의 하나인 Clipper Language로 구성되어져 있으며, 하나의 실행 화일로 되어있으며 이 실행 화일에 의해서 실행된다.  



III.2.2 Symbol화된 데이타베이스로의 전환 

기존의 Attribute-Oriented Induction Method는 심벌화된 값을 가지고 지식베이스를 형성했다.  즉 [ 표 III.4 ]와 같은 데이타베이스가 지식베이스로 변화되었다.  

           [ 표 III.4 ] Symbol로 된 Field Value를 가진 데이타베이스


              
그러나 본 논문에서 만들어지는 각 Measure별 데이타베이스는 어떤 심벌이 아니고 실제의 수치값이다.  그러므로 이런 수치값을 심벌로 만들어주어야 하는데 이를 위해서 Grading Method가 필요하다.  예를 들면 [ 표 III.5 ]와 같은 데이타베이스가 있다고 하자.  여기서 Best Seq. R.과 Best Dis. R.은 각각 Input Sequence Rule과 Dispatching Rule들 중에서 가장 우수한 Rule이 기록되는 데이타필드이다.  그리고 No_oper., Mean_optime과 SD_optime은 공장에서 가공되기위해 들어오게되는 부품들의 operation횟수, operation소요시간의 평균 그리고 operation소요시간의 표준 편차를 나타낸다.  F_No_oper., F_M_optime과 F_SD_optime은 공장내의 재공품들의 잔여 operation횟수, 잔여 operation소요시간의 평균 그리고 잔여 operation소요시간의 표준 편자를 나타낸다.  이런 각각의  데이타필드 값은 심벌이라고 할 수 없다.  이를 개개의 심벌로 만들기 위해 각각의 수치에 근거해서 Grouping을 하고 나뉘어진 각각의 Group에 대응해서 특정한 심벌을 부여하겠다.  그러면 이 심벌로 구성되어진 데이타베이스가 [ 표 III.6 ]과 같이 만들어진다.  이 데이타베이스가 직접적으로 지식베이스의 원천이 된다.  

   
            [ 표 III.5 ] 수치값의 Field Value를 가진 데이타베이스  


   


         [ 표 III.6 ] Symbol화 시킨 Field Value를 가진 데이타베이스  

       


[ 표 III.5 ]와 같은 데이타베이스의 데이타 필드를  [ 표 III.6 ]과 같은 데이타베이스로 변화시키는 방법으로는 Grading Method를 사용하였다.  Grading Method는 각 데이타필드의 값을 서로 비교해서 상대적인 값의 차이에 따라서 순위값을 부여하는 방법이다.  예를 들어, No_Oper의 경우를 보면 48, 51, 52, 53의 4가지 값을 가지는 데 제일 작은 값에 대해 '1'을 부여하고 순서대로 '4'의 값까지 부여했다.  이에 관련된 자료는 부록에 포함시켰다.  이런 방법으로 심벌을 부여하고 이런 심벌의 값에 기준을 두고 지식베이스를 형성한다.  

III.2.3 Attribute-Oriented Induction Method의 적용

심벌화된 데이타베이스는 주문 부품의 평균 가공시간과 주문 부품의 가공횟수가 어떤 범위의 값이며, 또 주문이 들어왔을 때 공장내의 재공품이 어떤 수준인 지에 따라서 다양한 Dispatching Rule이 선택되고 있다는 것을 알려주고 있다.  그러나 [ 표 III.7 ]를 보면 동일한 조건에 따라서 서로 다른 Dispatching Rule이 선택될 수도 있다는 것을 알 수 있다.  

         [ 표 III.7 ] 동일한 조건에 서로 다른 Rule이 선정되는 경우


       


그러므로 동일한 조건일 때 서로 다른 Dispatching Rule이 선택되고 있는 상황이 발생하는 경우에 대비해서 서로 다른 Dispatching Rule들간에 어느 Rule이 보다 더 우수한지를 결정하기위해 다음과 같은 데이타베이스의 가공이 필요하다.  



□ 데이타베이스 가공 알고리즘

     N : 레코드의 갯수
     Ri : i번째 레코드

단계 1 :  각각의 레코드에 Vote라는 새로운 field를 만든다.
단계 2 :
    WHILE   i < T   DO
       IF  Ri 와 같은 다른 레코드가 있다
       THEN Ri 를 제거하고 동일한 값을 가지는 다른 레코드의 Vote를 
              1 증가시킨다.
    END { 동일한 값을 가지는 레코드가 없다 }
단계 3 :
   WHILE   i < T   DO
       IF 선택되는 Dispatching Rule만 다르고 다른 값은 
          다른 동일한 레코드가 있다 
       THEN Vote가 작은 레코드를 제거한다.
    END { 조건들만 같고 Dispatching Rule은 다른 레코드가 없다 }



이상과 같은 과정을 거치면 동일한 조건에 대응해서 제안되는 단일한 Dispatching Rule들로 이루어진 데이타베이스가 [ 표 III.8 ]과 같이 만들어진다.
 
        [ 표 III.8 ] 최종적으로 만들어진 DB형태의 지식베이스

       


이렇게 만들어진 지식베이스는 스케쥴링을 할 때 검색된다. 








이런 전체적인 과정은 다음의 [ 그림 III.6 ]와 같다.



IV. 스케쥴링 전문가 시스템과 수행도 비교  

III장에서 만들어진 지식베이스를 가진 전문가시스템을 내장하게 되는 지식기반형 스케쥴러를 제안하고, 지식베이스가 어떻게 스케쥴링 전문가 시스템에서 기능을 발휘하게 되는지를 먼저 알아본다.  다음으로 제안하는 지식기반형 스케쥴러와 다른 형태의 스케쥴러와의 수행도를 비교해보겠다.


IV.1 지식기반형 스케쥴링 전문가 시스템 

III장에서 만들어진 지식베이스는 DB형태로 되어있다.  이렇게 구축되어진 지식 베이스를 가지고 스케쥴링을 하는 과정은 다음 [ 그림 IV.1 ]과 같다.      

스케쥴을 작성할 필요가 생기면 그 순간에 공장내에 있는 각 기계에서 가공을 기다리는 부품들에 대한 정보, 공장내로 투입되기 위해 기다리는 부품들에 대한 정보와 스케쥴을 작성하는 데에 기준이 되는 Measure가 무엇인지에 대한 정보가 Rule Proposer Expert System으로 하달된다.  이 세 종류의 정보는 지식베이스를 만드는 과정에서 적용했던 Grading Method에 준하는 심벌로 바뀌어서 이 심벌과 동일한 조건의 값을 가지는 레코드를 찾아서 그 레코드에 기록되어있는 Dispatching Rule을 적용한다. 

그런데 여기서 심벌로 바뀌어진 정보에 해당하는 레코드가 지식베이스에 없을 경우가 발생할 수도 있다.  이런 경우에 대비하기 위해 다음과 같은 과정을 거치면 적용할 Dispatching Rule을 찾을 수 있다.

□ 지식베이스 가공 알고리즘

 N : 레코드의 갯수
 Ri : i번째 레코드
 T : field의 갯수
 Fj : j번째 field
 Aj : 주문 정보에서의 j번째 field

 단계 1 : 각각의 레코드에 Accept라는 새로운 field를 만든다.



 단계 2 :
       WHILE   i   N   DO
           WHILE   j    T   DO
                 IF    Fj == Aj   
                 THEN Accept를 1 증가시킨다.
           END { 지식베이스의 한 레코드 field값과 주문 정보의 field값이 
                  동일한 갯수를 계산 }
      END { 지식베이스의 Accept field에 주문정보와의 유사성이 기록된다 }
단계 3 :  Accept값이 가장 큰 레코드의 Dispatching Rule을 선택한다.
단계 4 :  다음에 사용하기위해 Accept field를 제거한다.


최종적으로 만들어진 데이타베이스 형식의 지식베이스는 [ 표 IV.1 ]과 같은 모양을 가진다.








[ 표 IV.1 ] 가공이 끝난 후 사용될 최종적인 데이타베이스 형식의 지식베이스

       

[ 표 IV.1 ]에서 사용된 데이타필드는 앞의 III.2.2절에서 언급된 바와 같은 의미를 가진다.  그리고 사용되는 데이타필드의 갯수를 많이 만들면 만들수록, Grading의 단계를 많이 나누면 나눌수록 지식베이스의 크기도 커진다.  




IV.1.1 스케쥴 적용결과의 피드백

지식베이스 구축을 위한 Fact Base는 이전에 시뮬레이션을 이용해서 만들어졌었다.  그런데 Fact Base는 여러가지의 경우에 대응해서 실제로 공장에 적용해보고 그 결과를 적어야 하는 것이지만 그렇게 하기에는 비용이 너무 많이 들기때문에 시뮬레이션을 이용해서 결과를 기록했던 것이다.  그러므로 실제로 공장에 선택되어진 Rule을 적용해서 나온 결과는 Fact Base에 기록되어질 수 있는 보다 좋은 결과이다.  그러므로 이 결과를 Fact Base에 첨가해서 보다 나은 지식베이스를 구축할 수 있다.  이런 과정을 통해서 보다 현실적인 스케쥴링 전문가 시스템을 만들 수 있다.   



IV.2 수행도 비교 

제안한 지식 기반형 스케쥴러와 비교할 다른 스케쥴러로서는 

  ① 단일한 Dispatching Rule을 적용하는 스케쥴러
  ② MultiPass 스케쥴러

를 선택했다.
  
단일한 Dispatching Rule을 적용하는 경우에는 Part Input Sequence Rule로서는 LTWK Rule과 SSLACK Rule을 적용하고, Queue Dispatching Rule로서는 SPT Rule과 FIFO Rule을 적용했다.  MultiPass 스케쥴러는 Wu & Wysk의 MultiPass 스케쥴러 개념을 적용했다.  한편, 수행도로서는 여러가지를 고려할 수 있지만, 본 논문에서는 평균 가공소요시간을 기준으로 했다.  
다섯 종류의 주문을 위에서 선택한 두 종류의 스케쥴러에 적용했을 경우의 결과를 비교했다.  그런데 단일한 Dispatching Rule을 적용할 경우를 보면, Part Input Sequence Rule과 Queue Dispatching Rule의 두 종류로 적용될 수 있으므로 모두 4가지의 경우가 생기며, 시뮬레이션하는 기간은 모두 30시간으로 가정했다.  그리고 MultiPass 스케쥴러를 적용하는 경우에는 전체 30시간을 3개의 Shift로 나누어서 각 Pass의 길이를 10시간, 즉 600분으로 했다.  [ 표 IV.1 ]에서 만들어진 지식베이스를 적용해서 시뮬레이션했다.  그 결과는 [ 표 IV.2 ]과 같다.



  [ 표 IV.2 ] 각 스케쥴러를 이용한 시뮬레이션 결과
 



다섯 종류의 주문자료를 적용했을 경우중에서 세 가지 경우에 MultiPass 스케쥴러가 우수하다. 그리고 만들어진 지식베이스를 이용했을 경우와 Input Sequence Rule로서는 SSLACK Rule을 적용하고 Queue Dispatching Rule로서는 SPT Rule을 적용했을 경우에 각각 한번씩 우수하다고 판단되었다.  
전체적으로 볼 때, MultiPass 스케쥴러가 우수하다.  그러나 MultiPass 스케쥴러는 50회의 시뮬레이션을 실행하는 데 걸리는 시간이 필요하므로 실제의 경우에는 적용하기가 어렵다.  또한, MultiPass 스케쥴러가 전체 스케쥴 대상의 기간을 여러 Pass로 나누어서 [ 표 IV.3 ]와 같이  각각의 Pass에 대응해서 가장 우수한 Rule을 적용하지만 이런 것도 공장의 환경이 수시로 바뀌는 상황하에서는 아직 개선할 여지가 있다.  이에 비해서 본 논문에서 제안하는 스케쥴러는 데이타베이스를 검색하는 데에 걸리는 시간만으로 스케쥴을 만들 수 있다. 

[ 표 IV.3 ] MultiPass 스케쥴러를 적용했을 경우에 선택되는 Rule










V. 결론 

V.1 여타 스케쥴링 시스템과의 차이점

본 논문에서는 시뮬레이션 결과라는 자료를 이용하여 지식베이스를 형성하고 이 지식베이스를 이용해서 실시간내에 스케쥴을 만들 수 있는 시스템을 제시했다.  이런 시스템은 여타의 단일한 Dispatching Rule을 적용하는 경우에 비해서 우수한 스케쥴을 만들 수 있다.  또한 Wu의 Multipass 시뮬레이션을 이용한 스케쥴이 달성하지 못한 실시간 스케쥴링을 달성할 수 있다.  Multipass 시뮬레이션에서는 시뮬레이션을 수행할 시간만큼의 시간지연에 의해서 실시간 스케쥴링이 될 수 없었지만 본 논문에서는 단 한번의 데이타베이스로 이루어져 있는 지식베이스를 검색하면 바로 단 하나의 최적 Dispatching Rule을 선택할 수 있으므로 충분히 실시간 스케쥴링이 가능하다.  



V.2 추후 연구방향

개개의 수치화된 Fact Base에서 지식베이스를 형성하기 위한 방법으로 Grading을 사용하였는데 여기서 어떤 Grading Method를 적용하는가에 따라 지식베이스의 우수성이 결정되는 것으로 보인다.  즉 본 논문에서는 임의의 데이타 필드의 수치값들을 단순한 순위에 근거에서 균등하게 나누어서 그 Group내에서 가장 많이 선택되어진 Rule을 선택하는 방식으로 Rule을 찾았다.  그러나 임의의 데이타 필드의 수치값의 절대적인 크기에 준해서 Grading을 해보는 방법도 고려할 수 있다.  
본 논문에서는 스케쥴링 전문가 시스템을 구성하는 하나의 방법을 제시하고, 특정한 공장에 대해서 구축된 지식베이스를 적용해서 시뮬레이션을 해보는 수준에 그치고 있다.  이를 실제의 공장에 적용해서 어떤 문제점이 발생하는지에 대한 평가는 아직 이루어지지 못했다.  특히 공장의 제어시스템내에서 통신시스템을 이용해서 정보를 받아들여서 이 정보에 근거해서 구축되어진 지식베이스에서 Rule을 검색하고 그 Rule을 적용해서 실제로 공장에 적용해 보는 과정은 수행하지 못했다.  실제 공장의 제어시스템에 본 논문에서 제시하고 있는 스케쥴링 전문가시스템이 어떻게 부가될 수 있는지를 실제적으로 수행해 볼 과제가 남아있다.




초록


유연생산 시스템에서 우선순위 규칙의 수행도에 관해서는 시뮬레이션 기법을 통한 다양한 연구가 진행된 바 있다.  이런 연구의 결과들은 어떤 특정한 우선순위 규칙이 다른 어떤 다른 규칙보다 항상 우수하다고 할 수는 없다는 것을 말해주고 있다.   지식베이스를 이용해서 우선순위 규칙을 동적으로 선택하는 스케쥴링 전문가 시스템의 개발에 있어서 특정 규칙을 선택하게 하여주는 세부 전문가시스템은 매우 중요한 요소이다.
본 연구에서는 임의의 공장을 SIMAN/CINEMA 언어라는 시뮬레이션 언어로 프로그래밍한다.  그리고 다양한 주문정보와 주문이 투입되는 시점의 공장상태에 관한 정보와 다양한 우선순위 규칙들이 적용되어서 시뮬레이션된다.  시뮬레이션된 결과는 각각의 수행도의 관점에서 비교되어진다.   이런 결과들은 데이타베이스에 저장되고 attibute-oriented induction method에 의해서 지식베이스로 재구성된다.  이렇게 만들어진 지식베이스는 스케쥴링 전문가시스템에서 사용된다.
이 연구는 job-shop으로 이루어진 공장에 대한 스케쥴을 on-line 혹은 off-line으로 작성할 수 있도록 하며 또한 임의의 구성형태를 가진 공장에 대해서도 보다 적은 비용으로 보다 효과적으로 스케쥴링 전문가시스템을 형성할 수 있게 아여준다.

주요어 : 지식획득, 스케쥴링, 시뮬레이션,
         속성 기반 추론법, 전문가시스템


</tdmsfiletext>
